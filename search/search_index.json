{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my tutorial and lab assignment repository for computational media.","title":"Welcome"},{"location":"circuits/attiny85/","text":"About the ATtiny85 Microcontroller The ATtiny85 microcontroller is a powerful yet extremely low cost (~ 50\u00a2 each) integrated circuit . The chip itself operates with an 8-bit data bus, which means it can access 8-bits of data per computer instruction (set, copy, add, subtract, multiply, compare, etc.). Its CPU speed is capable of up to 8MHz and it has 8KB flash memory for storing Arduino programs. [By comparison, our Adafruit Feather M0 microcontrollers have a 32-bit data bus and operate at 48MHz with 256KB flash memory. Much more powerful, but they cost 7 times as much!] The ATtiny85 requires an operating voltage between 1.8V and 5.5V and has 5 I/O (input/output) pins for connecting electronic components. Here is the pin breakout: Pin #8 (VCC) is connected to the positive terminal of your voltage source (1.8V - 5.5V). Pin #4 (GND) is connected to ground / the negative terminal of your voltage source. The Arduino programming language can be used to control pins #5, #6, #7, #2 and #3: Pins 0 - 4 (marked in light blue) are all capable of digitalWrite()/digitalRead() functions Pins 0 & 1 are capable of PWM analogWrite() at 8-bit resolution (0-255) Pins A1-A3 (marked in red) are capable of analogRead(), measuring analog voltage through a 10-bit ADC (Analog to Digital Converter). 1 The RESET pin is a special pin; connecting this pin to GND will restart the program running on your ATtiny85. ATtiny85 Hands-On with Tinkercad Over the course of this tutorial, we will create several circuits with the ATtiny85 microcontroller using Autodesk's Tinkercad circuit simulator: The classic project \"Blinky\" Programmatically Fade an LED Programmatically Fade an LED with a Potentiometer RGB LED color control with a Potentiometer First, however, we need to wire up our ATtiny85 to a power supply. Powering an ATtiny85 Warning As noted in the \"About\" section above, the ATtiny85 has an operating voltage between 1.8V and 5.5V. Anything below 1.8V and the microcontroller will not have enough voltage to function. Anything over 5.5V and you risk overloading the chip, as illustrated by the 9V battery blowing the IC in the image below: For this tutorial, you can use 1.5V AA batteries -- you'll need more than one (2 batteries = 3V; 3 batteries = 4.5V) -- or a 3V coin cell battery. The illustrations for the remainder of this tutorial will make use of a 3V coin cell battery. Go to tinkercad.com and sign into your account. Go to your Tinkercad Dashboard: https://www.tinkercad.com/#/dashboard Click on the Circuits button in the left panel. Click on the green \"Create new Circuit\" button. Create new Circuit A new blank canvas will open in your browser. Place your ATtiny85 in the center of your breadboard, straddling the breadboard's ravine. Place a battery near your breadboard. Use a red wire to connect the positive (+) terminal of the battery to the + power bus of the breadboard. Use a red wire to connect the + power bus of the breadboard to the VCC pin of the ATtiny85. Use a black wire to connect the negative (-) terminal of the battery to the - power bus of the breadboard. Use a black wired to connect the - power bus the breadboard to the GND pin of the ATtiny85. Project \"Blinky\" First let's wire up the ATtiny85 for the classic Arduino project, Project Blinky. Here is a schematic: For this project, you will need the following additional components: 1 x Red LED 1 x 47\u03a9 Resistor Drag the two components into your Tinkercad window and, consulting the circuit schematic above, recreate the circuit on your breadboard. Connect the anode (positive terminal) of the LED to digital pin 0 (light blue) of the ATtiny85 microcontroller. Connect the cathode (negative terminal) of the LED to one end of the resistor. Connect the other end of the resistor to GND / the negative (-) power bus rail. Your final wiring should look like this: Next we'll turn to the code necessary to turn the LED on and off programmatically. Click on the Code button in the upper-right of the interface. By default, Tinkercad will open into the Blocks code interface. Blocks is a visual coding paradigm based on MIT's Scratch . Note that Tinkercad has already pre-populated the Blocks code interface with blocks that set the ATtiny85's \"built-in\" LED to HIGH, wait one second, and then set the ATtiny85's \"built-in\" LED to LOW, waiting another second. This may be confusing, since the ATtiny85 does NOT have a \"built-in\" LED like other Arduino microcontrollers such as the Arduino Uno do. We could replace the blocks that reference the built-in LED with the block that would \"Set Pin 0 to HIGH/LOW\". However, we're going to switch over to the Text coding view instead. Find the dropdown in the upper-left of the code panel and change it from \"Blocks\" to \"Text\". You will be prompted to confirm this intention. Click \"Continue.\" You will note that Tinkercad has pre-populated the code interface with the following: void setup () { pinMode ( 0 , OUTPUT ); } void loop () { digitalWrite ( 0 , HIGH ); delay ( 1000 ); // Wait for 1000 millisecond(s) digitalWrite ( 0 , LOW ); delay ( 1000 ); // Wait for 1000 millisecond(s) } As it happens, this is just the code we need to turn pin 0 of the ATtiny85 on and off every second. In the setup() function, the pinMode of pin 0 is set to OUTPUT . And then in the loop() function, the digitalWrite() function is called on pin 0 and set to HIGH. A delay() function of 1000 milliseconds is called. And then a second digitalWrite() function sets pin 0 to LOW, followed by one more 1000 millisecond delay. Click \"Start Simulation\" and your LED should blink on and off. Congratulations! You've completed Project Blinky! Programmatically Fade an LED We can use this same wiring scheme to fade an LED instead of blinking it. Instead of the digitalWrite() function, we'll instead use analogWrite() , taking advantage of the fact that Pin 0 is one of two pins on the ATtiny85 (marked in green below) that is capable of PWM (pulse width modulation). Let's modify the code accordingly: The setup() function can be left alone; we want digital pin 0 to function as an OUTPUT . The loop() function requires significant modification, so delete its contents entirely and we will work through the required logic line by line. Recall that PWM works by modifying the duty cycle of the pin. Rather than being HIGH 100% of the time with a digitalWrite(pin, HIGH) function, or LOW 100% of the time with a digitalWrite(pin, LOW) function, the analogWrite() function enables us to set different percentages of HIGH/LOW to approximate an analog voltage signal at 256 levels between 0V (LOW) and 3V (HIGH). So, analogWrite(0, 127) will cycle the LED HIGH 50% of the time and LOW 50% of the time and in the case of our 3V circuit, will approximate sending an analog voltage of 1.5V through the LED. So, to fade our LED, we will want to iterate through increasing values between 0 and 255 to fade the LED to on, and then iterate through decreasing values from 255 to 0 to fade the LED off. One way to write that code is line by line: void loop (){ analogWrite ( 0 , 0 ); delay ( 30 ); analogWrite ( 0 , 5 ); delay ( 30 ); analogWrite ( 0 , 15 ); delay ( 30 ); analogWrite ( 0 , 20 ); delay ( 30 ); analogWrite ( 0 , 25 ); delay ( 30 ); analogWrite ( 0 , 30 ); delay ( 30 ); ... // continue increasing analogWrite by 5 analogWrite ( 0 , 250 ); delay ( 30 ); analogWrite ( 0 , 255 ); delay ( 30 ); analogWrite ( 0 , 250 ); delay ( 30 ); analogWrite ( 0 , 245 ); delay ( 30 ); analogWrite ( 0 , 240 ); delay ( 30 ); analogWrite ( 0 , 235 ); delay ( 30 ); ... // continue decreasing analogWrite by 5 analogWrite ( 0 , 15 ); delay ( 30 ); analogWrite ( 0 , 10 ); delay ( 30 ); analogWrite ( 0 , 5 ); } But that is NOT very efficient! Luckily, like many programming languages, Arduino has a for control structure that will allow us to radically economize on the lines of code necessary to achieve the same result. Here is the basic structure of a for loop: for ( initialization ; condition ; increment ) { //statement(s); } By convention, most programmers use the variable name i within a for loop. For example: for ( int i = 0 ; i < 1000 ; i = i + 1 ) { // this code will run 1000 times! } But one can use any variable name: for ( int elephants = 0 ; elephants < 1000 ; elephants = elephants + 1 ) { // this code will also run 1000 times! } The incrementing code, i = i + 1 is often abbreviated as i++ : for ( int i = 0 ; i < 1000 ; i ++ ) { // this code will run 1000 times, too! } Finally, incrementation is not limited to increments of 1: // increments of 2 for ( int i = 0 ; i < 1000 ; i = i + 2 ) { // this code will run 500 times } // increments of 5, abbreviated notation for ( int i = 0 ; i < 1000 ; i += 5 ) { // this code will run 200 times! } Whew! That was quite a detour. Let's get back to our LED fade loop() function. We want our analogWrite() function to iterate up from 0 to 255 in increments of 5, so within our loop() function we can write: void loop () { for ( int lightLevel = 0 ; lightLevel <= 255 ; lightLevel = lightLevel + 5 ) { analogWrite ( 0 , lightLevel ); delay ( 30 ); } } Click \"Start Simulation\" and you'll see that we're halfway there. The LED starts OFF, fades to ON, and then jumps back to OFF again, fades to ON, jumps back to OFF, etc, etc. So we need a second for loop to decrement the light level (highlighted in yellow): void loop () { for ( int lightLevel = 0 ; lightLevel <= 255 ; lightLevel = lightLevel + 5 ) { analogWrite ( 0 , lightLevel ); delay ( 30 ); } for ( int lightLevel = 255 ; lightLevel >= 0 ; lightLevel = lightLevel - 5 ) { analogWrite ( 0 , lightLevel ); delay ( 30 ); } } Click \"Start Simulation\" and the LED should slowly fade in and out, as if it were breathing. Congratulations! You've successfully completed the \"Programmatically Fade an LED\" project! Programmatically Fade an LED with a Potentiometer In this next project, we'll add a potentiometer to our circuit and use it to control the fade level of the LED. Here is the circuit schematic for your reference: First, delete all of the code in the Text interface of your Code panel. We will write new code for this project. Next, close the Code panel to access your Components bin and locate the Potentiometer . Drag it onto your Tinkercad canvas. Connect the outer terminals of the potentiometer to the positive (+) and negative (-) bus of your breadboard. The \"wiper\" terminal of the potentiometer should be connected to one of the three pins on the ATtiny85 that are capable of reading analog voltages. They are marked in red as pins A1, A2, and A3 on the pinout diagram. In the example below, we've connected the potentiometer's wiper to pin A3 of the ATtiny85 using a yellow wire. Note At this point you may be asking: Why didn't we connect the potentiometer wiper in series with the LED to directly control the LED's brightness? That's a great question! Indeed, you might even be wondering why we need the ATtiny85 to accomplish this project at all! In fact, if all we want to do is use a potentiometer to control the brightness of an LED, we don't need a microcontroller to do that! You could save yourself time and money and avoid having to touch code at all! The purpose of this project, however, is on the one hand purely pedagogical: to teach you how to use a microcontroller to read an analog voltage. A microcontroller can put that information to use in many different ways. In the last project of this tutorial we'll make use of that analog signal to create a circuit that would be quite a bit more difficult to accomplish without a microcontroller. Stay tuned! Now that we've wired up our potentiometer, let's turn to the Arduino code necessary to read its output. Open the Code panel and again, switch to the Text interface. Let's begin by initializing some variables. We need one to hold the value coming in from our potentiometer on pin A3: int pot_value = 0 ; And let's use a variable name to identify the pin that attaches to our LED. This is considered a good practice in case you ever need to modify the pin configuration on your hardware. Rather than having to hunt through your code for every reference to pin 0 , you can simply change it in the variable list at the top of your sketch. int pot_value = 0 ; int ledPin = 0 ; Let's do the same for the pin that attaches to our potentiometer: int pot_value = 0 ; int ledPin = 0 ; int sensorPin = A3 ; Now that we've declared our variables, we can use these in our setup() function to set these pins as OUTPUT and INPUT as needed: int pot_value = 0 ; int ledPin = 0 ; int sensorPin = A3 ; void setup () { pinMode ( ledPin , OUTPUT ); pinMode ( sensorPin , INPUT ); } We can now turn our attention to our program's loop() function. The first thing we want to do each program cycle is read the value coming in over the ADC at pin A3 from the potentiometer and assign it to our pot_value variable: void loop () { pot_value = analogRead ( sensorPin ); } The next thing we want to do is to use that value to set the analogWrite() value for the LED pin. Important! The ADC of pin A3 runs at 10 bits, which means that analogRead() is going to be giving readings between 0 and 1023. Our analogWrite() function can only take an 8 bit value, between 0 and 255. To reconcile this difference, we need to use Arduino's map() math function and then use that re-mapped value to drive our LED. In the code highlighted below, we first re-map the 10 bit pot_value to an 8 bit number and then pass that re-mapped value to analogWrite() . void loop () { pot_value = analogRead ( sensorPin ); pot_value = map ( pot_value , 0 , 1023 , 0 , 255 ); analogWrite ( ledPin , pot_value ); } Our full code should read as follows: int pot_value = 0 ; int ledPin = 0 ; int sensorPin = A3 ; void setup () { pinMode ( ledPin , OUTPUT ); pinMode ( sensorPin , INPUT ); } void loop () { pot_value = analogRead ( sensorPin ); pot_value = map ( pot_value , 0 , 1023 , 0 , 255 ); analogWrite ( ledPin , pot_value ); } Click on \"Start Simulation.\" Use your mouse to manipulate the potentiometer. When the indicator is closest to the pin you have connected to the positive (+) voltage, the LED should burn brightest. When the indicator is moved toward the pin that you have connected to ground (-), the LED should dim and then turn off completely. Congratulations! You've completed the \"Programmatically Fade an LED with a Potentiometer\" project. Challenge You can use this same hardware setup to build another classic Arduino project: Using a potentiometer to control the blink speed of an LED. All you need to change is the Arduino code. See if you can't figure out how to make it work on your own, using the digitalWrite() , delay() , and map() functions. Hint: Map the potentiometer values to milliseconds and use in the delay() function! Email your code to your professor! RGB LED Color Control with a Potentiometer For our final circuit in this tutorial, we'll introduce a new component - an RGB LED - and use the readings from a potentiometer to programmatically change its colors depending on where the potentiometer is positioned. To save time, we'll begin by duplicating the project we just completed above. Return to your Circuits Dashboard . Find the design you just completed and click on the cog in the upper right corner of the project's card, as illustrated below. From the drop-down that appears, choose \"Duplicate.\" Tinkercad should take you to a new project, automatically entitled \"Copy of [original project name]\". For this circuit, we'll use the following circuit diagram: Note Note that the ATtiny85 in its basic configuration only has two PWM pins, and to use the full range of an RGB LED you need to have three. While it is possible to circumvent this limitation with code to enable a 3rd PWM pin, the Tinkercad simulator is not capable of that degree of complexity. So for the purposes of this tutorial, we'll simply make by using the ATtiny85's two PWM pins (0 and 1) and then pin 2 as a digital pin to generate a more limited set of colors. Let's begin with the wiring of the RGB LED. Delete the red LED, its resistor, and all of its related jumper wires from your project. This should leave only the battery and the potentiometer wired to your ATtiny85. Locate in the Components bin the RGB LED component and drag it to your breadboard. Connect the \"common cathode\" (-) pin of the RGB LED to GND. Add three 47\u03a9 resistor to your canvas, connecting one each to the red, green, and blue pins of the RGB LED. Connect each resistor to a specific digital pin on the ATtiny85, as follows: Connect the blue pin's resistor to digital pin 1 . Connect the green pin's resistor to digital pin 0 . Connect the red pin's resistor to digital pin 2 . Your circuit should look something like this: Tip If the image above is confusing to you, remember how a breadboard works. Everything in a numbered row on one side of the ravine is connected together. Now we can turn our attention to the Arduino Code. An RGB LED works by mixing three different LEDs - one red, one green, one blue - in different ratios of intensity. Let's begin by declaring variables for each of our RGB LED's pins: int int redPin = 2 ; int greenPin = 0 ; int bluePin = 1 ; And then let's initialize each of these pins as OUTPUTs in the setup() function: void setup () { pinMode ( redPin , OUTPUT ); pinMode ( greenPin , OUTPUT ); pinMode ( bluePin , OUTPUT ); } Here is a table that outlines different color combinations for the Tinkercad simulator based on ratios of red, green, and blue: Color Red Green Blue Red 100% 0% 0% Green 0% 100% 0% Blue 0% 0% 100% Yellow 100% 100% 0% Orange 100% 25% 0% Purple 100% 0% 100% Magenta 100% 0% 30% Turquoise 0% 100% 100% The above values can be translated to code, using analogWrite() and converting the percentages to an 8-bit value. So the color orange can be achieved by the following: // orange = red 100%, green 20%, blue 0% analogWrite ( redPin , 255 ); analogWrite ( greenPin , 64 ); // 25% of 255 is approx. 64 analogWrite ( bluePin , 0 ); Since our redPin , pin 2 is not capable of PWM, we instead need to use digitalWrite() on that pin: // orange = red 100%, green 20%, blue 0% digitalWrite ( redPin , HIGH ); analogWrite ( greenPin , 64 ); // 25% of 255 is approx. 64 analogWrite ( bluePin , 0 ); Put the code above in your loop() function and test it out. The full code is: int int redPin = 2 ; int greenPin = 0 ; int bluePin = 1 ; void setup () { pinMode ( redPin , OUTPUT ); pinMode ( greenPin , OUTPUT ); pinMode ( bluePin , OUTPUT ); } void loop () { // orange = red 100%, green 20%, blue 0% digitalWrite ( redPin , HIGH ); analogWrite ( greenPin , 64 ); analogWrite ( bluePin , 0 ); } The RGB LED should glow orange. One of the things you can do in Arduino is declare custom functions outside of your setup() and loop() functions and then call them in these main functions. For example, you could create a function below your loop() function for the color orange: void colorOrange (){ // orange = red 100%, green 20%, blue 0% digitalWrite ( redPin , HIGH ); analogWrite ( greenPin , 64 ); analogWrite ( bluePin , 0 ); } Then you can call that function in your loop() : int int redPin = 2 ; int greenPin = 0 ; int bluePin = 1 ; void setup () { pinMode ( redPin , OUTPUT ); pinMode ( greenPin , OUTPUT ); pinMode ( bluePin , OUTPUT ); } void loop (){ colorOrange (); } void colorOrange () { // orange = red 100%, green 20%, blue 0% digitalWrite ( redPin , HIGH ); analogWrite ( greenPin , 64 ); analogWrite ( bluePin , 0 ); } Go ahead and create additional custom functions for red, blue, green, yellow, and turquiose. Try to do this on your own, without consulting the code below. void colorRed () { digitalWrite ( redPin , HIGH ); analogWrite ( greenPin , 0 ); analogWrite ( bluePin , 0 ); } void colorBlue () { digitalWrite ( redPin , LOW ); analogWrite ( greenPin , 0 ); analogWrite ( bluePin , 255 ); } void colorGreen () { digitalWrite ( redPin , LOW ); analogWrite ( greenPin , 255 ); analogWrite ( bluePin , 0 ); } void colorYellow () { digitalWrite ( redPin , HIGH ); analogWrite ( greenPin , 255 ); analogWrite ( bluePin , 0 ); } void colorTurquoise () { digitalWrite ( redPin , LOW ); analogWrite ( greenPin , 255 ); analogWrite ( bluePin , 255 ); } void colorPurple () { digitalWrite ( redPin , HIGH ); analogWrite ( greenPin , 0 ); analogWrite ( bluePin , 255 ); } Then create a simple sketch that cycles through the colors for a duration of two seconds each. Replace your loop() function with the following: void loop () { colorRed (); delay ( 2000 ); colorBlue (); delay ( 2000 ); colorGreen (); delay ( 2000 ); colorYellow (); delay ( 2000 ); colorPurple (); delay ( 2000 ); colorTurquoise (); delay ( 2000 ); } Test out your code by clicking the \"Start Simulation\" button. Failure? If you used a different sequence of colors than the sequence above, you may have noticed that the simulator skips one or more of your colors. This is an error in the simulator, not your code. I have found that the simulator struggles to switch to orange in particular. Finally, we can now integrate the potentiometer back into our code and use it to select different colors. Note that the potentiometer has seven (7) dots around its perimeter, which have been marked with letters a-g in the image below left. These markings roughly correspond to the 10-bit potentiometer readings in the table at right: Marking pot_value color a 1023 red b 850 blue c 680 green d 510 yellow e 340 purple f 170 turquoise g 0 orange Since it is unlikely that anyone can consistently set the potentiometer to the exact position that generates those specific values, we can create a buffer of a range of values to segment our potentiometer into seven \"zones\": Marking ideal pot_value range color a 1023 940 - 1023 red b 850 770 - 940 blue c 680 599 - 769 green d 510 428 - 598 yellow e 340 257 - 427 purple f 170 86 - 256 turquoise g 0 0 - 85 orange Alternatively, and perhaps more straightforward, we can map the potentiometer values to a smaller range of values and then use the following to demarcate the potentiometer: Marking ideal pot_value range color a 18 17 - 18 red b 15 14 - 16 blue c 12 11 - 13 green d 9 8 - 10 yellow e 6 5 - 7 purple f 3 2 - 4 turquoise g 0 0 - 1 orange Let's make use of this information to control the RGB LED color with the potentiometer. Return to your project's code in the Code panel. Add the highlighted variables -- they should be familiar to you -- above your setup() function: int int redPin = 2 ; int greenPin = 0 ; int bluePin = 1 ; int sensorPin = A3 ; int pot_value = 0 ; void setup () ... Add the highlighted line to your setup() function: void setup () { pinMode ( redPin , OUTPUT ); pinMode ( greenPin , OUTPUT ); pinMode ( bluePin , OUTPUT ); pinMode ( sensorPin , INPUT ); } Finally, re-write your loop() function in this way: At the start of each program loop, set the value of pot_value to the reading from the potentiometer: void loop () { pot_value = analogRead ( sensorPin ); } Next, let's re-map the potentiometer value to a new int variable named val : void loop () { pot_value = analogRead ( sensorPin ); int val = map ( pot_value , 0 , 1023 , 0 , 18 ); } Then use a series of if statements to set the RGB LED to different colors based on the value of val depending on whether it falls within a specified range of values, as in the code below: void loop () { pot_value = analogRead ( sensorPin ); int val = map ( pot_value , 0 , 1023 , 0 , 18 ); if ( 0 <= val && val <= 1 ) { colorOrange (); } if ( 2 <= val && val <= 4 ) { colorTurquoise (); } if ( 5 <= val && val <= 7 ) { colorPurple (); } if ( 8 <= val && val <= 10 ) { colorYellow (); } if ( 11 <= val && val <= 13 ) { colorGreen (); } if ( 14 <= val && val <= 16 ) { colorBlue (); } if ( 17 <= val && val <= 18 ) { colorRed (); } } Test your project by clicking \"Start Simulation\" and then click on the potentiometer to move it between different marks. Great job completing the last project in this tutorial! Begin brainstorming a circuit based on the ATtiny85 that you'd like to prototype and have manufactured... \"10-bit\" refers to the resolution of the ADC, meaning that it can convert an analog signal into 1024 (0-1023) discrete levels. See https://en.wikipedia.org/wiki/Analog-to-digital_converter#Resolution \u21a9","title":"ATtiny85"},{"location":"circuits/attiny85/#about-the-attiny85-microcontroller","text":"The ATtiny85 microcontroller is a powerful yet extremely low cost (~ 50\u00a2 each) integrated circuit . The chip itself operates with an 8-bit data bus, which means it can access 8-bits of data per computer instruction (set, copy, add, subtract, multiply, compare, etc.). Its CPU speed is capable of up to 8MHz and it has 8KB flash memory for storing Arduino programs. [By comparison, our Adafruit Feather M0 microcontrollers have a 32-bit data bus and operate at 48MHz with 256KB flash memory. Much more powerful, but they cost 7 times as much!] The ATtiny85 requires an operating voltage between 1.8V and 5.5V and has 5 I/O (input/output) pins for connecting electronic components. Here is the pin breakout: Pin #8 (VCC) is connected to the positive terminal of your voltage source (1.8V - 5.5V). Pin #4 (GND) is connected to ground / the negative terminal of your voltage source. The Arduino programming language can be used to control pins #5, #6, #7, #2 and #3: Pins 0 - 4 (marked in light blue) are all capable of digitalWrite()/digitalRead() functions Pins 0 & 1 are capable of PWM analogWrite() at 8-bit resolution (0-255) Pins A1-A3 (marked in red) are capable of analogRead(), measuring analog voltage through a 10-bit ADC (Analog to Digital Converter). 1 The RESET pin is a special pin; connecting this pin to GND will restart the program running on your ATtiny85.","title":"About the ATtiny85 Microcontroller"},{"location":"circuits/attiny85/#attiny85-hands-on-with-tinkercad","text":"Over the course of this tutorial, we will create several circuits with the ATtiny85 microcontroller using Autodesk's Tinkercad circuit simulator: The classic project \"Blinky\" Programmatically Fade an LED Programmatically Fade an LED with a Potentiometer RGB LED color control with a Potentiometer First, however, we need to wire up our ATtiny85 to a power supply.","title":"ATtiny85 Hands-On with Tinkercad"},{"location":"circuits/attiny85/#powering-an-attiny85","text":"Warning As noted in the \"About\" section above, the ATtiny85 has an operating voltage between 1.8V and 5.5V. Anything below 1.8V and the microcontroller will not have enough voltage to function. Anything over 5.5V and you risk overloading the chip, as illustrated by the 9V battery blowing the IC in the image below: For this tutorial, you can use 1.5V AA batteries -- you'll need more than one (2 batteries = 3V; 3 batteries = 4.5V) -- or a 3V coin cell battery. The illustrations for the remainder of this tutorial will make use of a 3V coin cell battery. Go to tinkercad.com and sign into your account. Go to your Tinkercad Dashboard: https://www.tinkercad.com/#/dashboard Click on the Circuits button in the left panel. Click on the green \"Create new Circuit\" button. Create new Circuit A new blank canvas will open in your browser. Place your ATtiny85 in the center of your breadboard, straddling the breadboard's ravine. Place a battery near your breadboard. Use a red wire to connect the positive (+) terminal of the battery to the + power bus of the breadboard. Use a red wire to connect the + power bus of the breadboard to the VCC pin of the ATtiny85. Use a black wire to connect the negative (-) terminal of the battery to the - power bus of the breadboard. Use a black wired to connect the - power bus the breadboard to the GND pin of the ATtiny85.","title":"Powering an ATtiny85"},{"location":"circuits/attiny85/#project-blinky","text":"First let's wire up the ATtiny85 for the classic Arduino project, Project Blinky. Here is a schematic: For this project, you will need the following additional components: 1 x Red LED 1 x 47\u03a9 Resistor Drag the two components into your Tinkercad window and, consulting the circuit schematic above, recreate the circuit on your breadboard. Connect the anode (positive terminal) of the LED to digital pin 0 (light blue) of the ATtiny85 microcontroller. Connect the cathode (negative terminal) of the LED to one end of the resistor. Connect the other end of the resistor to GND / the negative (-) power bus rail. Your final wiring should look like this: Next we'll turn to the code necessary to turn the LED on and off programmatically. Click on the Code button in the upper-right of the interface. By default, Tinkercad will open into the Blocks code interface. Blocks is a visual coding paradigm based on MIT's Scratch . Note that Tinkercad has already pre-populated the Blocks code interface with blocks that set the ATtiny85's \"built-in\" LED to HIGH, wait one second, and then set the ATtiny85's \"built-in\" LED to LOW, waiting another second. This may be confusing, since the ATtiny85 does NOT have a \"built-in\" LED like other Arduino microcontrollers such as the Arduino Uno do. We could replace the blocks that reference the built-in LED with the block that would \"Set Pin 0 to HIGH/LOW\". However, we're going to switch over to the Text coding view instead. Find the dropdown in the upper-left of the code panel and change it from \"Blocks\" to \"Text\". You will be prompted to confirm this intention. Click \"Continue.\" You will note that Tinkercad has pre-populated the code interface with the following: void setup () { pinMode ( 0 , OUTPUT ); } void loop () { digitalWrite ( 0 , HIGH ); delay ( 1000 ); // Wait for 1000 millisecond(s) digitalWrite ( 0 , LOW ); delay ( 1000 ); // Wait for 1000 millisecond(s) } As it happens, this is just the code we need to turn pin 0 of the ATtiny85 on and off every second. In the setup() function, the pinMode of pin 0 is set to OUTPUT . And then in the loop() function, the digitalWrite() function is called on pin 0 and set to HIGH. A delay() function of 1000 milliseconds is called. And then a second digitalWrite() function sets pin 0 to LOW, followed by one more 1000 millisecond delay. Click \"Start Simulation\" and your LED should blink on and off. Congratulations! You've completed Project Blinky!","title":"Project \"Blinky\""},{"location":"circuits/attiny85/#programmatically-fade-an-led","text":"We can use this same wiring scheme to fade an LED instead of blinking it. Instead of the digitalWrite() function, we'll instead use analogWrite() , taking advantage of the fact that Pin 0 is one of two pins on the ATtiny85 (marked in green below) that is capable of PWM (pulse width modulation). Let's modify the code accordingly: The setup() function can be left alone; we want digital pin 0 to function as an OUTPUT . The loop() function requires significant modification, so delete its contents entirely and we will work through the required logic line by line. Recall that PWM works by modifying the duty cycle of the pin. Rather than being HIGH 100% of the time with a digitalWrite(pin, HIGH) function, or LOW 100% of the time with a digitalWrite(pin, LOW) function, the analogWrite() function enables us to set different percentages of HIGH/LOW to approximate an analog voltage signal at 256 levels between 0V (LOW) and 3V (HIGH). So, analogWrite(0, 127) will cycle the LED HIGH 50% of the time and LOW 50% of the time and in the case of our 3V circuit, will approximate sending an analog voltage of 1.5V through the LED. So, to fade our LED, we will want to iterate through increasing values between 0 and 255 to fade the LED to on, and then iterate through decreasing values from 255 to 0 to fade the LED off. One way to write that code is line by line: void loop (){ analogWrite ( 0 , 0 ); delay ( 30 ); analogWrite ( 0 , 5 ); delay ( 30 ); analogWrite ( 0 , 15 ); delay ( 30 ); analogWrite ( 0 , 20 ); delay ( 30 ); analogWrite ( 0 , 25 ); delay ( 30 ); analogWrite ( 0 , 30 ); delay ( 30 ); ... // continue increasing analogWrite by 5 analogWrite ( 0 , 250 ); delay ( 30 ); analogWrite ( 0 , 255 ); delay ( 30 ); analogWrite ( 0 , 250 ); delay ( 30 ); analogWrite ( 0 , 245 ); delay ( 30 ); analogWrite ( 0 , 240 ); delay ( 30 ); analogWrite ( 0 , 235 ); delay ( 30 ); ... // continue decreasing analogWrite by 5 analogWrite ( 0 , 15 ); delay ( 30 ); analogWrite ( 0 , 10 ); delay ( 30 ); analogWrite ( 0 , 5 ); } But that is NOT very efficient! Luckily, like many programming languages, Arduino has a for control structure that will allow us to radically economize on the lines of code necessary to achieve the same result. Here is the basic structure of a for loop: for ( initialization ; condition ; increment ) { //statement(s); } By convention, most programmers use the variable name i within a for loop. For example: for ( int i = 0 ; i < 1000 ; i = i + 1 ) { // this code will run 1000 times! } But one can use any variable name: for ( int elephants = 0 ; elephants < 1000 ; elephants = elephants + 1 ) { // this code will also run 1000 times! } The incrementing code, i = i + 1 is often abbreviated as i++ : for ( int i = 0 ; i < 1000 ; i ++ ) { // this code will run 1000 times, too! } Finally, incrementation is not limited to increments of 1: // increments of 2 for ( int i = 0 ; i < 1000 ; i = i + 2 ) { // this code will run 500 times } // increments of 5, abbreviated notation for ( int i = 0 ; i < 1000 ; i += 5 ) { // this code will run 200 times! } Whew! That was quite a detour. Let's get back to our LED fade loop() function. We want our analogWrite() function to iterate up from 0 to 255 in increments of 5, so within our loop() function we can write: void loop () { for ( int lightLevel = 0 ; lightLevel <= 255 ; lightLevel = lightLevel + 5 ) { analogWrite ( 0 , lightLevel ); delay ( 30 ); } } Click \"Start Simulation\" and you'll see that we're halfway there. The LED starts OFF, fades to ON, and then jumps back to OFF again, fades to ON, jumps back to OFF, etc, etc. So we need a second for loop to decrement the light level (highlighted in yellow): void loop () { for ( int lightLevel = 0 ; lightLevel <= 255 ; lightLevel = lightLevel + 5 ) { analogWrite ( 0 , lightLevel ); delay ( 30 ); } for ( int lightLevel = 255 ; lightLevel >= 0 ; lightLevel = lightLevel - 5 ) { analogWrite ( 0 , lightLevel ); delay ( 30 ); } } Click \"Start Simulation\" and the LED should slowly fade in and out, as if it were breathing. Congratulations! You've successfully completed the \"Programmatically Fade an LED\" project!","title":"Programmatically Fade an LED"},{"location":"circuits/attiny85/#programmatically-fade-an-led-with-a-potentiometer","text":"In this next project, we'll add a potentiometer to our circuit and use it to control the fade level of the LED. Here is the circuit schematic for your reference: First, delete all of the code in the Text interface of your Code panel. We will write new code for this project. Next, close the Code panel to access your Components bin and locate the Potentiometer . Drag it onto your Tinkercad canvas. Connect the outer terminals of the potentiometer to the positive (+) and negative (-) bus of your breadboard. The \"wiper\" terminal of the potentiometer should be connected to one of the three pins on the ATtiny85 that are capable of reading analog voltages. They are marked in red as pins A1, A2, and A3 on the pinout diagram. In the example below, we've connected the potentiometer's wiper to pin A3 of the ATtiny85 using a yellow wire. Note At this point you may be asking: Why didn't we connect the potentiometer wiper in series with the LED to directly control the LED's brightness? That's a great question! Indeed, you might even be wondering why we need the ATtiny85 to accomplish this project at all! In fact, if all we want to do is use a potentiometer to control the brightness of an LED, we don't need a microcontroller to do that! You could save yourself time and money and avoid having to touch code at all! The purpose of this project, however, is on the one hand purely pedagogical: to teach you how to use a microcontroller to read an analog voltage. A microcontroller can put that information to use in many different ways. In the last project of this tutorial we'll make use of that analog signal to create a circuit that would be quite a bit more difficult to accomplish without a microcontroller. Stay tuned! Now that we've wired up our potentiometer, let's turn to the Arduino code necessary to read its output. Open the Code panel and again, switch to the Text interface. Let's begin by initializing some variables. We need one to hold the value coming in from our potentiometer on pin A3: int pot_value = 0 ; And let's use a variable name to identify the pin that attaches to our LED. This is considered a good practice in case you ever need to modify the pin configuration on your hardware. Rather than having to hunt through your code for every reference to pin 0 , you can simply change it in the variable list at the top of your sketch. int pot_value = 0 ; int ledPin = 0 ; Let's do the same for the pin that attaches to our potentiometer: int pot_value = 0 ; int ledPin = 0 ; int sensorPin = A3 ; Now that we've declared our variables, we can use these in our setup() function to set these pins as OUTPUT and INPUT as needed: int pot_value = 0 ; int ledPin = 0 ; int sensorPin = A3 ; void setup () { pinMode ( ledPin , OUTPUT ); pinMode ( sensorPin , INPUT ); } We can now turn our attention to our program's loop() function. The first thing we want to do each program cycle is read the value coming in over the ADC at pin A3 from the potentiometer and assign it to our pot_value variable: void loop () { pot_value = analogRead ( sensorPin ); } The next thing we want to do is to use that value to set the analogWrite() value for the LED pin. Important! The ADC of pin A3 runs at 10 bits, which means that analogRead() is going to be giving readings between 0 and 1023. Our analogWrite() function can only take an 8 bit value, between 0 and 255. To reconcile this difference, we need to use Arduino's map() math function and then use that re-mapped value to drive our LED. In the code highlighted below, we first re-map the 10 bit pot_value to an 8 bit number and then pass that re-mapped value to analogWrite() . void loop () { pot_value = analogRead ( sensorPin ); pot_value = map ( pot_value , 0 , 1023 , 0 , 255 ); analogWrite ( ledPin , pot_value ); } Our full code should read as follows: int pot_value = 0 ; int ledPin = 0 ; int sensorPin = A3 ; void setup () { pinMode ( ledPin , OUTPUT ); pinMode ( sensorPin , INPUT ); } void loop () { pot_value = analogRead ( sensorPin ); pot_value = map ( pot_value , 0 , 1023 , 0 , 255 ); analogWrite ( ledPin , pot_value ); } Click on \"Start Simulation.\" Use your mouse to manipulate the potentiometer. When the indicator is closest to the pin you have connected to the positive (+) voltage, the LED should burn brightest. When the indicator is moved toward the pin that you have connected to ground (-), the LED should dim and then turn off completely. Congratulations! You've completed the \"Programmatically Fade an LED with a Potentiometer\" project. Challenge You can use this same hardware setup to build another classic Arduino project: Using a potentiometer to control the blink speed of an LED. All you need to change is the Arduino code. See if you can't figure out how to make it work on your own, using the digitalWrite() , delay() , and map() functions. Hint: Map the potentiometer values to milliseconds and use in the delay() function! Email your code to your professor!","title":"Programmatically Fade an LED with a Potentiometer"},{"location":"circuits/attiny85/#rgb-led-color-control-with-a-potentiometer","text":"For our final circuit in this tutorial, we'll introduce a new component - an RGB LED - and use the readings from a potentiometer to programmatically change its colors depending on where the potentiometer is positioned. To save time, we'll begin by duplicating the project we just completed above. Return to your Circuits Dashboard . Find the design you just completed and click on the cog in the upper right corner of the project's card, as illustrated below. From the drop-down that appears, choose \"Duplicate.\" Tinkercad should take you to a new project, automatically entitled \"Copy of [original project name]\". For this circuit, we'll use the following circuit diagram: Note Note that the ATtiny85 in its basic configuration only has two PWM pins, and to use the full range of an RGB LED you need to have three. While it is possible to circumvent this limitation with code to enable a 3rd PWM pin, the Tinkercad simulator is not capable of that degree of complexity. So for the purposes of this tutorial, we'll simply make by using the ATtiny85's two PWM pins (0 and 1) and then pin 2 as a digital pin to generate a more limited set of colors. Let's begin with the wiring of the RGB LED. Delete the red LED, its resistor, and all of its related jumper wires from your project. This should leave only the battery and the potentiometer wired to your ATtiny85. Locate in the Components bin the RGB LED component and drag it to your breadboard. Connect the \"common cathode\" (-) pin of the RGB LED to GND. Add three 47\u03a9 resistor to your canvas, connecting one each to the red, green, and blue pins of the RGB LED. Connect each resistor to a specific digital pin on the ATtiny85, as follows: Connect the blue pin's resistor to digital pin 1 . Connect the green pin's resistor to digital pin 0 . Connect the red pin's resistor to digital pin 2 . Your circuit should look something like this: Tip If the image above is confusing to you, remember how a breadboard works. Everything in a numbered row on one side of the ravine is connected together. Now we can turn our attention to the Arduino Code. An RGB LED works by mixing three different LEDs - one red, one green, one blue - in different ratios of intensity. Let's begin by declaring variables for each of our RGB LED's pins: int int redPin = 2 ; int greenPin = 0 ; int bluePin = 1 ; And then let's initialize each of these pins as OUTPUTs in the setup() function: void setup () { pinMode ( redPin , OUTPUT ); pinMode ( greenPin , OUTPUT ); pinMode ( bluePin , OUTPUT ); } Here is a table that outlines different color combinations for the Tinkercad simulator based on ratios of red, green, and blue: Color Red Green Blue Red 100% 0% 0% Green 0% 100% 0% Blue 0% 0% 100% Yellow 100% 100% 0% Orange 100% 25% 0% Purple 100% 0% 100% Magenta 100% 0% 30% Turquoise 0% 100% 100% The above values can be translated to code, using analogWrite() and converting the percentages to an 8-bit value. So the color orange can be achieved by the following: // orange = red 100%, green 20%, blue 0% analogWrite ( redPin , 255 ); analogWrite ( greenPin , 64 ); // 25% of 255 is approx. 64 analogWrite ( bluePin , 0 ); Since our redPin , pin 2 is not capable of PWM, we instead need to use digitalWrite() on that pin: // orange = red 100%, green 20%, blue 0% digitalWrite ( redPin , HIGH ); analogWrite ( greenPin , 64 ); // 25% of 255 is approx. 64 analogWrite ( bluePin , 0 ); Put the code above in your loop() function and test it out. The full code is: int int redPin = 2 ; int greenPin = 0 ; int bluePin = 1 ; void setup () { pinMode ( redPin , OUTPUT ); pinMode ( greenPin , OUTPUT ); pinMode ( bluePin , OUTPUT ); } void loop () { // orange = red 100%, green 20%, blue 0% digitalWrite ( redPin , HIGH ); analogWrite ( greenPin , 64 ); analogWrite ( bluePin , 0 ); } The RGB LED should glow orange. One of the things you can do in Arduino is declare custom functions outside of your setup() and loop() functions and then call them in these main functions. For example, you could create a function below your loop() function for the color orange: void colorOrange (){ // orange = red 100%, green 20%, blue 0% digitalWrite ( redPin , HIGH ); analogWrite ( greenPin , 64 ); analogWrite ( bluePin , 0 ); } Then you can call that function in your loop() : int int redPin = 2 ; int greenPin = 0 ; int bluePin = 1 ; void setup () { pinMode ( redPin , OUTPUT ); pinMode ( greenPin , OUTPUT ); pinMode ( bluePin , OUTPUT ); } void loop (){ colorOrange (); } void colorOrange () { // orange = red 100%, green 20%, blue 0% digitalWrite ( redPin , HIGH ); analogWrite ( greenPin , 64 ); analogWrite ( bluePin , 0 ); } Go ahead and create additional custom functions for red, blue, green, yellow, and turquiose. Try to do this on your own, without consulting the code below. void colorRed () { digitalWrite ( redPin , HIGH ); analogWrite ( greenPin , 0 ); analogWrite ( bluePin , 0 ); } void colorBlue () { digitalWrite ( redPin , LOW ); analogWrite ( greenPin , 0 ); analogWrite ( bluePin , 255 ); } void colorGreen () { digitalWrite ( redPin , LOW ); analogWrite ( greenPin , 255 ); analogWrite ( bluePin , 0 ); } void colorYellow () { digitalWrite ( redPin , HIGH ); analogWrite ( greenPin , 255 ); analogWrite ( bluePin , 0 ); } void colorTurquoise () { digitalWrite ( redPin , LOW ); analogWrite ( greenPin , 255 ); analogWrite ( bluePin , 255 ); } void colorPurple () { digitalWrite ( redPin , HIGH ); analogWrite ( greenPin , 0 ); analogWrite ( bluePin , 255 ); } Then create a simple sketch that cycles through the colors for a duration of two seconds each. Replace your loop() function with the following: void loop () { colorRed (); delay ( 2000 ); colorBlue (); delay ( 2000 ); colorGreen (); delay ( 2000 ); colorYellow (); delay ( 2000 ); colorPurple (); delay ( 2000 ); colorTurquoise (); delay ( 2000 ); } Test out your code by clicking the \"Start Simulation\" button. Failure? If you used a different sequence of colors than the sequence above, you may have noticed that the simulator skips one or more of your colors. This is an error in the simulator, not your code. I have found that the simulator struggles to switch to orange in particular. Finally, we can now integrate the potentiometer back into our code and use it to select different colors. Note that the potentiometer has seven (7) dots around its perimeter, which have been marked with letters a-g in the image below left. These markings roughly correspond to the 10-bit potentiometer readings in the table at right: Marking pot_value color a 1023 red b 850 blue c 680 green d 510 yellow e 340 purple f 170 turquoise g 0 orange Since it is unlikely that anyone can consistently set the potentiometer to the exact position that generates those specific values, we can create a buffer of a range of values to segment our potentiometer into seven \"zones\": Marking ideal pot_value range color a 1023 940 - 1023 red b 850 770 - 940 blue c 680 599 - 769 green d 510 428 - 598 yellow e 340 257 - 427 purple f 170 86 - 256 turquoise g 0 0 - 85 orange Alternatively, and perhaps more straightforward, we can map the potentiometer values to a smaller range of values and then use the following to demarcate the potentiometer: Marking ideal pot_value range color a 18 17 - 18 red b 15 14 - 16 blue c 12 11 - 13 green d 9 8 - 10 yellow e 6 5 - 7 purple f 3 2 - 4 turquoise g 0 0 - 1 orange Let's make use of this information to control the RGB LED color with the potentiometer. Return to your project's code in the Code panel. Add the highlighted variables -- they should be familiar to you -- above your setup() function: int int redPin = 2 ; int greenPin = 0 ; int bluePin = 1 ; int sensorPin = A3 ; int pot_value = 0 ; void setup () ... Add the highlighted line to your setup() function: void setup () { pinMode ( redPin , OUTPUT ); pinMode ( greenPin , OUTPUT ); pinMode ( bluePin , OUTPUT ); pinMode ( sensorPin , INPUT ); } Finally, re-write your loop() function in this way: At the start of each program loop, set the value of pot_value to the reading from the potentiometer: void loop () { pot_value = analogRead ( sensorPin ); } Next, let's re-map the potentiometer value to a new int variable named val : void loop () { pot_value = analogRead ( sensorPin ); int val = map ( pot_value , 0 , 1023 , 0 , 18 ); } Then use a series of if statements to set the RGB LED to different colors based on the value of val depending on whether it falls within a specified range of values, as in the code below: void loop () { pot_value = analogRead ( sensorPin ); int val = map ( pot_value , 0 , 1023 , 0 , 18 ); if ( 0 <= val && val <= 1 ) { colorOrange (); } if ( 2 <= val && val <= 4 ) { colorTurquoise (); } if ( 5 <= val && val <= 7 ) { colorPurple (); } if ( 8 <= val && val <= 10 ) { colorYellow (); } if ( 11 <= val && val <= 13 ) { colorGreen (); } if ( 14 <= val && val <= 16 ) { colorBlue (); } if ( 17 <= val && val <= 18 ) { colorRed (); } } Test your project by clicking \"Start Simulation\" and then click on the potentiometer to move it between different marks. Great job completing the last project in this tutorial! Begin brainstorming a circuit based on the ATtiny85 that you'd like to prototype and have manufactured... \"10-bit\" refers to the resolution of the ADC, meaning that it can convert an analog signal into 1024 (0-1023) discrete levels. See https://en.wikipedia.org/wiki/Analog-to-digital_converter#Resolution \u21a9","title":"RGB LED Color Control with a Potentiometer"},{"location":"circuits/blynk/","text":"In this tutorial you will be introduced to the Blynk platform for IoT. Blynk is a platform with iOS and Android apps to control microcontrollers over the Internet. It enables the quick prototyping of a graphic interface for your project by simply dragging and dropping widgets. Getting Started with Blynk Install the Blynk library in the Arduino IDE Launch the Ardunio IDE. From the main menu, choose Sketch --> Include Library --> Manage Libraries. In the \"Filter your search...\" textbox, enter Blynk The first entry in the search results should be \"Blynk by Volodymyr Shymanskyy.\" Click the Install button to install the latest version. Click \"Close\" to return to the main interface. Open the sample Blynk sketch for the Feather M0: File --> Examples --> Blynk --> Boards_WiFi --> Adafruit_Feather_M0_WiFi On your mobile device, download and install the Blynk app: Blynk for Android Blynk for IoS Launch the app on your mobile device. Click on the \"Create New Account\" link: Enter your email and set up a password. Blynk uses your email to send authorization tokens so if you prefer not to use your own current email address, consider setting up a Gmail account specifically for this purpose. Click \"Sign Up\" and you will be authenticated to the Blynk cloud server. Next, create your first Blynk app: Click on \"New Project\" Give your new project a name. Under choose device, look for \"Adafruit Feather M0.\" If you are unable to locate it, choose \"Arduino MKR1000\" which uses the same SAMD chip and WiFi101 library as the Feather M0. Alternatively, you can use the \"Generic Board\" with the connection type \"Wi-Fi.\" Finally, decide if you want to have a dark or light theme/background for your app. Finally, click the Create button. The Blynk mobile application will notify you that it has sent an app-specific Auth Token to your email address. Later we will copy this into the Arduino sketch you opened in step #2 above. You will next be presented with a blank canvas for your app, which you can populate with Blynk widgets . Widgets are Blynk's interface modules, and are used to perform a specific input or output function when communicating with your Feather M0. Note While Blynk is free to use, they limit the number of widgets you can use in a particular app under the free account. You have a total of 2,000 credits to \"spend\" on widgets. When you delete an app, the credits used by the widgets in that app are returned to your account balance. You can also \"recycle\" widgets in an existing application, removing it from the app and replenishing your credits. Let's begin by creating a simple Blynk app that controls the on-board LED (pin 13) on the Feather M0. Click on the + icon at the top of the app canvas. Spend a little time familiarizing yourself with the available widgets. Click on the [i] icon to read about each one. Select the Button widget and it will be added to your app canvas. You can press and hold the button widget to position it on your canvas and/or resize it. Tap once on the Button widget to access its properties. In this case we want the Button widget to control the Feather's on-board LED at pin 13. Touch the green outlined output box and choose Digital Pin 13. Here you can also decide if you want the widget to be a button or a switch, as well as set labels, font size and font color. When set as a button , the widget will function as a momentary \"on\" tactile button, which remains on only for the duration of the button press. When set as a switch , the button will toggle between the on and off position, \"latching\" in place until it is tapped again. Tap the back arrow to return to the app canvas. You're now ready to test out your app. This is a two-step process: First, press the \"play\" button on the Blynk canvas. This will switch the Blynk interface to \"playback\" mode. In this mode, tapping your Button widget will operate the button itself instead of bringing up its settings menu. Next, we need to configure the Adafruit_Feather_M0_WiFi sketch and upload it to the Feather: By now you should have received the Auth Token email from Blynk. Check your email inbox and copy the token (a long string of letters and numbers that will associate your Blynk app with your specific Feather M0) Return to the Arduino IDE application. In the Adafruit_Feather_M0_WiFi sketch, find line 38. Replace YourAuthToken within the quotes with your actual Auth Token. On lines 42 and 43, enter your WiFi network name, replacing YourNetworkName and, if required, your network password replacing YourPassword . Important For Duke's network, these lines should read: char ssid [] = \"DukeOpen\" ; char pass [] = \"\" ; Save the sketch (you will be prompted to give it a new name.) Plug your Feather M0 into your USB port. In Arduino, make sure you have \"Adafruit Feather M0\" selected under Tools --> Board and the proper USB port under Tools --> Port. Verify and then Upload the sketch. Return to the Blynk app on your mobile device. Tapping the button should flash the Feather's built-in LED on if the Button widget was set to \"button\" mode. If set to \"switch\" mode, each tap will toggle the LED either on or off. Congratulations! You've created your first Blynk app. Blynk offers a range of controller widgets -- buttons, sliders, timers, two-axis joysticks, step control, and RGBa color pickers. These can be used to control LEDs, motors, relays, solenoids, etc. Blynk's Display Widgets Now let's explore some of Blynk's display widgets which allow you to display and chart data sent from your Feather microcontroller and any attached sensors. Hook up a sensor of your choosing to your Feather M0. Some possibilities include: Temperature Sensor (the TMP36 is in your Redboard Inventor's Kit) Light Sensitive Resistor Potentiometer Important The Feather M0 operates at 3.3V logic level! In the mobile Blynk app, add a new widget to your canvas by tapping on the + icon. Scroll down to find the Display widgets and choose the \"Labeled Value\" widget. It will appear as an empty box on your canvas. Press and hold to resize and/or re-position the widget. Tap once on the widget to access its settings: Title: Optional, but useful to specify the sensor. Pin (outlined in green): Choose the pin from which you want to read the sensor (usually an analog input pin). To the right of the pin setting you can specify the expected or mapped values: Expected values -- these are the \"raw\" values read by the microcontroller's ADC (analog to digital converter). [The Adafruit Feather M0's analog input pins are read at 12-bit resolution, so you will want to change the upper value from 1023 to 4096 to reflect this higher resolution.] Mapped values -- While you know how to use Arduino's map() function to remap sensor values to different scales within the Arduino sketch itself, Blynk allows you to map incoming values in the mobile app itself. Note the curved line connecting the lowest sensor value to the highest. If you tap that line, a greyed out circle with amplitude becomes active, indicating that instead of passing along raw values, Blynk will map the incoming values to the range you specify. So if you wanted to map your sensor to values 0 to 100, simply use that as a range and Blynk will automatically do the mapping for you! By default, this widget will show the values only, but you can format the output to include labels. For example, if your sensor sends the value 75.385, you can use the following syntax to modify the numerical display: /pin/ will display: 75.385 (the default) /pin./ will display a rounded, non-decimal value: 75 /pin.#/ will display the value with 10ths of an integer resolution: 75.4 /pin.##/ will display the value with 100ths of an integer resolution: 75.39 as well as add labels: value: /pin./ will display: value 75 /pin.#/ % will display: 75.4 % level: /pin/ microns will display: level: 75.385 microns Finally, you can decide how often you want the blynk app to query your hardware. Default is every 1 second. Tap the back arrow to return to your canvas. Press the \"play\" button on your Blynk canvas. If your Feather M0 is connected and the sensor properly wired, you should see values updating in the labeled display immediately! Challenge - Twitter or Email Challenge yourself to create an application that triggers a Tweet or email when a sensor hits a particular threshhold. http://docs.blynk.cc/#widgets-notifications","title":"Blynk"},{"location":"circuits/blynk/#getting-started-with-blynk","text":"Install the Blynk library in the Arduino IDE Launch the Ardunio IDE. From the main menu, choose Sketch --> Include Library --> Manage Libraries. In the \"Filter your search...\" textbox, enter Blynk The first entry in the search results should be \"Blynk by Volodymyr Shymanskyy.\" Click the Install button to install the latest version. Click \"Close\" to return to the main interface. Open the sample Blynk sketch for the Feather M0: File --> Examples --> Blynk --> Boards_WiFi --> Adafruit_Feather_M0_WiFi On your mobile device, download and install the Blynk app: Blynk for Android Blynk for IoS Launch the app on your mobile device. Click on the \"Create New Account\" link: Enter your email and set up a password. Blynk uses your email to send authorization tokens so if you prefer not to use your own current email address, consider setting up a Gmail account specifically for this purpose. Click \"Sign Up\" and you will be authenticated to the Blynk cloud server. Next, create your first Blynk app: Click on \"New Project\" Give your new project a name. Under choose device, look for \"Adafruit Feather M0.\" If you are unable to locate it, choose \"Arduino MKR1000\" which uses the same SAMD chip and WiFi101 library as the Feather M0. Alternatively, you can use the \"Generic Board\" with the connection type \"Wi-Fi.\" Finally, decide if you want to have a dark or light theme/background for your app. Finally, click the Create button. The Blynk mobile application will notify you that it has sent an app-specific Auth Token to your email address. Later we will copy this into the Arduino sketch you opened in step #2 above. You will next be presented with a blank canvas for your app, which you can populate with Blynk widgets . Widgets are Blynk's interface modules, and are used to perform a specific input or output function when communicating with your Feather M0. Note While Blynk is free to use, they limit the number of widgets you can use in a particular app under the free account. You have a total of 2,000 credits to \"spend\" on widgets. When you delete an app, the credits used by the widgets in that app are returned to your account balance. You can also \"recycle\" widgets in an existing application, removing it from the app and replenishing your credits. Let's begin by creating a simple Blynk app that controls the on-board LED (pin 13) on the Feather M0. Click on the + icon at the top of the app canvas. Spend a little time familiarizing yourself with the available widgets. Click on the [i] icon to read about each one. Select the Button widget and it will be added to your app canvas. You can press and hold the button widget to position it on your canvas and/or resize it. Tap once on the Button widget to access its properties. In this case we want the Button widget to control the Feather's on-board LED at pin 13. Touch the green outlined output box and choose Digital Pin 13. Here you can also decide if you want the widget to be a button or a switch, as well as set labels, font size and font color. When set as a button , the widget will function as a momentary \"on\" tactile button, which remains on only for the duration of the button press. When set as a switch , the button will toggle between the on and off position, \"latching\" in place until it is tapped again. Tap the back arrow to return to the app canvas. You're now ready to test out your app. This is a two-step process: First, press the \"play\" button on the Blynk canvas. This will switch the Blynk interface to \"playback\" mode. In this mode, tapping your Button widget will operate the button itself instead of bringing up its settings menu. Next, we need to configure the Adafruit_Feather_M0_WiFi sketch and upload it to the Feather: By now you should have received the Auth Token email from Blynk. Check your email inbox and copy the token (a long string of letters and numbers that will associate your Blynk app with your specific Feather M0) Return to the Arduino IDE application. In the Adafruit_Feather_M0_WiFi sketch, find line 38. Replace YourAuthToken within the quotes with your actual Auth Token. On lines 42 and 43, enter your WiFi network name, replacing YourNetworkName and, if required, your network password replacing YourPassword . Important For Duke's network, these lines should read: char ssid [] = \"DukeOpen\" ; char pass [] = \"\" ; Save the sketch (you will be prompted to give it a new name.) Plug your Feather M0 into your USB port. In Arduino, make sure you have \"Adafruit Feather M0\" selected under Tools --> Board and the proper USB port under Tools --> Port. Verify and then Upload the sketch. Return to the Blynk app on your mobile device. Tapping the button should flash the Feather's built-in LED on if the Button widget was set to \"button\" mode. If set to \"switch\" mode, each tap will toggle the LED either on or off. Congratulations! You've created your first Blynk app. Blynk offers a range of controller widgets -- buttons, sliders, timers, two-axis joysticks, step control, and RGBa color pickers. These can be used to control LEDs, motors, relays, solenoids, etc.","title":"Getting Started with Blynk"},{"location":"circuits/blynk/#blynks-display-widgets","text":"Now let's explore some of Blynk's display widgets which allow you to display and chart data sent from your Feather microcontroller and any attached sensors. Hook up a sensor of your choosing to your Feather M0. Some possibilities include: Temperature Sensor (the TMP36 is in your Redboard Inventor's Kit) Light Sensitive Resistor Potentiometer Important The Feather M0 operates at 3.3V logic level! In the mobile Blynk app, add a new widget to your canvas by tapping on the + icon. Scroll down to find the Display widgets and choose the \"Labeled Value\" widget. It will appear as an empty box on your canvas. Press and hold to resize and/or re-position the widget. Tap once on the widget to access its settings: Title: Optional, but useful to specify the sensor. Pin (outlined in green): Choose the pin from which you want to read the sensor (usually an analog input pin). To the right of the pin setting you can specify the expected or mapped values: Expected values -- these are the \"raw\" values read by the microcontroller's ADC (analog to digital converter). [The Adafruit Feather M0's analog input pins are read at 12-bit resolution, so you will want to change the upper value from 1023 to 4096 to reflect this higher resolution.] Mapped values -- While you know how to use Arduino's map() function to remap sensor values to different scales within the Arduino sketch itself, Blynk allows you to map incoming values in the mobile app itself. Note the curved line connecting the lowest sensor value to the highest. If you tap that line, a greyed out circle with amplitude becomes active, indicating that instead of passing along raw values, Blynk will map the incoming values to the range you specify. So if you wanted to map your sensor to values 0 to 100, simply use that as a range and Blynk will automatically do the mapping for you! By default, this widget will show the values only, but you can format the output to include labels. For example, if your sensor sends the value 75.385, you can use the following syntax to modify the numerical display: /pin/ will display: 75.385 (the default) /pin./ will display a rounded, non-decimal value: 75 /pin.#/ will display the value with 10ths of an integer resolution: 75.4 /pin.##/ will display the value with 100ths of an integer resolution: 75.39 as well as add labels: value: /pin./ will display: value 75 /pin.#/ % will display: 75.4 % level: /pin/ microns will display: level: 75.385 microns Finally, you can decide how often you want the blynk app to query your hardware. Default is every 1 second. Tap the back arrow to return to your canvas. Press the \"play\" button on your Blynk canvas. If your Feather M0 is connected and the sensor properly wired, you should see values updating in the labeled display immediately!","title":"Blynk's Display Widgets"},{"location":"circuits/blynk/#challenge-twitter-or-email","text":"Challenge yourself to create an application that triggers a Tweet or email when a sensor hits a particular threshhold. http://docs.blynk.cc/#widgets-notifications","title":"Challenge - Twitter or Email"},{"location":"circuits/eagle/","text":"This tutorial offers a step-by-step introduction to creating a basic PCB (printed circuit board) for manufacture. Following on previous tutorials, the circuit makes use of the ATtiny85 microcontroller. Required Software This tutorial makes use of Autodesk Eagle and Autodesk Fusion . Assumptions Before embarking on this tutorial it is recommended that you complete the following Autodesk Eagle tutorials: Schematic Basics Part 1: Search, Place, Move Schematic Basics Part 2: Nets and Values Schematic Basics Part 3: ERC PCB Layout Basics Part 1: How to Place Your Components Routing & Autorouting \u2013 PCB Layout Basics 2 Design Rule Check: PCB Layout Basics 3 Getting Started Resistors: rcl library","title":"Eagle"},{"location":"circuits/eagle/#required-software","text":"This tutorial makes use of Autodesk Eagle and Autodesk Fusion .","title":"Required Software"},{"location":"circuits/eagle/#assumptions","text":"Before embarking on this tutorial it is recommended that you complete the following Autodesk Eagle tutorials: Schematic Basics Part 1: Search, Place, Move Schematic Basics Part 2: Nets and Values Schematic Basics Part 3: ERC PCB Layout Basics Part 1: How to Place Your Components Routing & Autorouting \u2013 PCB Layout Basics 2 Design Rule Check: PCB Layout Basics 3","title":"Assumptions"},{"location":"circuits/eagle/#getting-started","text":"Resistors: rcl library","title":"Getting Started"},{"location":"circuits/feather/","text":"This tutorial walks through the setup process for registering your Feather M0 on Duke's network and setting up your Arduino IDE to program the device. About the Feather M0 For the remainder of the semester we will be working with the Adafruit Feather M0 , a powerful Arduino-compatible microcontroller with integrated wifi. Adafruit hosts an excellent overview and setup guide for the Feather M0. Please consult it alongside this setup tutorial. Register on DukeReg Before we can use the Feather M0's wifi capabilities on Duke's network, we need to register its Mac address on DukeReg so that Duke's network will recognize it as an authorized device. First, locate your Feather M0's Mac address, located on the white sticker on the Feather's wifi chip (outlined in red in the image below): Next, open a web browser to https://dukereg.duke.edu/ . You will be prompted to enter your NetID and password. Click on the green button to \"Register a New Device.\" In the subsequent form, type the Mac address as it appears on your Feather. Give your device a name (\"Feather M0\") and choose \"Other\" for OS and \"Personal\" for Ownership. Click on the blue \"Register\" button. The page should refresh, indicating that the \"Device was successfully registered. Click on the \"Back\" button to return to your list of registered devices. Confirm that the Mac address you submitted matches the Mac address on your Feather M0. If it does not match, click the Delete button next to the mis-typed entry and then create a new registration. Duke's network may take up to 45 minutes to propagate this authorized registration to all its wifi endpoints. Configure the Arduino IDE In this next section, we'll configure the Arduino IDE to recognize the Feather M0 microcontroller. Launch the Arduino IDE program. Open up the Preferences pane. (On OS X, this is under the main menu: Arduino --> Preferences. On Windows, it is acccessible under File --> Preferences.) Be sure to check the box next to \"Display Line Numbers.\" Next, click on the icon to the far right of the \"Additional Boards Manager URLs\" textbox. A dialog box will pop up. In this box you will see any previous custom board definition URLs you may have entered (such as the ATtiny package from Github user damellis ): On a new line, enter the following URL: https://adafruit.github.io/arduino-board-index/package_adafruit_index.json and then click the \"OK\" button. Click the \"OK\" button in the Preferences pane to save your changes. Now we are ready to add the board definitions to Arduino so that we can program the Feather MO. Open the Boards Manager under the main menu: Tools --> Board --> Boards Manager: We will need to install two sets of board definitions. First, scroll down until you find \"Arduino SAMD Boards (32-bits ARM Cortex-M0+) by Arduino\". Click \"Install\" to download and install the latest version. Further down the list you should also fine \"Adafruit SAMD Boards by Adafruit.\" Click \"Install\" to download and install the latest version of this set of board definitions. Don't See the Adafruit SAMD option? If the Adafruit SAMD Boards option does not appear on your list of possible board definitions to install, you may have entered the URL incorrectly in step #5 above. Return to your Preferences pane to verify. Click the \"Close\" button to close the Boards Manager. Windows users only: Download and install the latest Adafruit Drivers Package . Restart the Arduino IDE application. Check to see that the \"Adafruit Feather M0\" appears as an option under Tools --> Board Blink Now that you've configured the Arduino IDE to recognize the Feather M0, let's test it with a simple Blink sketch. Use the USB cable to plug your Feather M0 into an available USB port on your computer. Open the default Blink sketch. From the main menu, choose File --> Examples --> 01.Basics --> Blink Make sure you have the Adafruit Feather M0 selected under Tools --> Board. Choose Tools --> Port and select the USB port for your board. Click the Upload button (or choose Sketch --> Upload) The onboard LED on the Feather M0 should blink on and off every second. Feather M0 as Webserver Next we'll make use of the WiFi101 library to enable the Feather M0's wifi chip and use it to serve up a webpage from the Feather itself that can be used to control the onboard LED. From the main menu, choose Sketch --> Include Library --> Manage Libraries. In the Library Manager dialog box that appears, type \"Wifi101\" in the Filter your search... text box. The WiFi101 library should appear at the top of the search results. Click the \"Install\" button to install the latest version of the library. Click the \"Close\" button to return to the main programming interface. From the main menu, choose File --> New to start a new sketch. We will make use of Tom Igoe's Nov 2012 SimpleWebServerWiFi sketch to create a simple web server that lets you blink an LED via the web. This sketch will print the IP address of your WiFi connection (once connected) to the Serial monitor. From there, you can open that address in a web browser to turn on and off the Feather's built-in LED (pin 13). If the IP address of your shield is yourAddress: http://yourAddress/H turns the LED on http://yourAddress/L turns it off Copy and paste the following code into your sketch, replacing what is there by default: #include <SPI.h> #include <WiFi101.h> char ssid [] = \"DukeOpen\" ; // your network SSID (name) // char pass[] = \"\"; // commented out because password // is not used with DukeOpen int status = WL_IDLE_STATUS ; WiFiServer server ( 80 ); int ledPin = 13 ; // specify built-in LED void setup () { Serial . begin ( 9600 ); // initialize serial communication pinMode ( ledPin , OUTPUT ); // set the LED pin mode // Configure pins specific to Adafruit ATWINC1500 Feather M0 WiFi . setPins ( 8 , 7 , 4 , 2 ); // check for the presence of WiFi: if ( WiFi . status () == WL_NO_SHIELD ) { Serial . println ( \"WiFi not present\" ); while ( true ); // don't continue } // attempt to connect to WiFi network: while ( status != WL_CONNECTED ) { Serial . print ( \"Attempting to connect to Network named: \" ); Serial . println ( ssid ); // print the network name (SSID); // Connect to open network. status = WiFi . begin ( ssid ); // if using password WEP, use the following instead // status = WiFi.begin(ssid, pass); // wait 10 seconds for connection: delay ( 10000 ); } server . begin (); // start the web server on port 80 printWiFiStatus (); // you're connected now, so print out the status } void loop () { WiFiClient client = server . available (); // listen for incoming clients if ( client ) { // if you get a client, Serial . println ( \"new client\" ); // print a message out the serial port String currentLine = \"\" ; // make a String to hold incoming data from the client while ( client . connected ()) { // loop while the client's connected if ( client . available ()) { // if there's bytes to read from the client, char c = client . read (); // read a byte, then Serial . write ( c ); // print it out the serial monitor if ( c == '\\n' ) { // if the byte is a newline character // if the current line is blank, you got two newline characters in a row. // that's the end of the client HTTP request, so send a response: if ( currentLine . length () == 0 ) { // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK) // and a content-type so the client knows what's coming, then a blank line: client . println ( \"HTTP/1.1 200 OK\" ); client . println ( \"Content-type:text/html\" ); client . println (); // the content of the HTTP response follows the header: client . print ( \"Click <a href= \\\" /H \\\" >here</a> turn the LED on pin 13 on&lt;br />\" ); client . print ( \"Click <a href= \\' /L \\' >here</a> turn the LED on pin 13 off\" ); // The HTTP response ends with another blank line: client . println (); // break out of the while loop: break ; } else { // if you got a newline, then clear currentLine: currentLine = \"\" ; } } else if ( c != '\\r' ) { // if you got anything else but a carriage return character, currentLine += c ; // add it to the end of the currentLine } // Check to see if the client request was \"GET /H\" or \"GET /L\": if ( currentLine . endsWith ( \"GET /H\" )) { digitalWrite ( ledPin , HIGH ); // GET /H turns the LED on } if ( currentLine . endsWith ( \"GET /L\" )) { digitalWrite ( ledPin , LOW ); // GET /L turns the LED off } } } // close the connection: client . stop (); Serial . println ( \"client disonnected\" ); } } void printWiFiStatus () { // print the SSID of the network you're attached to: Serial . print ( \"SSID: \" ); Serial . println ( WiFi . SSID ()); // print your WiFi shield's IP address: IPAddress ip = WiFi . localIP (); Serial . print ( \"IP Address: \" ); Serial . println ( ip ); // print the received signal strength: long rssi = WiFi . RSSI (); Serial . print ( \"signal strength (RSSI):\" ); Serial . print ( rssi ); Serial . println ( \" dBm\" ); // print where to go in a browser: Serial . print ( \"To see this page in action, open a browser to http://\" ); Serial . println ( ip ); } Verify the code to make sure it compiles. Ensure that you still have the Adafruit Feather M0 selected under Tools --> Board and the correct USB port under Tools --> Port. Then click the Upload icon to upload the code to your Feather M0. Once the code successfully compiles and uploads, click on the \"Serial Monitor\" icon in the upper-right of the Arduino sketch interface, or choose Tools --> Serial Monitor from the main menu. In the serial monitor, after about 10 seconds you should see the Feather connect to the wifi network and receive an IP address. Make note of the IP address that your Feather M0 has been assigned. Open a browser window and enter \"http://\" followed by the IP address in the address bar. The browser should open the following webpage, which is being served directly from the Feather M0: Click on the links on the webpage to toggle the Feather M0's onboard LED on and off.","title":"Feather M0"},{"location":"circuits/feather/#about-the-feather-m0","text":"For the remainder of the semester we will be working with the Adafruit Feather M0 , a powerful Arduino-compatible microcontroller with integrated wifi. Adafruit hosts an excellent overview and setup guide for the Feather M0. Please consult it alongside this setup tutorial.","title":"About the Feather M0"},{"location":"circuits/feather/#register-on-dukereg","text":"Before we can use the Feather M0's wifi capabilities on Duke's network, we need to register its Mac address on DukeReg so that Duke's network will recognize it as an authorized device. First, locate your Feather M0's Mac address, located on the white sticker on the Feather's wifi chip (outlined in red in the image below): Next, open a web browser to https://dukereg.duke.edu/ . You will be prompted to enter your NetID and password. Click on the green button to \"Register a New Device.\" In the subsequent form, type the Mac address as it appears on your Feather. Give your device a name (\"Feather M0\") and choose \"Other\" for OS and \"Personal\" for Ownership. Click on the blue \"Register\" button. The page should refresh, indicating that the \"Device was successfully registered. Click on the \"Back\" button to return to your list of registered devices. Confirm that the Mac address you submitted matches the Mac address on your Feather M0. If it does not match, click the Delete button next to the mis-typed entry and then create a new registration. Duke's network may take up to 45 minutes to propagate this authorized registration to all its wifi endpoints.","title":"Register on DukeReg"},{"location":"circuits/feather/#configure-the-arduino-ide","text":"In this next section, we'll configure the Arduino IDE to recognize the Feather M0 microcontroller. Launch the Arduino IDE program. Open up the Preferences pane. (On OS X, this is under the main menu: Arduino --> Preferences. On Windows, it is acccessible under File --> Preferences.) Be sure to check the box next to \"Display Line Numbers.\" Next, click on the icon to the far right of the \"Additional Boards Manager URLs\" textbox. A dialog box will pop up. In this box you will see any previous custom board definition URLs you may have entered (such as the ATtiny package from Github user damellis ): On a new line, enter the following URL: https://adafruit.github.io/arduino-board-index/package_adafruit_index.json and then click the \"OK\" button. Click the \"OK\" button in the Preferences pane to save your changes. Now we are ready to add the board definitions to Arduino so that we can program the Feather MO. Open the Boards Manager under the main menu: Tools --> Board --> Boards Manager: We will need to install two sets of board definitions. First, scroll down until you find \"Arduino SAMD Boards (32-bits ARM Cortex-M0+) by Arduino\". Click \"Install\" to download and install the latest version. Further down the list you should also fine \"Adafruit SAMD Boards by Adafruit.\" Click \"Install\" to download and install the latest version of this set of board definitions. Don't See the Adafruit SAMD option? If the Adafruit SAMD Boards option does not appear on your list of possible board definitions to install, you may have entered the URL incorrectly in step #5 above. Return to your Preferences pane to verify. Click the \"Close\" button to close the Boards Manager. Windows users only: Download and install the latest Adafruit Drivers Package . Restart the Arduino IDE application. Check to see that the \"Adafruit Feather M0\" appears as an option under Tools --> Board","title":"Configure the Arduino IDE"},{"location":"circuits/feather/#blink","text":"Now that you've configured the Arduino IDE to recognize the Feather M0, let's test it with a simple Blink sketch. Use the USB cable to plug your Feather M0 into an available USB port on your computer. Open the default Blink sketch. From the main menu, choose File --> Examples --> 01.Basics --> Blink Make sure you have the Adafruit Feather M0 selected under Tools --> Board. Choose Tools --> Port and select the USB port for your board. Click the Upload button (or choose Sketch --> Upload) The onboard LED on the Feather M0 should blink on and off every second.","title":"Blink"},{"location":"circuits/feather/#feather-m0-as-webserver","text":"Next we'll make use of the WiFi101 library to enable the Feather M0's wifi chip and use it to serve up a webpage from the Feather itself that can be used to control the onboard LED. From the main menu, choose Sketch --> Include Library --> Manage Libraries. In the Library Manager dialog box that appears, type \"Wifi101\" in the Filter your search... text box. The WiFi101 library should appear at the top of the search results. Click the \"Install\" button to install the latest version of the library. Click the \"Close\" button to return to the main programming interface. From the main menu, choose File --> New to start a new sketch. We will make use of Tom Igoe's Nov 2012 SimpleWebServerWiFi sketch to create a simple web server that lets you blink an LED via the web. This sketch will print the IP address of your WiFi connection (once connected) to the Serial monitor. From there, you can open that address in a web browser to turn on and off the Feather's built-in LED (pin 13). If the IP address of your shield is yourAddress: http://yourAddress/H turns the LED on http://yourAddress/L turns it off Copy and paste the following code into your sketch, replacing what is there by default: #include <SPI.h> #include <WiFi101.h> char ssid [] = \"DukeOpen\" ; // your network SSID (name) // char pass[] = \"\"; // commented out because password // is not used with DukeOpen int status = WL_IDLE_STATUS ; WiFiServer server ( 80 ); int ledPin = 13 ; // specify built-in LED void setup () { Serial . begin ( 9600 ); // initialize serial communication pinMode ( ledPin , OUTPUT ); // set the LED pin mode // Configure pins specific to Adafruit ATWINC1500 Feather M0 WiFi . setPins ( 8 , 7 , 4 , 2 ); // check for the presence of WiFi: if ( WiFi . status () == WL_NO_SHIELD ) { Serial . println ( \"WiFi not present\" ); while ( true ); // don't continue } // attempt to connect to WiFi network: while ( status != WL_CONNECTED ) { Serial . print ( \"Attempting to connect to Network named: \" ); Serial . println ( ssid ); // print the network name (SSID); // Connect to open network. status = WiFi . begin ( ssid ); // if using password WEP, use the following instead // status = WiFi.begin(ssid, pass); // wait 10 seconds for connection: delay ( 10000 ); } server . begin (); // start the web server on port 80 printWiFiStatus (); // you're connected now, so print out the status } void loop () { WiFiClient client = server . available (); // listen for incoming clients if ( client ) { // if you get a client, Serial . println ( \"new client\" ); // print a message out the serial port String currentLine = \"\" ; // make a String to hold incoming data from the client while ( client . connected ()) { // loop while the client's connected if ( client . available ()) { // if there's bytes to read from the client, char c = client . read (); // read a byte, then Serial . write ( c ); // print it out the serial monitor if ( c == '\\n' ) { // if the byte is a newline character // if the current line is blank, you got two newline characters in a row. // that's the end of the client HTTP request, so send a response: if ( currentLine . length () == 0 ) { // HTTP headers always start with a response code (e.g. HTTP/1.1 200 OK) // and a content-type so the client knows what's coming, then a blank line: client . println ( \"HTTP/1.1 200 OK\" ); client . println ( \"Content-type:text/html\" ); client . println (); // the content of the HTTP response follows the header: client . print ( \"Click <a href= \\\" /H \\\" >here</a> turn the LED on pin 13 on&lt;br />\" ); client . print ( \"Click <a href= \\' /L \\' >here</a> turn the LED on pin 13 off\" ); // The HTTP response ends with another blank line: client . println (); // break out of the while loop: break ; } else { // if you got a newline, then clear currentLine: currentLine = \"\" ; } } else if ( c != '\\r' ) { // if you got anything else but a carriage return character, currentLine += c ; // add it to the end of the currentLine } // Check to see if the client request was \"GET /H\" or \"GET /L\": if ( currentLine . endsWith ( \"GET /H\" )) { digitalWrite ( ledPin , HIGH ); // GET /H turns the LED on } if ( currentLine . endsWith ( \"GET /L\" )) { digitalWrite ( ledPin , LOW ); // GET /L turns the LED off } } } // close the connection: client . stop (); Serial . println ( \"client disonnected\" ); } } void printWiFiStatus () { // print the SSID of the network you're attached to: Serial . print ( \"SSID: \" ); Serial . println ( WiFi . SSID ()); // print your WiFi shield's IP address: IPAddress ip = WiFi . localIP (); Serial . print ( \"IP Address: \" ); Serial . println ( ip ); // print the received signal strength: long rssi = WiFi . RSSI (); Serial . print ( \"signal strength (RSSI):\" ); Serial . print ( rssi ); Serial . println ( \" dBm\" ); // print where to go in a browser: Serial . print ( \"To see this page in action, open a browser to http://\" ); Serial . println ( ip ); } Verify the code to make sure it compiles. Ensure that you still have the Adafruit Feather M0 selected under Tools --> Board and the correct USB port under Tools --> Port. Then click the Upload icon to upload the code to your Feather M0. Once the code successfully compiles and uploads, click on the \"Serial Monitor\" icon in the upper-right of the Arduino sketch interface, or choose Tools --> Serial Monitor from the main menu. In the serial monitor, after about 10 seconds you should see the Feather connect to the wifi network and receive an IP address. Make note of the IP address that your Feather M0 has been assigned. Open a browser window and enter \"http://\" followed by the IP address in the address bar. The browser should open the following webpage, which is being served directly from the Feather M0: Click on the links on the webpage to toggle the Feather M0's onboard LED on and off.","title":"Feather M0 as Webserver"},{"location":"circuits/instagram/","text":"About this Guide Some of your projects require querying the API of an online service (such as Instagram) and then parsing the data sent back from the service. JSON (JavaScript Object Notation) is a common data format returned by API queries. This guide provides instructions for configuring your Instagram account to enable API requests and provides sample code for querying and parsing that data for use by your Feather. Install ArduinoJSON Library First, if you have not done so alreadyinstall Benoit Blanchon's ArduinoJson library . Proceed with the steps below and/or consult arduinojson.org's official documentation . Launch the Arduino application. From the main menu, choose Sketch --> Include Library --> Manage Libraries In the \"Filter your search...\" box, type JSON Scroll down until you find \"ArduinoJson by Benoit Blanchon\" Important Do NOT immediately click Install. The Library Manager lists the \"beta\" version by default, but for reliability, you will most likely want to use the latest \"production\" version. As of the of the writing of this tutorial, the latest version is: version 5.13.3 From the \"Version\" drop-down box, scroll down past all of the \"X.X-beta\" versions until you find the latest version non-beta version. Click on that version to select it. Finally, click the Install button and then Close once the library installation has completed. Arduino Sketch Finally we can set up the Arduino sketch necessary to query the Instagram API directly from the Feather M0. Create a new Arduino sketch by choosing File --> New from the main menu. Save it by choosing File --> Save and give it a memorable name, such as InstagramQuery Create a new tab in your sketch: Find the \u25be symbol in the upper-right of the Arduino interface and left-click on it. In the resulting pop-up, choose New Tab. (Alternatively, you can press SHIFT-\u2318-N) You will be prompted to enter a name for this new tab. Type: arduino_secrets.h and then click \"OK\". The new tab will appear in your IDE workspace. Copy and paste the following code into the arduino_secrets.h tab in your sketch: #define SECRET_SSID \"DukeOpen\" // your network SSID (name) #define SECRET_PASS \"\" // your network password; leave empty for open networks Return to the main tab of your Arduino sketch. Replace the contents of that tab with the code provided at this Github gist: Instagram Setup Create a Client To interact with Instagram's API, you will ultimately need an access token . Unfortunately, getting one is not a straightforward process and will change when Instagram fully deprecates its API in 2020. For now, follow these steps: Go to https://www.instagram.com/accounts/login/ and sign in with your Instagram account credentials. Next, visit https://www.instagram.com/developer/ to access the API and its documentation. Here you will set up a \"client\" that will allow authorized users (yourself) to query Instagram using the API. You will use this in \"sandbox mode\" -- for testing purposes only. If you wanted your application to be available to the general public you would need to have it vetted by Instagram. From the main menu on the page, click \"Manage Clients\" On the next page, click the green \"Register a New Client\" button. On the \"Register a New Client ID\" page, you will be prompted to enter information about your application: Application Name: FeatherQuery (or another name you choose) Description: Enabling Feather M0 IoT device to query the Instagram API for data on my own image posts. Company Name: Your Name Website URL: Use your own URL if you have a website; if not, use https://www.duke.edu Valid redirect URIs: Again, use your own url; if not, use https://www.duke.edu ] Privacy Policy URL: Leave blank (not required for sandbox testing) Contact email: your email Finally, click the green \"Register\" button The client you just created will appear in your Manage Clients list. Generate Access Token Next we need to use the API to generate an access token that we will use in our Arduino code. This is a multi-step process. First, click on the blue \"Manage\" button next to the name of the Client you just created. Go to the \"Security\" tab and un check the tickbox next to \"Disable implicit OAuth:\" Click the green \"Update Client\" button Return to the \"Details\" tab by clicking again on the blue \"Manage\" button next to the name of the Client. Note at the top of the page there is a \"Client ID\" and \"Client Secret.\" Both are long strings of characters. Leaving this page open, open a new tab in your web browser. Navigate to the following URL, where CLIENT-ID is replaced with your client ID from the previous tab and where REDIRECT-URI is replaced with redirect URI you specified when creating the client. https://api.instagram.com/oauth/authorize/?client_id=CLIENT-ID&redirect_uri=REDIRECT-URI&response_type=token If successful, you should be taken to an Instagram authorization page for your client: Failure If you instead receive an error message, note the error message and correct accordingly: \"Invalid Client ID\" Go to the \"Details\" tab of your Client and double-check the accuracy of your client ID. No spaces are allowed. Re-copy and paste again if necessary. \"Redirect URI does not match registered redirect URI\" Go to the \"Security\" tab of your client and verify the accuracy of the redirect URI. \"Implicit authentication is disabled\" Return to the \"Security\" tab of your client and be sure to un check the box next to \"Disable implicit OAuth:\" Click the green \"Authorize\" button to authorize the Client to access your Instagram account. Your browser will redirect to the URL you specified as a \"Redirect URI\" but will append #access_token= followed by a long string. Copy the string of characters that follows the equals sign. Return to the Arduino app and paste this access token string into your Arduino sketch under the arduino_secrets.h tab. Create a new defined constant named ACCESS_TOKEN to hold that access token string: #define SECRET_SSID \"DukeOpen\" // your network SSID (name) #define SECRET_PASS \"\" // your network password; leave empty for open networks #define ACCESS_TOKEN \"token goes here\" // Instagram access token Be sure to save your sketch. Finally, return to your browser and test your token's ability to access your account via an https:// GET request to the following URL (where ACCESS_TOKEN is replaced by your access token string.): https://api.instagram.com/v1/users/self/?access_token=ACCESS_TOKEN If successful, your browser should return JSON data about your account, such as your account ID, username, number of posts (media), number of followers (followed_by), etc. Arduino Query Go ahead and test the code on your Arduino. Be sure to change the SSID and password if you're not on Duke's network. Once uploaded, open up the Arduino serial monitor. You should observe the following behavior: The Feather connects to wifi and is given an IP address. The Feather queries your Instagram account and returns a welcome message and your current number of followers. The Feather queries your Instagram account and returns your latest post's ID and number of Likes. Then, every minute, the Feather will query both your followers and your posts. It will indicate a new follower, new Likes, or a new post.","title":"Instagram API"},{"location":"circuits/instagram/#about-this-guide","text":"Some of your projects require querying the API of an online service (such as Instagram) and then parsing the data sent back from the service. JSON (JavaScript Object Notation) is a common data format returned by API queries. This guide provides instructions for configuring your Instagram account to enable API requests and provides sample code for querying and parsing that data for use by your Feather.","title":"About this Guide"},{"location":"circuits/instagram/#install-arduinojson-library","text":"First, if you have not done so alreadyinstall Benoit Blanchon's ArduinoJson library . Proceed with the steps below and/or consult arduinojson.org's official documentation . Launch the Arduino application. From the main menu, choose Sketch --> Include Library --> Manage Libraries In the \"Filter your search...\" box, type JSON Scroll down until you find \"ArduinoJson by Benoit Blanchon\" Important Do NOT immediately click Install. The Library Manager lists the \"beta\" version by default, but for reliability, you will most likely want to use the latest \"production\" version. As of the of the writing of this tutorial, the latest version is: version 5.13.3 From the \"Version\" drop-down box, scroll down past all of the \"X.X-beta\" versions until you find the latest version non-beta version. Click on that version to select it. Finally, click the Install button and then Close once the library installation has completed.","title":"Install ArduinoJSON Library"},{"location":"circuits/instagram/#arduino-sketch","text":"Finally we can set up the Arduino sketch necessary to query the Instagram API directly from the Feather M0. Create a new Arduino sketch by choosing File --> New from the main menu. Save it by choosing File --> Save and give it a memorable name, such as InstagramQuery Create a new tab in your sketch: Find the \u25be symbol in the upper-right of the Arduino interface and left-click on it. In the resulting pop-up, choose New Tab. (Alternatively, you can press SHIFT-\u2318-N) You will be prompted to enter a name for this new tab. Type: arduino_secrets.h and then click \"OK\". The new tab will appear in your IDE workspace. Copy and paste the following code into the arduino_secrets.h tab in your sketch: #define SECRET_SSID \"DukeOpen\" // your network SSID (name) #define SECRET_PASS \"\" // your network password; leave empty for open networks Return to the main tab of your Arduino sketch. Replace the contents of that tab with the code provided at this Github gist:","title":"Arduino Sketch"},{"location":"circuits/instagram/#instagram-setup","text":"","title":"Instagram Setup"},{"location":"circuits/instagram/#create-a-client","text":"To interact with Instagram's API, you will ultimately need an access token . Unfortunately, getting one is not a straightforward process and will change when Instagram fully deprecates its API in 2020. For now, follow these steps: Go to https://www.instagram.com/accounts/login/ and sign in with your Instagram account credentials. Next, visit https://www.instagram.com/developer/ to access the API and its documentation. Here you will set up a \"client\" that will allow authorized users (yourself) to query Instagram using the API. You will use this in \"sandbox mode\" -- for testing purposes only. If you wanted your application to be available to the general public you would need to have it vetted by Instagram. From the main menu on the page, click \"Manage Clients\" On the next page, click the green \"Register a New Client\" button. On the \"Register a New Client ID\" page, you will be prompted to enter information about your application: Application Name: FeatherQuery (or another name you choose) Description: Enabling Feather M0 IoT device to query the Instagram API for data on my own image posts. Company Name: Your Name Website URL: Use your own URL if you have a website; if not, use https://www.duke.edu Valid redirect URIs: Again, use your own url; if not, use https://www.duke.edu ] Privacy Policy URL: Leave blank (not required for sandbox testing) Contact email: your email Finally, click the green \"Register\" button The client you just created will appear in your Manage Clients list.","title":"Create a Client"},{"location":"circuits/instagram/#generate-access-token","text":"Next we need to use the API to generate an access token that we will use in our Arduino code. This is a multi-step process. First, click on the blue \"Manage\" button next to the name of the Client you just created. Go to the \"Security\" tab and un check the tickbox next to \"Disable implicit OAuth:\" Click the green \"Update Client\" button Return to the \"Details\" tab by clicking again on the blue \"Manage\" button next to the name of the Client. Note at the top of the page there is a \"Client ID\" and \"Client Secret.\" Both are long strings of characters. Leaving this page open, open a new tab in your web browser. Navigate to the following URL, where CLIENT-ID is replaced with your client ID from the previous tab and where REDIRECT-URI is replaced with redirect URI you specified when creating the client. https://api.instagram.com/oauth/authorize/?client_id=CLIENT-ID&redirect_uri=REDIRECT-URI&response_type=token If successful, you should be taken to an Instagram authorization page for your client: Failure If you instead receive an error message, note the error message and correct accordingly: \"Invalid Client ID\" Go to the \"Details\" tab of your Client and double-check the accuracy of your client ID. No spaces are allowed. Re-copy and paste again if necessary. \"Redirect URI does not match registered redirect URI\" Go to the \"Security\" tab of your client and verify the accuracy of the redirect URI. \"Implicit authentication is disabled\" Return to the \"Security\" tab of your client and be sure to un check the box next to \"Disable implicit OAuth:\" Click the green \"Authorize\" button to authorize the Client to access your Instagram account. Your browser will redirect to the URL you specified as a \"Redirect URI\" but will append #access_token= followed by a long string. Copy the string of characters that follows the equals sign. Return to the Arduino app and paste this access token string into your Arduino sketch under the arduino_secrets.h tab. Create a new defined constant named ACCESS_TOKEN to hold that access token string: #define SECRET_SSID \"DukeOpen\" // your network SSID (name) #define SECRET_PASS \"\" // your network password; leave empty for open networks #define ACCESS_TOKEN \"token goes here\" // Instagram access token Be sure to save your sketch. Finally, return to your browser and test your token's ability to access your account via an https:// GET request to the following URL (where ACCESS_TOKEN is replaced by your access token string.): https://api.instagram.com/v1/users/self/?access_token=ACCESS_TOKEN If successful, your browser should return JSON data about your account, such as your account ID, username, number of posts (media), number of followers (followed_by), etc.","title":"Generate Access Token"},{"location":"circuits/instagram/#arduino-query","text":"Go ahead and test the code on your Arduino. Be sure to change the SSID and password if you're not on Duke's network. Once uploaded, open up the Arduino serial monitor. You should observe the following behavior: The Feather connects to wifi and is given an IP address. The Feather queries your Instagram account and returns a welcome message and your current number of followers. The Feather queries your Instagram account and returns your latest post's ID and number of Likes. Then, every minute, the Feather will query both your followers and your posts. It will indicate a new follower, new Likes, or a new post.","title":"Arduino Query"},{"location":"circuits/mqtt/","text":"About this Tutorial This tutorial outlines a workflow for implementing MQTT communication on the Adafruit Feather M0, leveraging the following Arduino libraries: WiFi101 by Arduino PubSub Client by Nick O'Leary arduino-timer by Michael Contreras Before you begin, please install these libraries using the Arduino IDE's Library Manager . For the purposes of this tutorial, imagine that you want to be able to control the lighting at the entrance of every administrative building on campus. To accomplish this, you deploy a fleet of Feather M0's to each building. Each Feather is connected to an LED light. One Feather will function as your \"control center\", so it will need a potentiometer for setting brightness levels. As a baseline functionality, we want to be able to control the brightness level of ALL of the Feather-connected LEDs on the network, simultaneously adjusting them from one location. Let's prototype this: Wire up a potentiometer to your Feather M0, terminating its wiper terminal at analog pin A1. We will make use of the onboard LED (@ pin 13) to save some time but you are welcome to include an LED and appropriate resistor for a 3.3V logic level. Once you've wired up your hardware like the image above, you can continue below with either the Quick Start Guide that builds modularly off of a sample code, or with the Detailed Instructions , which walk step-by-step through the entire process of constructing a functioning project. Quick Start Guide This Quick Start Guide will make use of a heavily commented codebase that has been structured to allow for easy setup and customization of an MQTT client node. First, download a .zip file of the code and unzip it. This zip file contains two files: MQTT_FeatherMO.ino and arduino_secrets.h . Rename the unzipped folder to MQTT_FeatherMO . (Arduino requires that the containing folder name match the main .ino sketch name.) Double-click on the MQTT_FeatherMO.ino file to open it in Arduino. The sketch contains two tabs. Click on the arduino_secrets.h tab and set your WiFi network's SSID and password (if applicable) . Return to the MQTT_FeatherM0 tab. Scroll down to lines 28 and 29 and set your MQTT_BROKER address and MQTT_PORT . If your desired broker is TLS/SSL capable, you will use port 8883. If not, use the default port 1883. Since our broker, mqtt.colab.duke.edu is capable of TLS/SSL, lines 28 and 29 should read: #define MQTT_BROKER \"mqtt.colab.duke.edu\" // specify MQTT broker address (IP or URL) #define MQTT_PORT 8883 // use 8883 for TLS/SSL MQTT; use 1883 for non-secure Look at lines 31 - 35. If your broker is NOT SSL/TLS capable, comment out line 32 and un comment line 35. In our case, since our broker is TLS/SSL enabled, we can leave these lines unchanged. Scroll down to the \"PIN DECLARATIONS\" section of the code . Here is where you would declare any constants to hold pin #'s for the hardware pins you need your project to employ. In our case, we want to use pin 13 as ledPin and pin A1 as sensorPin , so un comment lines 54 and 55, as illustrated below: // **** // PIN DECLARATIONS // // Pin declarations for Feather hardware control // Modify as necessary for your hardware setup. // Don't forget pinMode in the setup() function! // **** // examples: const int ledPin = 13 ; // onboard LED const int sensorPin = A1 ; // analog input, such as potentiometer Next scroll all the way down to the sketch's setup() function and find the \"PINMODE DECLARATIONS\" section. Here is where you will need to set the pinMode of any pins specified above. In our case, we want to set the pinMode of ledPin to OUTPUT and of sensorPin to INPUT . Un comment lines 181 and 182, as indicated below: // **** // PINMODE DECLARATIONS // Any pinMode declarations should be set here // **** pinMode ( ledPin , OUTPUT ); pinMode ( sensorPin , INPUT ); Scroll back up to the \"SUBSCRIPTIONS SECTION\" (around line 60). If your project needs to subscribe to any MQTT topics, here is where you both a) subscribe to the topic(s) and b) specify what your Feather M0 should do upon receiving an incoming message at that topic(s) . Continue to Part A: doSubscriptions() : Here you can specify -- one per line -- any topics that you would like your Feather M0 to subscribe to from the MQTT broker. These follow the syntax client.subscribe(\"/some/topic\"); Let's specify a subscription to the topic /admin/lightlevel . Add this line to the doSubscriptions() function, before its closing } , as illustrated below: void doSubscriptions () { // Specify topic subscriptions line by line below, such as // client.subscribe(\"/some/topic\"); // client.subscribe(\"/another/topic\"); client . subscribe ( \"/admin/lightlevels\" ); } Next we need to specify what happens when the Feather receives an MQTT message at a subscribed topic . Scroll down and find \"PART B - Handle parsing of specific topics below...\" Here we do a string compare of the incoming topic against a specific topic we expect to receive and parse that message accordingly. The generic syntax for such parsing is: if ( strcmp ( topic , \"/some/topic/\" ) == 0 ){ //Do something with its payload } In our case, we want to do something when a message comes in at topic /admin/lightlevel , namely, adjust the onboard LEDs brightness. Add the following code immediately below the line /////// TOPIC SPECIFIC PARSING GOES HERE (approx line 116) and above the closing } for the parseMQTT() function (approx. line 118 ) //this listens for a topic called \"/admin/lightlevel\" // and then converts its payload string into an integer // using the atoi() function. It then sets the ledPin level // accordingly using the analogWrite() function if ( strcmp ( topic , \"/admin/lightlevel\" ) == 0 ) { int brightness = atoi (( char * ) payload ); Serial . print ( \"Brightness: \" ); Serial . println ( brightness ); if ( brightness < 3 ){ analogWrite ( ledPin , 0 ); // Turn LED fully off Serial . println ( \"All OFF\" ); } else if ( brightness > 252 ){ analogWrite ( ledPin , 255 ); // Turn LED fully on Serial . println ( \"All ON\" ); } else { analogWrite ( ledPin , brightness ); // set ledPin brightness } } If all we need to do in our project was subscribe to MQTT topics and parse incoming messages at those topics, we could stop here. However, we also need at least one of our nodes to be publishing sensor data (in this case, potentiometer settings) to the MQTT broker. Scroll down to the \"MQTT PUBLISHING SETUP\" section. Here you can first set one or more intervals for the Feather to trigger PubSub publish() functions . A single interval can trigger any number of publish events. For example, you might want to publish to four different topics every 500 ms. And/or different intervals can be set for different topics. For example, you may wish to publish the value of a potentiometer every 100 ms but a temperature reading only every 15 minutes. We want the client LEDs to be quickly notified of any changes in the potentiometer setting so that they can update their brightness in near real-time. So we'll set up a 100 ms interval for our publishing. Under Part 1, find the setPubIntervals() function and inside the function, add the following line as highlighted below: void setPubIntervals () { // syntax: doPub.every(milliseconds, callbackFunction); //doPub.every(100, someFunc); // call the someFunc() function every 100 ms doPub . every ( 100 , publishLightlevel ); } Finally, you need to write the callback functions specified in the interval timers above . The generic syntax is: bool someFunc ( void * ) { client . publish ( \"/some/topic\" , \"value_as_string\" , false ); // true:false --> retained return true ; // repeat --> true } In the example below, every 100 ms (the interval set in Part 1 above), the function publishLightlevel() executes, which reads the analog value at sensorPin, maps it to a value between 0 - 255 (8 bit) and then converts that numerical value to a character array c string. It then publishes that value to MQTT topic /admin/lightlevel with a retain flag set to false . Insert the code below at line 172 ( ///////// doPub callback functions go here ): ///////// doPub callback functions go here bool publishLightlevel ( void * ) { int reading = analogRead ( sensorPin ); // read the potentiometer reading = map ( reading , 0 , 4095 , 0 , 255 ); // Feather M0 set to 12-bit ADC char value [ 3 ]; String msg = String ( reading ); msg . toCharArray ( value , 3 ); client . publish ( \"/admin/lightlevel\" , msg . c_str (), false ); return true ; // repeat? true } Verify and upload the sketch to your Feather M0. Once your Feather connects to Wifi and to the MQTT broker, manipulating the potentiometer should dynamically adjust the brightness of your onboard LED. Detailed Instructions Part 1 - WiFi Connection As you learned in our initial Feather tutorial , connecting to the internet requires using the Arduino WiFi library so that the Feather's ATSAMD21G18 ARM Cortex M0 processor can communicate with its Atmel WINC1500 WiFi chip. Let's begin by walking through the steps necessary to connect the Feather to a WiFi network. Launch the Arduino IDE. Create a new sketch by choosing File --> New from the main menu. Save that sketch as \"MQTT_FeatherM0_Prototype\" by choosing File --> Save from the main menu. Ensure that you have \"Adafruit Feather M0\" selected under Tools --> Board. Add the WiFi101 and SPI libraries to your sketch by either: Choosing Sketch --> Include Library --> WiFi101 and Sketch --> Include --> SPI -- or -- Typing the following code at lines 1 and 2 of your sketch: #include <SPI.h> #include <WiFi101.h> It's considered a best practice to keep your WiFi access credentials in a separate header file. To create one, find the \u25be symbol and left-click on it. In the pop-up, choose New Tab. (Alternatively, you can press SHIFT-\u2318-N) You will be prompted to enter a name for this new tab. Type: arduino_secrets.h A new tab will appear in your IDE workspace, as indicated below: In this tab you will want to create defined constants for your ssid and wifi password (if a password is required for your wifi network): #define SECRET_SSID \"DukeOpen\" // your network SSID (name) #define SECRET_PASS \"\" // your network password; leave empty for open networks In the above example, the SSID is set to the open network, DukeOpen with no password . Save your sketch: File --> Save Return to the main tab of your Arduino sketch. Between the library #include section and the void setup() function, add the following lines: // WiFi credentials and config #include \"arduino_secrets.h\" char ssid [] = SECRET_SSID ; char pass [] = SECRET_PASS ; int status = WL_IDLE_STATUS ; // variable for WiFi radio's status WiFiSSLClient WiFiclient ; // instantiate a secure WiFi client // use WiFiClient WiFiclient; for non-secure connections This instantiates several variables necessary for WiFi connectivity and signals to the WiFI101 library that we wish to create an SSL-capable WiFi connection. If you don't need a secure connection, use WiFiClient WiFiclient; instead. Next, turn your attention to the void setup() function, replacing it with the following code: void setup (){ // Initialize Serial (useful for debugging) Serial . begin ( 9600 ); // Feather M0-specific WiFi pins WiFi . setPins ( 8 , 7 , 4 , 2 ); // attempt to connect to WiFi network: while ( status != WL_CONNECTED ) { Serial . print ( \"Attempting to connect to SSID: \" ); Serial . println ( ssid ); // Connect to WiFi: if ( sizeof ( pass ) == 1 ) { // if no password status = WiFi . begin ( ssid ); // connect with SSID alone } else { status = WiFi . begin ( ssid , pass ); // connect with SSID and password } // wait 5 seconds for connection: delay ( 5000 ); } // you're connected now, so print out a success message: Serial . println ( \"You're connected to the network\" ); // print your Feather's IP address: IPAddress ip = WiFi . localIP (); Serial . print ( \"Device IP Address: \" ); Serial . println ( ip ); } Save and verify your Sketch. Plug in your Feather M0 to the USB port of your computer. Confirm that its USB port is recognized and selected in the Arduino IDE: Tools --> Port Upload the code to your Feather and open your Serial Monitor. Your Feather should connect to your desired network and indicate a successful connection on the Serial Monitor: Part 2 - MQTT Connection Next we need to add the code necessary to make a connection to an MQTT broker . We will use the PubSub Client by Nick O'Leary to connect to our broker. Broker : mqtt.colab.duke.edu Port : 8883 (TLS/SSL) The above broker is hosted on a virtual machine created using Duke's Virtual Computing Manager service. If there is interest, a future tutorial will outline how to set up and configure this service, leveraging the open source MQTT broker Mosquitto and for secure connectivity, EFF's Certbot and Let's Encrypt certificates . For now, let's simply make use of this existing broker. To include the PubSub Client library, add this code below the #include statement for the WiFi101 library at the very top of your sketch: #include <PubSubClient.h> Next, add the configuration variables required by the PubSub Client. Add the highlighted lines below the line instantiating a secure WiFi client: WiFiSSLClient WiFiclient ; // instantiate a secure WiFi client for TLS/SSL // use WiFiClient WiFiclient; for non-secure connections // MQTT configuration #define MQTT_BROKER \"mqtt.colab.duke.edu\" // specify MQTT broker address (IP or URL) #define MQTT_PORT 8883 // use 1883, or 8883 for TLS/SSL // use WiFi connection for MQTT communication PubSubClient client ( WiFiclient ); // each MQTT client should have a unique ID String device_id = \"FeatherM0-\" ; // this will be used with Mac address for uniqueness // variables for non-blocking MQTT reconnection long lastReconnectAttempt = 0 ; long now ; void setup (){ The code above specifies some defined constants for the MQTT broker and port, and then tells the PubSub client to use the WiFiClient as a communication channel. The rest of the code sets up some variables to be used later. At the end of your setup() function (but before its closing } ), add the following: // get your Feather's MAC address: byte mac [ 6 ]; WiFi . macAddress ( mac ); String mac_address ; for ( int i = 5 ; i <= 0 ; i -- ) { if ( mac [ i ] < 16 ) mac_address += \"0\" ; mac_address += String ( mac [ i ], HEX ); if ( i > 0 ) mac_address += \":\" ; } // append mac_address to device_id // for unique identification device_id += mac_address ; // initiate first connection to MQTT broker client . setServer ( MQTT_BROKER , MQTT_PORT ); // specify a function to call upon receipt of a msg // on a subscribed channel; in this case parseMQTT() //client.setCallback(parseMQTT); // print info on MQTT broker Serial . print ( \"Attempting to connect to MQTT Broker: \" ); Serial . print ( MQTT_BROKER ); Serial . print ( \":\" ); Serial . println ( MQTT_PORT ); lastReconnectAttempt = 0 ; This code will get your Feather's hardware mac address and write it to the variable mac_address. Then it concatenates \"FeatherM0-\" with your Feather's hardware mac address, rendering a unique identifier for your Feather when communicating with an MQTT broker. The client.setServer() function configures the PubSub client to connect to the specified MQTT broker and port. The client.setCallback() function indicates what function to call whenever the PubSub client receives an incoming message on a subscribed channel. In this case, it will call the parseMQTT() function, which we have yet to define. Consequently, let's leave the client.setCallback() line commented out for now. We're getting close to having our code in place to connect our Feather to the MQTT broker. Scroll to the bottom of your Arduino code and replace the setup() function with the following code: void loop (){ // get the current time now = millis (); // if MQTT connection lost if ( ! client . connected ()) { // only attempt to reconnect every 5 secs if ( now - lastReconnectAttempt > 5000 ) { // 5 secs since last reconnect attempt? lastReconnectAttempt = now ; // Attempt to reconnect if ( reconnect ()) { lastReconnectAttempt = 0 ; } } } else { // MQTT client connected client . loop (); } } This code checks to see if the PubSub client is connected to the MQTT broker; if not, it waits 5 seconds and attempts to connect by running the reconnect() function, which we will define in the next step. If unsuccessful, it waits another five seconds and tries again. If successful, it runs the PubSub client.loop() function, which continually checks that the connect is live and listens for incoming messages. Finally, add the following reconnect() function below the loop() function ( after the loop() function's closing } .) boolean reconnect () { if ( client . connect ( device_id . c_str ())) { Serial . print ( device_id ); Serial . println ( \" connected to MQTT broker\" ); return client . connected (); } Serial . print ( \"MQTT connection failed, rc=\" ); Serial . println ( client . state ()); Serial . println ( \"Trying again ...\" ); return 0 ; } Verify and upload the code to your Feather M0. Open the Serial Monitor and confirm that you are successfully connecting to both your desired wireless network (e.g. DukeOpen) and MQTT server, as indicated in the image below: Part 3: MQTT Subscriptions MQTT protocol allows clients to subscribe to \"topics\" that may be published by other clients connected to the same MQTT broker. Client subscriptions are \"blind\" in that clients have no way of verifying if any other clients are publishing at that topic. In the Arduino PubSub library, the function to subscribe to a topic is .subscribe(\"/some/topic\" and must be called after a successful connection to the MQTT broker. In our project, we want client Feather M0's in each administrative building to subscribe to the same topic (e.g. /admin/lightlevel ) and use the information published to that topic to set the level of an attached LED. Let's set this up now. Right above the setup() function, declare a variable for the attached LED at pin 13: const int ledPin = 13 ; // onboard LED Within the setup() function, set the pinMode of ledPin to OUTPUT : pinMode ( ledPin , OUTPUT ); Next, create a new function outside of the setup() and loop() functions called doSubscriptions() and subscribe to the topic /admin/lightlevel as highlighted below: void doSubscriptions () { // specify topic subscriptions line by line below, such as // client.subscribe(\"/some/topic/\"); // client.subscribe(\"/another/topic/\"); client . subscribe ( \"/admin/lightlevel\" ); } We need to call this doSubscriptions() function after we establish an MQTT connection, so find the function called reconnect() and add the highlighted line below: boolean reconnect () { if ( client . connect ( device_id . c_str ())) { Serial . print ( device_id ); Serial . println ( \" connected to MQTT broker\" ); doSubscriptions (); // (re)subscribe to desired topics return client . connected (); } Serial . print ( \"MQTT connection failed, rc=\" ); Serial . println ( client . state ()); Serial . println ( \"Trying again ...\" ); return 0 ; } Now that we have subscribed to the desired topic, we need to add a function to our sketch that parses the incoming messages and executes some code on our Feather to change the onboard LED's brightness. Recall in Part 2, #3 we left the setCallback() function commented out? Find that line in your setup() function and un comment it: // initiate first connection to MQTT broker client . setServer ( MQTT_BROKER , MQTT_PORT ); // specify a function to call upon receipt of a msg // on a subscribed channel; in this case parseMQTT() client . setCallback ( parseMQTT ); This means that every time the PubSub client receives an incoming message at a suscribed topic, the parseMQTT() function will execute. Let's create that function, adding the following to your sketch: void parseMQTT ( char * topic , byte * payload , unsigned int length ) { payload [ length ] = '\\0' ; // important - do not delete // Handle parsing of specific topics using the \"string // compare\" function to differentiate among topics if ( strcmp ( topic , \"/admin/lightlevel\" ) == 0 ) { int lightlevel = atoi (( char * ) payload ); Serial . print ( \"Light level: \" ); Serial . println ( lightlevel ); analogWrite ( ledPin , lightlevel ); } } The code above will trigger upon message receipt, compare the topic of the MQTT message, and if it matches admin/lightlevel it will convert the message payload from a character array to an integer and use it to set the PWM analog level of pin 13. Verify your code and upload it to your Feather M0. If you would like to test your subscription now, you will need to download an MQTT client for your computer. If not, you can skip down to Part 4: MQTT Publishing . Download and install MQTTBox (available for Mac, Linux, and Windows). Once installed, launch the application. Click on the \"Create MQTT Client\" button. In the settings, use the following for mqtt.colab.duke.edu : Client Name: Duke MQTT Protocol: mqtts / tls Host: mqtt.colab.duke.edu:8883 SSL / TLS Version: auto SSL / TLS Certificate Type: CA signed server certificate The rest of the settings can be left unchanged. Click on the \"Save\" button. The resulting screen should indicate that MQTTBox has successfully connected to the broker with a green \"Connected\" indicator: In the \"Topic to Publish\" pane, enter the following: Topic to publish: /admin/lightlevel Payload: 255 Then click the blue \"Publish\" button. Click it again. Each time you click \"Publish\" you should get a notification at the bottom of the \"Topic to Publish\" pane indicating a message was published. Check your Feather M0's onboard LED. It should shine at full brightness. In MQTTBox, change the Payload from 255 to 0 and then click the Publish button again. Your Feather M0's onboard LED should turn off. Try 127 as a payload. Your LED should shine at 50% brightness. If you were to deploy a fleet of Feather M0's in each admin building this is the extent of the code you would need to install on each Feather. One Feather will need to serve as the \"control,\" where an attached potentiometer will publish a value to /admin/lightlevel that each subscribed Feather will process to adjust their LED brightness. We will set up this publish functionality in the next part. Part 4: MQTT Publishing Finally, in this section we will make use of Michael Contreras' arduino-timer library to publish potentiometer data from our Feather M0 to the topic /admin/lightlevel . At the top of your sketch, include the arduino-timer library: #include <SPI.h> #include <WiFi101.h> #include <PubSubClient.h> #include <timer.h> Find where you declared the constant ledPin and add a line for the potentiometer attached to analog pin A1: const int ledPin = 13 ; // onboard LED const int sensorPin = A1 ; // potentiometer attached to A1 In your setup() function, use pinMode() to set sensorPin as an input and also specify that the Feather M0's ADC can function at 12-bit resolution: pinMode ( ledPin , OUTPUT ); pinMode ( sensorPin , INPUT ); // default Arduino ADC resolution is 10-bit // but we can set it to the Feather M0 native resolution of 12-bit analogReadResolution ( 12 ); // gives values of 0 - 4095 Next, we'll make use the arduino-timer library to set up a publication interval of 100 milliseconds for publishing our potentiometer data. Just above the setup() function, add the following: auto doPub = timer_create_default (); // create a timer with default settings void setPubIntervals () { // syntax: doPub.every(milliseconds, callbackFunction); doPub . every ( 100 , publishPot ); // call the publishPot() function every 100 ms } // In this example, every 100 ms (set in setPubIntervals above), // this function executes, which reads the analog value at sensorPin, // maps it to a value between 0 - 255 (8 bit) and then converts // that numerical value to a character array c string bool publishPot ( void * ) { int reading = analogRead ( sensorPin ); // read potentiometer reading = map ( reading , 0 , 4095 , 0 , 255 ); // Feather M0 set to 12-bit ADC char value [ 3 ]; // instantiate a character array to hold reading String msg = String ( reading ); // put reading into msg msg . toCharArray ( value , 3 ); // convert msg to char array // publish to topic the msg as char * with a retained // setting of false (do not retain) client . publish ( \"/admin/lightlevel\" , msg . c_str (), false ); return true ; // repeat? true } Next, add the following line at very end of your setup() function, but before its closing } : setPubIntervals (); // initalize any publish intervals Finally, add the following line at the very end of your loop() function, but before its clsing } : doPub . tick (); // tick the doPub timer Verify and then upload your sketch to your Feather M0. Once your Feather connects to Wifi and to the MQTT broker, manipulating the potentiometer should dynamically adjust the brightness of your onboard LED, as well as the brightness of any other Feather M0 which is connected to MQTT broker mqtt.colab.duke.edu and subscribed to topic /admin/lightlevel using the message parsing above. Note In my experience, a potentiometer wired to the Feather M0's analog pin and mapped to an 8-bit value never fully reaches 255 at the upper limit and never fully reaches 0 at the lower limit. As a consequence, when testing the code above you may have found that your Feather's onboard LED never fully turns off. To fix this, consider this code for parsing the /admin/lightlevel incoming message. Replace your parseMQTT() function with: void parseMQTT ( char * topic , byte * payload , unsigned int length ) { payload [ length ] = '\\0' ; // important - do not delete if ( strcmp ( topic , \"/admin/lightlevel\" ) == 0 ) { int brightness = atoi (( char * ) payload ); Serial . print ( \"Brightness: \" ); Serial . println ( brightness ); if ( brightness < 3 ){ analogWrite ( ledPin , 0 ); // Turn LED fully off Serial . println ( \"All OFF\" ); } else if ( brightness > 252 ){ analogWrite ( ledPin , 255 ); // Turn LED fully on Serial . println ( \"All ON\" ); } else { analogWrite ( ledPin , brightness ); // set ledPin brightness } } } This will give you a buffer at either end of the potentiometer where the LED will either be fully on or fully off. Some things you could do to further enhance this project include: Save network bandwidth by triggering \"publish\" commands ONLY when the potentiometer value has changed since the last publish event. There's no reason to publish every 100 milliseconds when the value of the potentiometer hasn't changed! Consider ways in which making use of the MQTT retained flag might make the entire system more robust. What changes would need to be made to the setup so that one could have potentiometer control at every node, where any one location can be used to control all of the other locations?","title":"MQTT"},{"location":"circuits/mqtt/#about-this-tutorial","text":"This tutorial outlines a workflow for implementing MQTT communication on the Adafruit Feather M0, leveraging the following Arduino libraries: WiFi101 by Arduino PubSub Client by Nick O'Leary arduino-timer by Michael Contreras Before you begin, please install these libraries using the Arduino IDE's Library Manager . For the purposes of this tutorial, imagine that you want to be able to control the lighting at the entrance of every administrative building on campus. To accomplish this, you deploy a fleet of Feather M0's to each building. Each Feather is connected to an LED light. One Feather will function as your \"control center\", so it will need a potentiometer for setting brightness levels. As a baseline functionality, we want to be able to control the brightness level of ALL of the Feather-connected LEDs on the network, simultaneously adjusting them from one location. Let's prototype this: Wire up a potentiometer to your Feather M0, terminating its wiper terminal at analog pin A1. We will make use of the onboard LED (@ pin 13) to save some time but you are welcome to include an LED and appropriate resistor for a 3.3V logic level. Once you've wired up your hardware like the image above, you can continue below with either the Quick Start Guide that builds modularly off of a sample code, or with the Detailed Instructions , which walk step-by-step through the entire process of constructing a functioning project.","title":"About this Tutorial"},{"location":"circuits/mqtt/#quick-start-guide","text":"This Quick Start Guide will make use of a heavily commented codebase that has been structured to allow for easy setup and customization of an MQTT client node. First, download a .zip file of the code and unzip it. This zip file contains two files: MQTT_FeatherMO.ino and arduino_secrets.h . Rename the unzipped folder to MQTT_FeatherMO . (Arduino requires that the containing folder name match the main .ino sketch name.) Double-click on the MQTT_FeatherMO.ino file to open it in Arduino. The sketch contains two tabs. Click on the arduino_secrets.h tab and set your WiFi network's SSID and password (if applicable) . Return to the MQTT_FeatherM0 tab. Scroll down to lines 28 and 29 and set your MQTT_BROKER address and MQTT_PORT . If your desired broker is TLS/SSL capable, you will use port 8883. If not, use the default port 1883. Since our broker, mqtt.colab.duke.edu is capable of TLS/SSL, lines 28 and 29 should read: #define MQTT_BROKER \"mqtt.colab.duke.edu\" // specify MQTT broker address (IP or URL) #define MQTT_PORT 8883 // use 8883 for TLS/SSL MQTT; use 1883 for non-secure Look at lines 31 - 35. If your broker is NOT SSL/TLS capable, comment out line 32 and un comment line 35. In our case, since our broker is TLS/SSL enabled, we can leave these lines unchanged. Scroll down to the \"PIN DECLARATIONS\" section of the code . Here is where you would declare any constants to hold pin #'s for the hardware pins you need your project to employ. In our case, we want to use pin 13 as ledPin and pin A1 as sensorPin , so un comment lines 54 and 55, as illustrated below: // **** // PIN DECLARATIONS // // Pin declarations for Feather hardware control // Modify as necessary for your hardware setup. // Don't forget pinMode in the setup() function! // **** // examples: const int ledPin = 13 ; // onboard LED const int sensorPin = A1 ; // analog input, such as potentiometer Next scroll all the way down to the sketch's setup() function and find the \"PINMODE DECLARATIONS\" section. Here is where you will need to set the pinMode of any pins specified above. In our case, we want to set the pinMode of ledPin to OUTPUT and of sensorPin to INPUT . Un comment lines 181 and 182, as indicated below: // **** // PINMODE DECLARATIONS // Any pinMode declarations should be set here // **** pinMode ( ledPin , OUTPUT ); pinMode ( sensorPin , INPUT ); Scroll back up to the \"SUBSCRIPTIONS SECTION\" (around line 60). If your project needs to subscribe to any MQTT topics, here is where you both a) subscribe to the topic(s) and b) specify what your Feather M0 should do upon receiving an incoming message at that topic(s) . Continue to Part A: doSubscriptions() : Here you can specify -- one per line -- any topics that you would like your Feather M0 to subscribe to from the MQTT broker. These follow the syntax client.subscribe(\"/some/topic\"); Let's specify a subscription to the topic /admin/lightlevel . Add this line to the doSubscriptions() function, before its closing } , as illustrated below: void doSubscriptions () { // Specify topic subscriptions line by line below, such as // client.subscribe(\"/some/topic\"); // client.subscribe(\"/another/topic\"); client . subscribe ( \"/admin/lightlevels\" ); } Next we need to specify what happens when the Feather receives an MQTT message at a subscribed topic . Scroll down and find \"PART B - Handle parsing of specific topics below...\" Here we do a string compare of the incoming topic against a specific topic we expect to receive and parse that message accordingly. The generic syntax for such parsing is: if ( strcmp ( topic , \"/some/topic/\" ) == 0 ){ //Do something with its payload } In our case, we want to do something when a message comes in at topic /admin/lightlevel , namely, adjust the onboard LEDs brightness. Add the following code immediately below the line /////// TOPIC SPECIFIC PARSING GOES HERE (approx line 116) and above the closing } for the parseMQTT() function (approx. line 118 ) //this listens for a topic called \"/admin/lightlevel\" // and then converts its payload string into an integer // using the atoi() function. It then sets the ledPin level // accordingly using the analogWrite() function if ( strcmp ( topic , \"/admin/lightlevel\" ) == 0 ) { int brightness = atoi (( char * ) payload ); Serial . print ( \"Brightness: \" ); Serial . println ( brightness ); if ( brightness < 3 ){ analogWrite ( ledPin , 0 ); // Turn LED fully off Serial . println ( \"All OFF\" ); } else if ( brightness > 252 ){ analogWrite ( ledPin , 255 ); // Turn LED fully on Serial . println ( \"All ON\" ); } else { analogWrite ( ledPin , brightness ); // set ledPin brightness } } If all we need to do in our project was subscribe to MQTT topics and parse incoming messages at those topics, we could stop here. However, we also need at least one of our nodes to be publishing sensor data (in this case, potentiometer settings) to the MQTT broker. Scroll down to the \"MQTT PUBLISHING SETUP\" section. Here you can first set one or more intervals for the Feather to trigger PubSub publish() functions . A single interval can trigger any number of publish events. For example, you might want to publish to four different topics every 500 ms. And/or different intervals can be set for different topics. For example, you may wish to publish the value of a potentiometer every 100 ms but a temperature reading only every 15 minutes. We want the client LEDs to be quickly notified of any changes in the potentiometer setting so that they can update their brightness in near real-time. So we'll set up a 100 ms interval for our publishing. Under Part 1, find the setPubIntervals() function and inside the function, add the following line as highlighted below: void setPubIntervals () { // syntax: doPub.every(milliseconds, callbackFunction); //doPub.every(100, someFunc); // call the someFunc() function every 100 ms doPub . every ( 100 , publishLightlevel ); } Finally, you need to write the callback functions specified in the interval timers above . The generic syntax is: bool someFunc ( void * ) { client . publish ( \"/some/topic\" , \"value_as_string\" , false ); // true:false --> retained return true ; // repeat --> true } In the example below, every 100 ms (the interval set in Part 1 above), the function publishLightlevel() executes, which reads the analog value at sensorPin, maps it to a value between 0 - 255 (8 bit) and then converts that numerical value to a character array c string. It then publishes that value to MQTT topic /admin/lightlevel with a retain flag set to false . Insert the code below at line 172 ( ///////// doPub callback functions go here ): ///////// doPub callback functions go here bool publishLightlevel ( void * ) { int reading = analogRead ( sensorPin ); // read the potentiometer reading = map ( reading , 0 , 4095 , 0 , 255 ); // Feather M0 set to 12-bit ADC char value [ 3 ]; String msg = String ( reading ); msg . toCharArray ( value , 3 ); client . publish ( \"/admin/lightlevel\" , msg . c_str (), false ); return true ; // repeat? true } Verify and upload the sketch to your Feather M0. Once your Feather connects to Wifi and to the MQTT broker, manipulating the potentiometer should dynamically adjust the brightness of your onboard LED.","title":"Quick Start Guide"},{"location":"circuits/mqtt/#detailed-instructions","text":"","title":"Detailed Instructions"},{"location":"circuits/mqtt/#part-1-wifi-connection","text":"As you learned in our initial Feather tutorial , connecting to the internet requires using the Arduino WiFi library so that the Feather's ATSAMD21G18 ARM Cortex M0 processor can communicate with its Atmel WINC1500 WiFi chip. Let's begin by walking through the steps necessary to connect the Feather to a WiFi network. Launch the Arduino IDE. Create a new sketch by choosing File --> New from the main menu. Save that sketch as \"MQTT_FeatherM0_Prototype\" by choosing File --> Save from the main menu. Ensure that you have \"Adafruit Feather M0\" selected under Tools --> Board. Add the WiFi101 and SPI libraries to your sketch by either: Choosing Sketch --> Include Library --> WiFi101 and Sketch --> Include --> SPI -- or -- Typing the following code at lines 1 and 2 of your sketch: #include <SPI.h> #include <WiFi101.h> It's considered a best practice to keep your WiFi access credentials in a separate header file. To create one, find the \u25be symbol and left-click on it. In the pop-up, choose New Tab. (Alternatively, you can press SHIFT-\u2318-N) You will be prompted to enter a name for this new tab. Type: arduino_secrets.h A new tab will appear in your IDE workspace, as indicated below: In this tab you will want to create defined constants for your ssid and wifi password (if a password is required for your wifi network): #define SECRET_SSID \"DukeOpen\" // your network SSID (name) #define SECRET_PASS \"\" // your network password; leave empty for open networks In the above example, the SSID is set to the open network, DukeOpen with no password . Save your sketch: File --> Save Return to the main tab of your Arduino sketch. Between the library #include section and the void setup() function, add the following lines: // WiFi credentials and config #include \"arduino_secrets.h\" char ssid [] = SECRET_SSID ; char pass [] = SECRET_PASS ; int status = WL_IDLE_STATUS ; // variable for WiFi radio's status WiFiSSLClient WiFiclient ; // instantiate a secure WiFi client // use WiFiClient WiFiclient; for non-secure connections This instantiates several variables necessary for WiFi connectivity and signals to the WiFI101 library that we wish to create an SSL-capable WiFi connection. If you don't need a secure connection, use WiFiClient WiFiclient; instead. Next, turn your attention to the void setup() function, replacing it with the following code: void setup (){ // Initialize Serial (useful for debugging) Serial . begin ( 9600 ); // Feather M0-specific WiFi pins WiFi . setPins ( 8 , 7 , 4 , 2 ); // attempt to connect to WiFi network: while ( status != WL_CONNECTED ) { Serial . print ( \"Attempting to connect to SSID: \" ); Serial . println ( ssid ); // Connect to WiFi: if ( sizeof ( pass ) == 1 ) { // if no password status = WiFi . begin ( ssid ); // connect with SSID alone } else { status = WiFi . begin ( ssid , pass ); // connect with SSID and password } // wait 5 seconds for connection: delay ( 5000 ); } // you're connected now, so print out a success message: Serial . println ( \"You're connected to the network\" ); // print your Feather's IP address: IPAddress ip = WiFi . localIP (); Serial . print ( \"Device IP Address: \" ); Serial . println ( ip ); } Save and verify your Sketch. Plug in your Feather M0 to the USB port of your computer. Confirm that its USB port is recognized and selected in the Arduino IDE: Tools --> Port Upload the code to your Feather and open your Serial Monitor. Your Feather should connect to your desired network and indicate a successful connection on the Serial Monitor:","title":"Part 1 - WiFi Connection"},{"location":"circuits/mqtt/#part-2-mqtt-connection","text":"Next we need to add the code necessary to make a connection to an MQTT broker . We will use the PubSub Client by Nick O'Leary to connect to our broker. Broker : mqtt.colab.duke.edu Port : 8883 (TLS/SSL) The above broker is hosted on a virtual machine created using Duke's Virtual Computing Manager service. If there is interest, a future tutorial will outline how to set up and configure this service, leveraging the open source MQTT broker Mosquitto and for secure connectivity, EFF's Certbot and Let's Encrypt certificates . For now, let's simply make use of this existing broker. To include the PubSub Client library, add this code below the #include statement for the WiFi101 library at the very top of your sketch: #include <PubSubClient.h> Next, add the configuration variables required by the PubSub Client. Add the highlighted lines below the line instantiating a secure WiFi client: WiFiSSLClient WiFiclient ; // instantiate a secure WiFi client for TLS/SSL // use WiFiClient WiFiclient; for non-secure connections // MQTT configuration #define MQTT_BROKER \"mqtt.colab.duke.edu\" // specify MQTT broker address (IP or URL) #define MQTT_PORT 8883 // use 1883, or 8883 for TLS/SSL // use WiFi connection for MQTT communication PubSubClient client ( WiFiclient ); // each MQTT client should have a unique ID String device_id = \"FeatherM0-\" ; // this will be used with Mac address for uniqueness // variables for non-blocking MQTT reconnection long lastReconnectAttempt = 0 ; long now ; void setup (){ The code above specifies some defined constants for the MQTT broker and port, and then tells the PubSub client to use the WiFiClient as a communication channel. The rest of the code sets up some variables to be used later. At the end of your setup() function (but before its closing } ), add the following: // get your Feather's MAC address: byte mac [ 6 ]; WiFi . macAddress ( mac ); String mac_address ; for ( int i = 5 ; i <= 0 ; i -- ) { if ( mac [ i ] < 16 ) mac_address += \"0\" ; mac_address += String ( mac [ i ], HEX ); if ( i > 0 ) mac_address += \":\" ; } // append mac_address to device_id // for unique identification device_id += mac_address ; // initiate first connection to MQTT broker client . setServer ( MQTT_BROKER , MQTT_PORT ); // specify a function to call upon receipt of a msg // on a subscribed channel; in this case parseMQTT() //client.setCallback(parseMQTT); // print info on MQTT broker Serial . print ( \"Attempting to connect to MQTT Broker: \" ); Serial . print ( MQTT_BROKER ); Serial . print ( \":\" ); Serial . println ( MQTT_PORT ); lastReconnectAttempt = 0 ; This code will get your Feather's hardware mac address and write it to the variable mac_address. Then it concatenates \"FeatherM0-\" with your Feather's hardware mac address, rendering a unique identifier for your Feather when communicating with an MQTT broker. The client.setServer() function configures the PubSub client to connect to the specified MQTT broker and port. The client.setCallback() function indicates what function to call whenever the PubSub client receives an incoming message on a subscribed channel. In this case, it will call the parseMQTT() function, which we have yet to define. Consequently, let's leave the client.setCallback() line commented out for now. We're getting close to having our code in place to connect our Feather to the MQTT broker. Scroll to the bottom of your Arduino code and replace the setup() function with the following code: void loop (){ // get the current time now = millis (); // if MQTT connection lost if ( ! client . connected ()) { // only attempt to reconnect every 5 secs if ( now - lastReconnectAttempt > 5000 ) { // 5 secs since last reconnect attempt? lastReconnectAttempt = now ; // Attempt to reconnect if ( reconnect ()) { lastReconnectAttempt = 0 ; } } } else { // MQTT client connected client . loop (); } } This code checks to see if the PubSub client is connected to the MQTT broker; if not, it waits 5 seconds and attempts to connect by running the reconnect() function, which we will define in the next step. If unsuccessful, it waits another five seconds and tries again. If successful, it runs the PubSub client.loop() function, which continually checks that the connect is live and listens for incoming messages. Finally, add the following reconnect() function below the loop() function ( after the loop() function's closing } .) boolean reconnect () { if ( client . connect ( device_id . c_str ())) { Serial . print ( device_id ); Serial . println ( \" connected to MQTT broker\" ); return client . connected (); } Serial . print ( \"MQTT connection failed, rc=\" ); Serial . println ( client . state ()); Serial . println ( \"Trying again ...\" ); return 0 ; } Verify and upload the code to your Feather M0. Open the Serial Monitor and confirm that you are successfully connecting to both your desired wireless network (e.g. DukeOpen) and MQTT server, as indicated in the image below:","title":"Part 2 - MQTT Connection"},{"location":"circuits/mqtt/#part-3-mqtt-subscriptions","text":"MQTT protocol allows clients to subscribe to \"topics\" that may be published by other clients connected to the same MQTT broker. Client subscriptions are \"blind\" in that clients have no way of verifying if any other clients are publishing at that topic. In the Arduino PubSub library, the function to subscribe to a topic is .subscribe(\"/some/topic\" and must be called after a successful connection to the MQTT broker. In our project, we want client Feather M0's in each administrative building to subscribe to the same topic (e.g. /admin/lightlevel ) and use the information published to that topic to set the level of an attached LED. Let's set this up now. Right above the setup() function, declare a variable for the attached LED at pin 13: const int ledPin = 13 ; // onboard LED Within the setup() function, set the pinMode of ledPin to OUTPUT : pinMode ( ledPin , OUTPUT ); Next, create a new function outside of the setup() and loop() functions called doSubscriptions() and subscribe to the topic /admin/lightlevel as highlighted below: void doSubscriptions () { // specify topic subscriptions line by line below, such as // client.subscribe(\"/some/topic/\"); // client.subscribe(\"/another/topic/\"); client . subscribe ( \"/admin/lightlevel\" ); } We need to call this doSubscriptions() function after we establish an MQTT connection, so find the function called reconnect() and add the highlighted line below: boolean reconnect () { if ( client . connect ( device_id . c_str ())) { Serial . print ( device_id ); Serial . println ( \" connected to MQTT broker\" ); doSubscriptions (); // (re)subscribe to desired topics return client . connected (); } Serial . print ( \"MQTT connection failed, rc=\" ); Serial . println ( client . state ()); Serial . println ( \"Trying again ...\" ); return 0 ; } Now that we have subscribed to the desired topic, we need to add a function to our sketch that parses the incoming messages and executes some code on our Feather to change the onboard LED's brightness. Recall in Part 2, #3 we left the setCallback() function commented out? Find that line in your setup() function and un comment it: // initiate first connection to MQTT broker client . setServer ( MQTT_BROKER , MQTT_PORT ); // specify a function to call upon receipt of a msg // on a subscribed channel; in this case parseMQTT() client . setCallback ( parseMQTT ); This means that every time the PubSub client receives an incoming message at a suscribed topic, the parseMQTT() function will execute. Let's create that function, adding the following to your sketch: void parseMQTT ( char * topic , byte * payload , unsigned int length ) { payload [ length ] = '\\0' ; // important - do not delete // Handle parsing of specific topics using the \"string // compare\" function to differentiate among topics if ( strcmp ( topic , \"/admin/lightlevel\" ) == 0 ) { int lightlevel = atoi (( char * ) payload ); Serial . print ( \"Light level: \" ); Serial . println ( lightlevel ); analogWrite ( ledPin , lightlevel ); } } The code above will trigger upon message receipt, compare the topic of the MQTT message, and if it matches admin/lightlevel it will convert the message payload from a character array to an integer and use it to set the PWM analog level of pin 13. Verify your code and upload it to your Feather M0. If you would like to test your subscription now, you will need to download an MQTT client for your computer. If not, you can skip down to Part 4: MQTT Publishing . Download and install MQTTBox (available for Mac, Linux, and Windows). Once installed, launch the application. Click on the \"Create MQTT Client\" button. In the settings, use the following for mqtt.colab.duke.edu : Client Name: Duke MQTT Protocol: mqtts / tls Host: mqtt.colab.duke.edu:8883 SSL / TLS Version: auto SSL / TLS Certificate Type: CA signed server certificate The rest of the settings can be left unchanged. Click on the \"Save\" button. The resulting screen should indicate that MQTTBox has successfully connected to the broker with a green \"Connected\" indicator: In the \"Topic to Publish\" pane, enter the following: Topic to publish: /admin/lightlevel Payload: 255 Then click the blue \"Publish\" button. Click it again. Each time you click \"Publish\" you should get a notification at the bottom of the \"Topic to Publish\" pane indicating a message was published. Check your Feather M0's onboard LED. It should shine at full brightness. In MQTTBox, change the Payload from 255 to 0 and then click the Publish button again. Your Feather M0's onboard LED should turn off. Try 127 as a payload. Your LED should shine at 50% brightness. If you were to deploy a fleet of Feather M0's in each admin building this is the extent of the code you would need to install on each Feather. One Feather will need to serve as the \"control,\" where an attached potentiometer will publish a value to /admin/lightlevel that each subscribed Feather will process to adjust their LED brightness. We will set up this publish functionality in the next part.","title":"Part 3:  MQTT Subscriptions"},{"location":"circuits/mqtt/#part-4-mqtt-publishing","text":"Finally, in this section we will make use of Michael Contreras' arduino-timer library to publish potentiometer data from our Feather M0 to the topic /admin/lightlevel . At the top of your sketch, include the arduino-timer library: #include <SPI.h> #include <WiFi101.h> #include <PubSubClient.h> #include <timer.h> Find where you declared the constant ledPin and add a line for the potentiometer attached to analog pin A1: const int ledPin = 13 ; // onboard LED const int sensorPin = A1 ; // potentiometer attached to A1 In your setup() function, use pinMode() to set sensorPin as an input and also specify that the Feather M0's ADC can function at 12-bit resolution: pinMode ( ledPin , OUTPUT ); pinMode ( sensorPin , INPUT ); // default Arduino ADC resolution is 10-bit // but we can set it to the Feather M0 native resolution of 12-bit analogReadResolution ( 12 ); // gives values of 0 - 4095 Next, we'll make use the arduino-timer library to set up a publication interval of 100 milliseconds for publishing our potentiometer data. Just above the setup() function, add the following: auto doPub = timer_create_default (); // create a timer with default settings void setPubIntervals () { // syntax: doPub.every(milliseconds, callbackFunction); doPub . every ( 100 , publishPot ); // call the publishPot() function every 100 ms } // In this example, every 100 ms (set in setPubIntervals above), // this function executes, which reads the analog value at sensorPin, // maps it to a value between 0 - 255 (8 bit) and then converts // that numerical value to a character array c string bool publishPot ( void * ) { int reading = analogRead ( sensorPin ); // read potentiometer reading = map ( reading , 0 , 4095 , 0 , 255 ); // Feather M0 set to 12-bit ADC char value [ 3 ]; // instantiate a character array to hold reading String msg = String ( reading ); // put reading into msg msg . toCharArray ( value , 3 ); // convert msg to char array // publish to topic the msg as char * with a retained // setting of false (do not retain) client . publish ( \"/admin/lightlevel\" , msg . c_str (), false ); return true ; // repeat? true } Next, add the following line at very end of your setup() function, but before its closing } : setPubIntervals (); // initalize any publish intervals Finally, add the following line at the very end of your loop() function, but before its clsing } : doPub . tick (); // tick the doPub timer Verify and then upload your sketch to your Feather M0. Once your Feather connects to Wifi and to the MQTT broker, manipulating the potentiometer should dynamically adjust the brightness of your onboard LED, as well as the brightness of any other Feather M0 which is connected to MQTT broker mqtt.colab.duke.edu and subscribed to topic /admin/lightlevel using the message parsing above. Note In my experience, a potentiometer wired to the Feather M0's analog pin and mapped to an 8-bit value never fully reaches 255 at the upper limit and never fully reaches 0 at the lower limit. As a consequence, when testing the code above you may have found that your Feather's onboard LED never fully turns off. To fix this, consider this code for parsing the /admin/lightlevel incoming message. Replace your parseMQTT() function with: void parseMQTT ( char * topic , byte * payload , unsigned int length ) { payload [ length ] = '\\0' ; // important - do not delete if ( strcmp ( topic , \"/admin/lightlevel\" ) == 0 ) { int brightness = atoi (( char * ) payload ); Serial . print ( \"Brightness: \" ); Serial . println ( brightness ); if ( brightness < 3 ){ analogWrite ( ledPin , 0 ); // Turn LED fully off Serial . println ( \"All OFF\" ); } else if ( brightness > 252 ){ analogWrite ( ledPin , 255 ); // Turn LED fully on Serial . println ( \"All ON\" ); } else { analogWrite ( ledPin , brightness ); // set ledPin brightness } } } This will give you a buffer at either end of the potentiometer where the LED will either be fully on or fully off. Some things you could do to further enhance this project include: Save network bandwidth by triggering \"publish\" commands ONLY when the potentiometer value has changed since the last publish event. There's no reason to publish every 100 milliseconds when the value of the potentiometer hasn't changed! Consider ways in which making use of the MQTT retained flag might make the entire system more robust. What changes would need to be made to the setup so that one could have potentiometer control at every node, where any one location can be used to control all of the other locations?","title":"Part 4:  MQTT Publishing"},{"location":"circuits/osc/","text":"About this Tutorial This tutorial outlines a workflow for implementing OSC (Open Sound Control) communication on the Adafruit Feather M0.","title":"OSC"},{"location":"circuits/osc/#about-this-tutorial","text":"This tutorial outlines a workflow for implementing OSC (Open Sound Control) communication on the Adafruit Feather M0.","title":"About this Tutorial"},{"location":"circuits/tinkercad/","text":"Assumptions The following tutorial assumes that: You have created a Tinkercad / Autodesk account. (If you have not yet done so, please create one .) You are signed in using your account. You have already completed the four tutorials in the Circuits \u201cGetting Started\u201d Project Gallery : Start Simulating Editing Components (we\u2019ll cover Arduino in a future class; this just shows you how to modify components whose properties are editable.) Wiring Components Adding Components You have already completed the three Circuits \u201cSkill Builders Lessons\u201d : Introducing the Breadboard Ohm\u2019s Law Series and Parallel Circuits Circuit Setup In this section of the tutorial you will create two identical circuits in the same Tinkercad Circuits workspace: one without a breadboard, and the second using a breadboard. Later in the tutorial we will use these circuits to gain a better understanding of current, resistance, and voltage. In both cases, you will be creating a simple LED circuit using a battery, LED, and resistor. Here is the circuit diagram: Calculate the Proper Resistor Value: The circuit diagram above indicates a 3V battery (2 x AA) and an LED with a forward voltage (voltage drop) of approximately 2.06V. The LED's ideal forward current is 20mA. What is the ideal resistor value (in ohms) for this circuit? In other words, what resistor (R) will keep the current (I) through the LED closest to 20mA, the current at which the LED will burn the brightest without jeopardizing its longevity or, worse, overloading? Use this formula (based on Ohm's Law and Kirchhoff\u2019s voltage law): R = \\frac{V_{source}-V_{drop}}{I_{forward}} R = \\frac{V_{source}-V_{drop}}{I_{forward}} Answer: $$ R\\ =\\ \\Rule{1cm}{0.15mm}{0.15mm} \\ \\Omega $$ Circuit #1 - No Breadboard LED Circuit Go to your Tinkercad Dashboard https://www.tinkercad.com/#/dashboard Click on the Circuits button in the left panel. Click on the green \"Create new Circuit\" button. Create new Circuit A new blank canvas will open in your browser. Using the Components Palette on the right, click and drag the following components into the canvas: Resistor LED 1.5V Battery (AA) Click on the Battery in the canvas. In the configuration panel that appears, set the \"Count\" to \"2 Batteries\" (e.g. we want a 3V supplied to our circuit, so 2 x 1.5V = 3V ). Click on the Resistor in the canvas. In the configuration panel that appears, set the Resistance to the \u03a9 you calculated above. Click and drag between terminals of your components to wire up your circuit. If you wish, you may click on the individual wires to set their color. After completing your wiring and arranging/rotating the components, your circuit should look something like this: Click on the \"Start Simulation\" button in the upper-right of the browser window to simulate the circuit. The LED should be brightly lit. Troubleshooting If your LED is blown or shows a warning indicator, your calculated resistor value is too low. Review your calculations. If your LED is dim, your calculated resistor value is too high. Review your calculations. If your LED does not turn on at all, you may have mis-wired your circuit. Check your connections and wire-routing. Remember, LEDs are diodes and thus have polarity. Circuit #2 - LED Circuit on a Breadboard Next, using the same canvas, let's create a breadboard version of the same circuit. Move the circuit you just created to the left or right of the canvas to give yourself space for the new circuit. Again, using the Components Palette on the right, click and drag the following components into the canvas: Resistor LED 1.5V Battery (AA) Breadboard Set the Battery Count to 2. Set the Resistor's resistance to the same \u03a9 value you calculated for the non-breadboard circuit above. Using wires and the breadboard, create the circuit. Hint Hovering your mouse over the breadboard rows will remind you how a breadboard is configured (power buses on the outside rails, connected rows separated by a \"ravine\"). After completing your wiring and arranging/rotating the components, your circuit should look something like this: Click on the \"Start Simulation\" button again in the upper-right of the browser window to simulate the circuit. The LED on the breadboard should be brightly lit. Using a Multimeter Now that we have a working circuit, let's use Tinkercad's virtual multimeter to take some measurements on our circuit. From the Components Palette, find the Multimeter and add it to your canvas. Note that the multimeter has three modes. By default, it will function in Voltage mode as a voltmeter , enabling you to read voltages across different points in your circuit. The multimeter can be set to other modes easily by clicking on the multimeter in your canvas to display the configuration panel and selecting a different mode. In Amperage mode, it will function as an ammeter , enabling you to read the current passing through specific points in your circuit. In Resistance mode, it will function as an ohmmeter , enabling you to read the resistance between specific points in your circuit. Reading Voltages We know that the total voltage of our circuit is 3V because the voltage differential between the cathode (+ terminal) and anode (- terminal) of the battery is 3V (assuming it is fully charged). But let's read voltages between various points in the circuit. Read the voltage between the two sides of the resistor: Voltage Across the Resistor Fill in your reading below: $$ Voltage\\ =\\ \\Rule{1cm}{0.15mm}{0.15mm} \\ V $$ Read the voltage between the anode and the cathode of the LED: Voltage Across the LED Fill in your reading below: $$ Voltage\\ =\\ \\Rule{1cm}{0.15mm}{0.15mm} \\ V $$ Finally, read the voltage between the two terminals of the battery in the circuit. Voltage Across the Battery Fill in your reading below: $$ Voltage\\ =\\ \\Rule{1cm}{0.15mm}{0.15mm} \\ V $$ If your voltage reading \u2260 3V, what do you think accounts for the difference? What do you observe when you add the voltage across the resistor to the voltage across the LED? Total Voltage Fill in your reading below: $$ V_{resistor} + V_{led} \\ = \\ \\Rule{1cm}{0.15mm}{0.15mm} \\ V $$ Observation: Reading Amperage Finally, let's use the multimeter as an ammeter to measure the total current (I) being drawn by our circuit. Important Remember: Voltmeter and ohmmeters are wired in parallel to the component being measured. However, ammeters must be wired in series . See https://learn.sparkfun.com/tutorials/series-and-parallel-circuits Wire your multimeter into your circuit in series as illustrated below: Measuring Current What is the current being drawn by the circuit? Provide your answer in both amps (A) and milliamps (mA) What happens to the current if you increase the voltage in the circuit, such as changing the battery from two AA's (3V) to 3 AA's (4.5V)? Similarly, what happens if you leave the voltage alone but increase the resistance in the circuit, such as increasing the resistance of the resistor to 100 \u03a9?","title":"Tinkercad"},{"location":"circuits/tinkercad/#assumptions","text":"The following tutorial assumes that: You have created a Tinkercad / Autodesk account. (If you have not yet done so, please create one .) You are signed in using your account. You have already completed the four tutorials in the Circuits \u201cGetting Started\u201d Project Gallery : Start Simulating Editing Components (we\u2019ll cover Arduino in a future class; this just shows you how to modify components whose properties are editable.) Wiring Components Adding Components You have already completed the three Circuits \u201cSkill Builders Lessons\u201d : Introducing the Breadboard Ohm\u2019s Law Series and Parallel Circuits","title":"Assumptions"},{"location":"circuits/tinkercad/#circuit-setup","text":"In this section of the tutorial you will create two identical circuits in the same Tinkercad Circuits workspace: one without a breadboard, and the second using a breadboard. Later in the tutorial we will use these circuits to gain a better understanding of current, resistance, and voltage. In both cases, you will be creating a simple LED circuit using a battery, LED, and resistor. Here is the circuit diagram: Calculate the Proper Resistor Value: The circuit diagram above indicates a 3V battery (2 x AA) and an LED with a forward voltage (voltage drop) of approximately 2.06V. The LED's ideal forward current is 20mA. What is the ideal resistor value (in ohms) for this circuit? In other words, what resistor (R) will keep the current (I) through the LED closest to 20mA, the current at which the LED will burn the brightest without jeopardizing its longevity or, worse, overloading? Use this formula (based on Ohm's Law and Kirchhoff\u2019s voltage law): R = \\frac{V_{source}-V_{drop}}{I_{forward}} R = \\frac{V_{source}-V_{drop}}{I_{forward}} Answer: $$ R\\ =\\ \\Rule{1cm}{0.15mm}{0.15mm} \\ \\Omega $$","title":"Circuit Setup"},{"location":"circuits/tinkercad/#circuit-1-no-breadboard-led-circuit","text":"Go to your Tinkercad Dashboard https://www.tinkercad.com/#/dashboard Click on the Circuits button in the left panel. Click on the green \"Create new Circuit\" button. Create new Circuit A new blank canvas will open in your browser. Using the Components Palette on the right, click and drag the following components into the canvas: Resistor LED 1.5V Battery (AA) Click on the Battery in the canvas. In the configuration panel that appears, set the \"Count\" to \"2 Batteries\" (e.g. we want a 3V supplied to our circuit, so 2 x 1.5V = 3V ). Click on the Resistor in the canvas. In the configuration panel that appears, set the Resistance to the \u03a9 you calculated above. Click and drag between terminals of your components to wire up your circuit. If you wish, you may click on the individual wires to set their color. After completing your wiring and arranging/rotating the components, your circuit should look something like this: Click on the \"Start Simulation\" button in the upper-right of the browser window to simulate the circuit. The LED should be brightly lit. Troubleshooting If your LED is blown or shows a warning indicator, your calculated resistor value is too low. Review your calculations. If your LED is dim, your calculated resistor value is too high. Review your calculations. If your LED does not turn on at all, you may have mis-wired your circuit. Check your connections and wire-routing. Remember, LEDs are diodes and thus have polarity.","title":"Circuit #1 - No Breadboard LED Circuit"},{"location":"circuits/tinkercad/#circuit-2-led-circuit-on-a-breadboard","text":"Next, using the same canvas, let's create a breadboard version of the same circuit. Move the circuit you just created to the left or right of the canvas to give yourself space for the new circuit. Again, using the Components Palette on the right, click and drag the following components into the canvas: Resistor LED 1.5V Battery (AA) Breadboard Set the Battery Count to 2. Set the Resistor's resistance to the same \u03a9 value you calculated for the non-breadboard circuit above. Using wires and the breadboard, create the circuit. Hint Hovering your mouse over the breadboard rows will remind you how a breadboard is configured (power buses on the outside rails, connected rows separated by a \"ravine\"). After completing your wiring and arranging/rotating the components, your circuit should look something like this: Click on the \"Start Simulation\" button again in the upper-right of the browser window to simulate the circuit. The LED on the breadboard should be brightly lit.","title":"Circuit #2 - LED Circuit on a Breadboard"},{"location":"circuits/tinkercad/#using-a-multimeter","text":"Now that we have a working circuit, let's use Tinkercad's virtual multimeter to take some measurements on our circuit. From the Components Palette, find the Multimeter and add it to your canvas. Note that the multimeter has three modes. By default, it will function in Voltage mode as a voltmeter , enabling you to read voltages across different points in your circuit. The multimeter can be set to other modes easily by clicking on the multimeter in your canvas to display the configuration panel and selecting a different mode. In Amperage mode, it will function as an ammeter , enabling you to read the current passing through specific points in your circuit. In Resistance mode, it will function as an ohmmeter , enabling you to read the resistance between specific points in your circuit.","title":"Using a Multimeter"},{"location":"circuits/tinkercad/#reading-voltages","text":"We know that the total voltage of our circuit is 3V because the voltage differential between the cathode (+ terminal) and anode (- terminal) of the battery is 3V (assuming it is fully charged). But let's read voltages between various points in the circuit. Read the voltage between the two sides of the resistor: Voltage Across the Resistor Fill in your reading below: $$ Voltage\\ =\\ \\Rule{1cm}{0.15mm}{0.15mm} \\ V $$ Read the voltage between the anode and the cathode of the LED: Voltage Across the LED Fill in your reading below: $$ Voltage\\ =\\ \\Rule{1cm}{0.15mm}{0.15mm} \\ V $$ Finally, read the voltage between the two terminals of the battery in the circuit. Voltage Across the Battery Fill in your reading below: $$ Voltage\\ =\\ \\Rule{1cm}{0.15mm}{0.15mm} \\ V $$ If your voltage reading \u2260 3V, what do you think accounts for the difference? What do you observe when you add the voltage across the resistor to the voltage across the LED? Total Voltage Fill in your reading below: $$ V_{resistor} + V_{led} \\ = \\ \\Rule{1cm}{0.15mm}{0.15mm} \\ V $$ Observation:","title":"Reading Voltages"},{"location":"circuits/tinkercad/#reading-amperage","text":"Finally, let's use the multimeter as an ammeter to measure the total current (I) being drawn by our circuit. Important Remember: Voltmeter and ohmmeters are wired in parallel to the component being measured. However, ammeters must be wired in series . See https://learn.sparkfun.com/tutorials/series-and-parallel-circuits Wire your multimeter into your circuit in series as illustrated below: Measuring Current What is the current being drawn by the circuit? Provide your answer in both amps (A) and milliamps (mA) What happens to the current if you increase the voltage in the circuit, such as changing the battery from two AA's (3V) to 3 AA's (4.5V)? Similarly, what happens if you leave the voltage alone but increase the resistance in the circuit, such as increasing the resistance of the resistor to 100 \u03a9?","title":"Reading Amperage"},{"location":"circuits/twitter/","text":"About this Tutorial Some of your projects require querying the API of an online service -- such as [Instagram]((https://www.instagram.com/developer/), NASA , or OpenWeatherMap -- and then parsing the data sent back from the service. JSON (JavaScript Object Notation) is a common data format returned by API queries. In this tutorial you will explore how to request JSON data from an API using an HTTP GET request and then how to parse that data for use by your Feather. Specifically, this tutorial outlines how to query the Twitter API and its \"Tweet JSON\" data. Install ArduinoJSON Library First, install Benoit Blanchon's ArduinoJson library into the Arduino IDE. Proceed with the steps below and/or consult arduinojson.org's official documentation . Launch the Arduino application. From the main menu, choose Sketch --> Include Library --> Manage Libraries In the \"Filter your search...\" box, type JSON Scroll down until you find \"ArduinoJson by Benoit Blanchon\" Important Do NOT immediately click Install. The Library Manager lists the \"beta\" version by default, but for reliability, you will most likely want to use the latest \"production\" version. As of the of the writing of this tutorial, the latest version is: version 5.13.3 From the \"Version\" drop-down box, scroll down past all of the \"X.X-beta\" versions until you find the latest version non-beta version. Click on that version to select it. Finally, click the Install button and then Close once the library installation has completed. Twitter Setup Developer Access To interact with Twitter's API, you will need a developer account and Twitter API keys. Go to https://twitter.com/login and sign in with your Twitter account credentials. Visit https://developer.twitter.com/en/apply/user to register your Twitter username for developer access. Your username should be selected by default. Click \"Continue.\" Next, select the \"I am requesting access for my own personal use\" radio button. Enter a name for your developer account or project and select Primary Country of Operation. Click \"Continue\" On the next screen, choose your use case (\"Student project / Learning to code\"). Describe your project, such as: 1. I am testing the Twitter API with an IoT device (Adafruit Feather M0) 2. I want my own new Tweets, new followers and likes to my Tweets to trigger functions on my device. (light LEDs, etc) 3. No, simply reading and responding to Twitter data 4. Content will not be displayed on device, except abstractly. [Of course, if you will display Twitter content (such as on an Arduino-connected LCD) you should say so here and describe its use case.] Select No for \"Will your product, service, or analysis make Twitter content or derived information available to a government entity?\" Read and accept the Terms of Service. Finally, check your email inbox for a verification email. In the email, click the \"Confirm Your Email\" button. Now you are ready to create your first Twitter app. Visit https://developer.twitter.com/en/apps and click on the \"Create an App\" button. Enter the App details (these can be modified later): Name: vms564s_app App Description: This app enables connectivity to an IoT device Website URL: https://aahvs.duke.edu Tell us how this app will be used: This app is for a class project for VMS564S Physical Computing and the Internet of Things at Duke University. Click the Create button. You will be taken to a summary page. Verify and/or edit the information as needed. Click on the Permissions tab. For our purposes, we only need \"Read-only\" access. If you want your Arduino app on the Feather to also be able to post Tweets under your account, choose \"Read and write\". Click \"Save\". Next, click on the \"Keys and Tokens\" tab. Under \"Consumer API keys\", click \"Regenerate\". This will generate both an API Key and API Secret Key that you will need for the next section of this tutorial. Leave this page open in your browser so you can access these in the next section. You can always return to find them via https://developer.twitter.com/en/apps Twitter Application-only Authentication For this tutorial, we will make use of Twitter's application-only authentication schema. In this schema, you will encode the API key and secret for your app and store it on the Feather. Then you will use these credentials to generate a \"Bearer\" token that will allow your Feather to make queries against the Twitter API. Encode Consumer API Key/Secret The documentation specifies that you need to encode your access token and access token secret as a single \"RFC 1738- and Base64-encoded\" string. Note RFC 1738 encoding, also known as \"url safe\" encoding, will have no effect on the consumer key and secret at this time, but may in the future. You can encode here if necessary: https://www.freeformatter.com/url-encoder.html In a new browser window, visit: https://www.base64encode.org/ You will want to paste into the form your API key and secret in the following format, where key and secret are separated by a : with no spaces: consumerAPIkey:APIsecret Thus, the hypothetical consumer API key xvz1evFS4wEEPTGEFPHBog and secret L8qq9PZyRg6ieKGEKhZolGC0vJWLw8iEJ88DRdyOg would become: xvz1evFS4wEEPTGEFPHBog:L8qq9PZyRg6ieKGEKhZolGC0vJWLw8iEJ88DRdyOg Click the green \"> Encode <\" button. The resulting encoded string should appear in the results pane. The key/secret combination above yields the following base64 encoded string (yours will be different): eHZ6MWV2RlM0d0VFUFRHRUZQSEJvZzpMOHFxOVBaeVJnNmllS0dFS2hab2xHQzB2SldMdzhpRUo4OERSZHlPZw== Copy the base64 encoded string and paste somewhere you can make use of it in the next section. Test Twitter API Access Now you can test the string you generated above for its ability to query the Twitter API for a \"Bearer\" token, which can then be used to query for Twitter data. The easiest way to test is to use the application called cURL Open the Terminal on your computer and type the following at the command prompt: curl --version and then press enter. You should see the curl version print out in your terminal. If not, you will need to install the command-line application. If that is the case, use the curl download wizard @ https://curl.haxx.se/dlwiz/?type=bin In your browser, visit: https://curlbuilder.com/ In the form on that page, use the following settings: HTTP Method: POST URL: https://api.twitter.com/oauth2/token Body: grant_type=client_credentials Click on the \"Add Custom Header\" button . In the resulting fields, use Authorization for Header key and and then Basic base64string for Header value where base64string is the base64 encoded string you generated in the previous section. Scroll to the bottom of the page and find the \"here you are!\" field. Select all and copy the contents of the text box below. In your Terminal, paste what you just copied and press the ENTER key. Your computer should execute the cURL command, sending your base64string to the Twitter API for authorization and returning a JSON file similar to the following: { \"token_type\" : \"bearer\" , \"access_token\" : \"AAAAAAAAAdAAAAAO%2FnxQAAAAAAbZZuPjgaOoJcLhV8A%3DZ84ZCilzHuKvPXYqTl7fjQ216gCjrdT8hJTV1y7w1NMmw\" } Important The JSON above is for example purposes only; you will need to generate an access_token specific to your Twitter account. You will want to copy the access_token and keep it in a secure location. Now you can test querying a particular user's public Tweets with your access_token (per https://developer.twitter.com/en/docs/tweets/timelines/overview ) In your browser, return to: https://curlbuilder.com/ In the form on that page, use the following settings: HTTP Method: GET URL: https://api.twitter.com/1.1/statuses/user_timeline.json?count=1&screen_name=twitterapi Note If you wish, you can replace the screen_name of twitterapi with your personal Twitter screen name to query your own Twitter feed for its latest Tweet. Body: leave blank Click on the \"Add Custom Header\" button . In the resulting fields, use Authorization for Header key and and then Bearer access_token for Header value where access_token is what you copied in step #5 above. Scroll down and copy the entire contents of the generated cURL command. Paste them into your Terminal and press ENTER. If successful, the cURL command should return a long JSON object containing the latest tweet from the specified user whose screenname is twitterapi , as illustrated below: Arduino Sketch Finally we can set up the Arduino sketch necessary to query the Twitter API directly from the Feather M0. Create a new Arduino sketch by choosing File --> New from the main menu. Save it by choosing File --> Save and give it a memorable name, such as TwitterQuery Create a new tab in your sketch: Find the \u25be symbol in the upper-right of the Arduino interface and left-click on it. In the resulting pop-up, choose New Tab. (Alternatively, you can press SHIFT-\u2318-N) You will be prompted to enter a name for this new tab. Type: arduino_secrets.h and then click \"OK\". The new tab will appear in your IDE workspace. Copy and paste the following code into the arduino_secrets.h tab in your sketch: #define SECRET_SSID \"DukeOpen\" // your network SSID (name) #define SECRET_PASS \"\" // your network password; leave empty for open networks #define TWITTER_TOKEN \"base64 encoded API key/secret goes here\" [Recall that the base64 encoded string is what you produced above in the section entitled Encode Consumer API Key/Secret ] Return to the main tab of your Arduino sketch. Replace the contents of that tab with the code provided at this Github gist: Around line 20 of the main Arduino sketch there is a variable twitter_user where you can set the screen name of the Twitter user whose latest Tweet you'd like to query. Verify and upload the sketch to your Feather. If successful, both information about the specified Twitter user and their latest Tweet should print out to the Arduino serial monitor.","title":"Twitter API"},{"location":"circuits/twitter/#about-this-tutorial","text":"Some of your projects require querying the API of an online service -- such as [Instagram]((https://www.instagram.com/developer/), NASA , or OpenWeatherMap -- and then parsing the data sent back from the service. JSON (JavaScript Object Notation) is a common data format returned by API queries. In this tutorial you will explore how to request JSON data from an API using an HTTP GET request and then how to parse that data for use by your Feather. Specifically, this tutorial outlines how to query the Twitter API and its \"Tweet JSON\" data.","title":"About this Tutorial"},{"location":"circuits/twitter/#install-arduinojson-library","text":"First, install Benoit Blanchon's ArduinoJson library into the Arduino IDE. Proceed with the steps below and/or consult arduinojson.org's official documentation . Launch the Arduino application. From the main menu, choose Sketch --> Include Library --> Manage Libraries In the \"Filter your search...\" box, type JSON Scroll down until you find \"ArduinoJson by Benoit Blanchon\" Important Do NOT immediately click Install. The Library Manager lists the \"beta\" version by default, but for reliability, you will most likely want to use the latest \"production\" version. As of the of the writing of this tutorial, the latest version is: version 5.13.3 From the \"Version\" drop-down box, scroll down past all of the \"X.X-beta\" versions until you find the latest version non-beta version. Click on that version to select it. Finally, click the Install button and then Close once the library installation has completed.","title":"Install ArduinoJSON Library"},{"location":"circuits/twitter/#twitter-setup","text":"","title":"Twitter Setup"},{"location":"circuits/twitter/#developer-access","text":"To interact with Twitter's API, you will need a developer account and Twitter API keys. Go to https://twitter.com/login and sign in with your Twitter account credentials. Visit https://developer.twitter.com/en/apply/user to register your Twitter username for developer access. Your username should be selected by default. Click \"Continue.\" Next, select the \"I am requesting access for my own personal use\" radio button. Enter a name for your developer account or project and select Primary Country of Operation. Click \"Continue\" On the next screen, choose your use case (\"Student project / Learning to code\"). Describe your project, such as: 1. I am testing the Twitter API with an IoT device (Adafruit Feather M0) 2. I want my own new Tweets, new followers and likes to my Tweets to trigger functions on my device. (light LEDs, etc) 3. No, simply reading and responding to Twitter data 4. Content will not be displayed on device, except abstractly. [Of course, if you will display Twitter content (such as on an Arduino-connected LCD) you should say so here and describe its use case.] Select No for \"Will your product, service, or analysis make Twitter content or derived information available to a government entity?\" Read and accept the Terms of Service. Finally, check your email inbox for a verification email. In the email, click the \"Confirm Your Email\" button. Now you are ready to create your first Twitter app. Visit https://developer.twitter.com/en/apps and click on the \"Create an App\" button. Enter the App details (these can be modified later): Name: vms564s_app App Description: This app enables connectivity to an IoT device Website URL: https://aahvs.duke.edu Tell us how this app will be used: This app is for a class project for VMS564S Physical Computing and the Internet of Things at Duke University. Click the Create button. You will be taken to a summary page. Verify and/or edit the information as needed. Click on the Permissions tab. For our purposes, we only need \"Read-only\" access. If you want your Arduino app on the Feather to also be able to post Tweets under your account, choose \"Read and write\". Click \"Save\". Next, click on the \"Keys and Tokens\" tab. Under \"Consumer API keys\", click \"Regenerate\". This will generate both an API Key and API Secret Key that you will need for the next section of this tutorial. Leave this page open in your browser so you can access these in the next section. You can always return to find them via https://developer.twitter.com/en/apps","title":"Developer Access"},{"location":"circuits/twitter/#twitter-application-only-authentication","text":"For this tutorial, we will make use of Twitter's application-only authentication schema. In this schema, you will encode the API key and secret for your app and store it on the Feather. Then you will use these credentials to generate a \"Bearer\" token that will allow your Feather to make queries against the Twitter API.","title":"Twitter Application-only Authentication"},{"location":"circuits/twitter/#encode-consumer-api-keysecret","text":"The documentation specifies that you need to encode your access token and access token secret as a single \"RFC 1738- and Base64-encoded\" string. Note RFC 1738 encoding, also known as \"url safe\" encoding, will have no effect on the consumer key and secret at this time, but may in the future. You can encode here if necessary: https://www.freeformatter.com/url-encoder.html In a new browser window, visit: https://www.base64encode.org/ You will want to paste into the form your API key and secret in the following format, where key and secret are separated by a : with no spaces: consumerAPIkey:APIsecret Thus, the hypothetical consumer API key xvz1evFS4wEEPTGEFPHBog and secret L8qq9PZyRg6ieKGEKhZolGC0vJWLw8iEJ88DRdyOg would become: xvz1evFS4wEEPTGEFPHBog:L8qq9PZyRg6ieKGEKhZolGC0vJWLw8iEJ88DRdyOg Click the green \"> Encode <\" button. The resulting encoded string should appear in the results pane. The key/secret combination above yields the following base64 encoded string (yours will be different): eHZ6MWV2RlM0d0VFUFRHRUZQSEJvZzpMOHFxOVBaeVJnNmllS0dFS2hab2xHQzB2SldMdzhpRUo4OERSZHlPZw== Copy the base64 encoded string and paste somewhere you can make use of it in the next section.","title":"Encode Consumer API Key/Secret"},{"location":"circuits/twitter/#test-twitter-api-access","text":"Now you can test the string you generated above for its ability to query the Twitter API for a \"Bearer\" token, which can then be used to query for Twitter data. The easiest way to test is to use the application called cURL Open the Terminal on your computer and type the following at the command prompt: curl --version and then press enter. You should see the curl version print out in your terminal. If not, you will need to install the command-line application. If that is the case, use the curl download wizard @ https://curl.haxx.se/dlwiz/?type=bin In your browser, visit: https://curlbuilder.com/ In the form on that page, use the following settings: HTTP Method: POST URL: https://api.twitter.com/oauth2/token Body: grant_type=client_credentials Click on the \"Add Custom Header\" button . In the resulting fields, use Authorization for Header key and and then Basic base64string for Header value where base64string is the base64 encoded string you generated in the previous section. Scroll to the bottom of the page and find the \"here you are!\" field. Select all and copy the contents of the text box below. In your Terminal, paste what you just copied and press the ENTER key. Your computer should execute the cURL command, sending your base64string to the Twitter API for authorization and returning a JSON file similar to the following: { \"token_type\" : \"bearer\" , \"access_token\" : \"AAAAAAAAAdAAAAAO%2FnxQAAAAAAbZZuPjgaOoJcLhV8A%3DZ84ZCilzHuKvPXYqTl7fjQ216gCjrdT8hJTV1y7w1NMmw\" } Important The JSON above is for example purposes only; you will need to generate an access_token specific to your Twitter account. You will want to copy the access_token and keep it in a secure location. Now you can test querying a particular user's public Tweets with your access_token (per https://developer.twitter.com/en/docs/tweets/timelines/overview ) In your browser, return to: https://curlbuilder.com/ In the form on that page, use the following settings: HTTP Method: GET URL: https://api.twitter.com/1.1/statuses/user_timeline.json?count=1&screen_name=twitterapi Note If you wish, you can replace the screen_name of twitterapi with your personal Twitter screen name to query your own Twitter feed for its latest Tweet. Body: leave blank Click on the \"Add Custom Header\" button . In the resulting fields, use Authorization for Header key and and then Bearer access_token for Header value where access_token is what you copied in step #5 above. Scroll down and copy the entire contents of the generated cURL command. Paste them into your Terminal and press ENTER. If successful, the cURL command should return a long JSON object containing the latest tweet from the specified user whose screenname is twitterapi , as illustrated below:","title":"Test Twitter API Access"},{"location":"circuits/twitter/#arduino-sketch","text":"Finally we can set up the Arduino sketch necessary to query the Twitter API directly from the Feather M0. Create a new Arduino sketch by choosing File --> New from the main menu. Save it by choosing File --> Save and give it a memorable name, such as TwitterQuery Create a new tab in your sketch: Find the \u25be symbol in the upper-right of the Arduino interface and left-click on it. In the resulting pop-up, choose New Tab. (Alternatively, you can press SHIFT-\u2318-N) You will be prompted to enter a name for this new tab. Type: arduino_secrets.h and then click \"OK\". The new tab will appear in your IDE workspace. Copy and paste the following code into the arduino_secrets.h tab in your sketch: #define SECRET_SSID \"DukeOpen\" // your network SSID (name) #define SECRET_PASS \"\" // your network password; leave empty for open networks #define TWITTER_TOKEN \"base64 encoded API key/secret goes here\" [Recall that the base64 encoded string is what you produced above in the section entitled Encode Consumer API Key/Secret ] Return to the main tab of your Arduino sketch. Replace the contents of that tab with the code provided at this Github gist: Around line 20 of the main Arduino sketch there is a variable twitter_user where you can set the screen name of the Twitter user whose latest Tweet you'd like to query. Verify and upload the sketch to your Feather. If successful, both information about the specified Twitter user and their latest Tweet should print out to the Arduino serial monitor.","title":"Arduino Sketch"},{"location":"machine-learning/pytorch-dcgan/","text":"This document outlines how to implement the PyTorch DCGAN faces tutorial on the Duke Compute Cluster (DCC) . It assumes you already have GPU access to the DCC (through, for example, the Duke AI for Art Competition ). More generally, it outlines how to instantiate and launch a Jupyter Notebook environment on a DCC GPU module. Part I: Test Connection to the DCC Open Terminal. At the prompt, type the following (replacing netID with your own Duke NetID): ssh netID@dcc-slogin.oit.duke.edu When prompted, type your Duke shibboleth netID password. If successful, you will be authenticated to one of three \"front-end\" machines that serve as a gateway to the DCC: dcc-slogin-01.oit.duke.edu dcc-slogin-02.oit.duke.edu dcc-slogin-03.oit.duke.edu Type exit at the prompt to disconnect from the DCC. Part II: Download Training Data / SFTP to DCC The PyTorch tutorial makes use of the Large-scale CelebFaces Attributes (CelebA) Dataset . It consists of 202,599 images of celebrity faces. This dataset of images will be used to train the GAN so that it can generate a fake set of images. Additionally, PyTorch has made available all of the code from its tutorial as a Jupyter Notebook file. At the time of this writing, the CelebA dataset is available on Google Drive. Download the ~1.3 GB CelebA zip file to your computer's harddrive (local machine). Download the DCGAN Jupyter Notebook to your local machine. In Terminal, type the following to open an SFTP (secure file transfer protocol) connection to the DCC: sftp netID@dcc-slogin.oit.duke.edu You will be prompted to provide your Duke shibboleth netID password. Important If you are connecting from off-campus, you must first run the Duke VPN Upon successful connection, you will be presented with the following prompt: sftp> To push the Jupyter Notebook file to the DCC, type the following at the sftp> prompt: put /path/to/dcgan_faces_tutorial.ipynb Tip You can drag and drop the file into Terminal after typing put to auto-enter the full path. To push the CelebA Faces dataset to the DCC, type the following at the sftp> prompt: put path/to/img_align_celeba.zip Uploading this large file may take several minutes. When the file transfer is complete, type exit at the sftp> prompt to close the SFTP connection to the DCC. Part III: Unzipping the Training Data In terminal, open an SSH connection to the DCC, entering your password when prompted: ssh netID@dcc-slogin.oit.duke.edu Confirm that the files you uploaded in part II exist on the server. At the prompt, type: ls -hs The output should be: total 1.7G -rw-r--r--. 1 netID grp 7.5M Date time dcgan_faces_tutorial.ipynb -rw-r--r--. 1 netID grp 1.4G Date time img_align_celeba.zip The PyTorch DCGAN tutorial suggests that the dataset should be unzipped into a data root of data/celeba . Create these directories with the following command: mkdir -p data/celeba Finally, unzip the CelabA Faces dataset: unzip img_align_celeba.zip -d data/celeba The progress of the unzip action will unfold in the Terminal. This may take several minutes to complete. Remember, the zip file contains over 200,000 images! Part IV: Invoke Jupyter Notebook This section of the tutorial explains how to invoke a Jupyter Notebook server in the DCC GPU environment and access it with your web browser. If you're working through this tutorial from start to finish, you're already logged into the DCC. If not, launch Terminal and enter ssh netID@dcc-slogin.oit.duke.edu Note that when you log into the DCC you're passed off to one of three machines: dcc-slogin-01.oit.duke.edu dcc-slogin-02.oit.duke.edu dcc-slogin-03.oit.duke.edu The machine you're authenticated to will be indicated at the Terminal prompt. In the example below, the user is logged into cc-slogin-02.oit.duke.edu: netID@dcc-slogin-02 ~ $ Next you'll want to invoke the GPU environment with the following command: srun -p artai-gpu --account=artai --gres=gpu:1 -c 10 --mem=10G --pty bash -i This command invokes an interactive SLURM session with the command srun on the \"artai-gpu\" partition (created for participants in the Duke AI for Art Competition ), reserving 1 gpu ( --gres=gpu:1 ), 10 CPU cores per process ( -c 10 ) and 10G memory ( --mem=10G ). It then opens an interactive bash session in that environment ( --pty bash -i ). The SLURM workload manager will then queue your request for a GPU and then wait for available resources. srun: job 46023771 queued and waiting for resources Successful allocation will be indicated: srun: job 46023771 has been allocated resources and the Terminal prompt will indicate which GPU node you are allocated: netID@dcc-dsplus-gpu-02 ~ $ Load the python-gpu module (virtual environment): module load Python-GPU/3.6.5 Set the runtime environment for Jupyter: export XDG_RUNTIME_DIR=\"\" Set a port number through which you wish to access Jupyter (use a unique set of 5 integers): export myport=48477 Print out the SSH tunnel information, copying the results of the following command: echo \"ssh -NL $myport:$(hostname):$myport $USER@dcc-slogin.oit.duke.edu\" Sample results: ssh -NL 48477:dcc-dsplus-gpu-02:48477 netID@dcc-slogin.oit.duke.edu Establish an SSH tunnel in a new Terminal session: Press command-t to open a new tab in Terminal. At the new prompt, paste the output you copied in step 8 above. ssh -NL 48477:dcc-dsplus-gpu-02:48477 netID@dcc-slogin.oit.duke.edu You will be prompted for your password. Upon password authetnication, it will seem like nothing is happening. Leaving this tab open, return to the first tab (the GPU environment) Launch Jupyter Notbeook server: jupyter-notebook --no-browser --port=$myport --ip='0.0.0.0' It may take a few moments for the Jupyter server to initialize. Once it does, it will indicate a localhost URL with the port you specified and a long token string. Sample output: Copy/paste this URL into your browser when you connect for the first time, to login with a token: http://dcc-dsplus-gpu-02:45678/?token=6e254b18523a165f7d1dd07e..... Copy the URL and paste into your web brower's address bar, but REPLACE dcc-dsplus-gpu-0X with localhost : http://localhost:45678/?token=6e254b18523a165f7d1dd07e..... A web interface to your Jupyter Notebook environment should open in your web browser: Part V: Executing a Jupyter Notebook To open a Jupyter notebook, simply click on its filename in the browser window. By default, it will load in an \"untrusted\" state. In this mode, clicking the \"Run\" button will step through each \"cell\" of the code, pausing at the next until you again click \"Run.\" After successfully going through each cell, the next launch of the Notebook will execute the code without user intervention.","title":"PyTorch DCGAN"},{"location":"machine-learning/pytorch-dcgan/#part-i-test-connection-to-the-dcc","text":"Open Terminal. At the prompt, type the following (replacing netID with your own Duke NetID): ssh netID@dcc-slogin.oit.duke.edu When prompted, type your Duke shibboleth netID password. If successful, you will be authenticated to one of three \"front-end\" machines that serve as a gateway to the DCC: dcc-slogin-01.oit.duke.edu dcc-slogin-02.oit.duke.edu dcc-slogin-03.oit.duke.edu Type exit at the prompt to disconnect from the DCC.","title":"Part I:  Test Connection to the DCC"},{"location":"machine-learning/pytorch-dcgan/#part-ii-download-training-data-sftp-to-dcc","text":"The PyTorch tutorial makes use of the Large-scale CelebFaces Attributes (CelebA) Dataset . It consists of 202,599 images of celebrity faces. This dataset of images will be used to train the GAN so that it can generate a fake set of images. Additionally, PyTorch has made available all of the code from its tutorial as a Jupyter Notebook file. At the time of this writing, the CelebA dataset is available on Google Drive. Download the ~1.3 GB CelebA zip file to your computer's harddrive (local machine). Download the DCGAN Jupyter Notebook to your local machine. In Terminal, type the following to open an SFTP (secure file transfer protocol) connection to the DCC: sftp netID@dcc-slogin.oit.duke.edu You will be prompted to provide your Duke shibboleth netID password. Important If you are connecting from off-campus, you must first run the Duke VPN Upon successful connection, you will be presented with the following prompt: sftp> To push the Jupyter Notebook file to the DCC, type the following at the sftp> prompt: put /path/to/dcgan_faces_tutorial.ipynb Tip You can drag and drop the file into Terminal after typing put to auto-enter the full path. To push the CelebA Faces dataset to the DCC, type the following at the sftp> prompt: put path/to/img_align_celeba.zip Uploading this large file may take several minutes. When the file transfer is complete, type exit at the sftp> prompt to close the SFTP connection to the DCC.","title":"Part II:  Download Training Data / SFTP to DCC"},{"location":"machine-learning/pytorch-dcgan/#part-iii-unzipping-the-training-data","text":"In terminal, open an SSH connection to the DCC, entering your password when prompted: ssh netID@dcc-slogin.oit.duke.edu Confirm that the files you uploaded in part II exist on the server. At the prompt, type: ls -hs The output should be: total 1.7G -rw-r--r--. 1 netID grp 7.5M Date time dcgan_faces_tutorial.ipynb -rw-r--r--. 1 netID grp 1.4G Date time img_align_celeba.zip The PyTorch DCGAN tutorial suggests that the dataset should be unzipped into a data root of data/celeba . Create these directories with the following command: mkdir -p data/celeba Finally, unzip the CelabA Faces dataset: unzip img_align_celeba.zip -d data/celeba The progress of the unzip action will unfold in the Terminal. This may take several minutes to complete. Remember, the zip file contains over 200,000 images!","title":"Part III:  Unzipping the Training Data"},{"location":"machine-learning/pytorch-dcgan/#part-iv-invoke-jupyter-notebook","text":"This section of the tutorial explains how to invoke a Jupyter Notebook server in the DCC GPU environment and access it with your web browser. If you're working through this tutorial from start to finish, you're already logged into the DCC. If not, launch Terminal and enter ssh netID@dcc-slogin.oit.duke.edu Note that when you log into the DCC you're passed off to one of three machines: dcc-slogin-01.oit.duke.edu dcc-slogin-02.oit.duke.edu dcc-slogin-03.oit.duke.edu The machine you're authenticated to will be indicated at the Terminal prompt. In the example below, the user is logged into cc-slogin-02.oit.duke.edu: netID@dcc-slogin-02 ~ $ Next you'll want to invoke the GPU environment with the following command: srun -p artai-gpu --account=artai --gres=gpu:1 -c 10 --mem=10G --pty bash -i This command invokes an interactive SLURM session with the command srun on the \"artai-gpu\" partition (created for participants in the Duke AI for Art Competition ), reserving 1 gpu ( --gres=gpu:1 ), 10 CPU cores per process ( -c 10 ) and 10G memory ( --mem=10G ). It then opens an interactive bash session in that environment ( --pty bash -i ). The SLURM workload manager will then queue your request for a GPU and then wait for available resources. srun: job 46023771 queued and waiting for resources Successful allocation will be indicated: srun: job 46023771 has been allocated resources and the Terminal prompt will indicate which GPU node you are allocated: netID@dcc-dsplus-gpu-02 ~ $ Load the python-gpu module (virtual environment): module load Python-GPU/3.6.5 Set the runtime environment for Jupyter: export XDG_RUNTIME_DIR=\"\" Set a port number through which you wish to access Jupyter (use a unique set of 5 integers): export myport=48477 Print out the SSH tunnel information, copying the results of the following command: echo \"ssh -NL $myport:$(hostname):$myport $USER@dcc-slogin.oit.duke.edu\" Sample results: ssh -NL 48477:dcc-dsplus-gpu-02:48477 netID@dcc-slogin.oit.duke.edu Establish an SSH tunnel in a new Terminal session: Press command-t to open a new tab in Terminal. At the new prompt, paste the output you copied in step 8 above. ssh -NL 48477:dcc-dsplus-gpu-02:48477 netID@dcc-slogin.oit.duke.edu You will be prompted for your password. Upon password authetnication, it will seem like nothing is happening. Leaving this tab open, return to the first tab (the GPU environment) Launch Jupyter Notbeook server: jupyter-notebook --no-browser --port=$myport --ip='0.0.0.0' It may take a few moments for the Jupyter server to initialize. Once it does, it will indicate a localhost URL with the port you specified and a long token string. Sample output: Copy/paste this URL into your browser when you connect for the first time, to login with a token: http://dcc-dsplus-gpu-02:45678/?token=6e254b18523a165f7d1dd07e..... Copy the URL and paste into your web brower's address bar, but REPLACE dcc-dsplus-gpu-0X with localhost : http://localhost:45678/?token=6e254b18523a165f7d1dd07e..... A web interface to your Jupyter Notebook environment should open in your web browser:","title":"Part IV:  Invoke Jupyter Notebook"},{"location":"machine-learning/pytorch-dcgan/#part-v-executing-a-jupyter-notebook","text":"To open a Jupyter notebook, simply click on its filename in the browser window. By default, it will load in an \"untrusted\" state. In this mode, clicking the \"Run\" button will step through each \"cell\" of the code, pausing at the next until you again click \"Run.\" After successfully going through each cell, the next launch of the Notebook will execute the code without user intervention.","title":"Part V:  Executing a Jupyter Notebook"},{"location":"web-multimedia/lab1/","text":"Due: First Lab Section meeting of the week of September 2 My First Webpage In this first lab assignment, you will mark up a valid HTML5 webpage that introduces yourself to your instructors and classmates. Requirements for a \u2713 Use the following checklist to make sure you meet the minimum requirements to earn a \u2713 for this assignment. Scroll down to the Reach Goals section below for suggestions to extend your work to attain a \u2713+ . In Brackets or text editor of your choice, create a single html page with a file name of about-me.html Warning Be sure to save your file early and often so that you don't lose your work. It is also a good idea to create a single folder on your computer where you will store local copies of all of your labs throughout the semester. (Later we'll cover Github , which will give you an additional mechanism for backing up and versioning your files.) Use the HTML5 boilerplate introduced in the first lecture as a starting point: <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < title > Title of the document </ title > </ head > < body > </ body > </ html > Use proper semantic markup to give your page a hierarchical structure (e.g. an <h1> element for the main heading of the page, and <h2> and <h3> elements to designate subheadings). Use a variety of inline and block HTML elements in your page: paragraphs, ordered or unordered lists, horizontal rules, underline and highlight text, etc. Tip Some good resources to consult for the basics of HTML markup are: w3schools.com's HTML5 tutorial Mozilla's HTML Cheat Sheet HTML.com's HTML Cheat Sheet PDF Your page should contain at least one hyperlink to an external webpage. Display at least one image on your page using the <img> element. Find an image online that you like and determine its absolute file path. Use that path in the src attribute of the <img> element. Use the alt attribute of the <img> element to describe the image for those who might be unable to see it. Tip To determine the absolute file path of an image in a webpage, right-click on it in your browser and choose \"View Image\" (in Firefox) or \"Open Image in New Tab\" (in Chrome). You can then copy the full URL of the image as it appears in the browser's address bar. Your html file should be transferred to the public_html directory of your people.duke.edu CIFS space using FileZilla. Your file should be viewable at https://people.duke.edu/~yourNetID/about-me.html (e.g. if your Duke netID is wilma , then your page should be viewable at https://people.duke.edu/~wilma/about-me.html ). Email your instructor with the link to your first webpage! Reach Goals for a \u2713+ To earn a \u2713+ on this assignment, push yourself to achieve at least two of the following: Add some CSS inside the <style></style> element in the <head> section of your document to modify the design of your page (text color, text font family, page background color, etc) Determine which attribute can be added to a link tag in order to cause the linked page to open in a new tab in your browser. Use the HTML markup for a definition list to define these HTML concepts: relative file path, absolute file path. Properly use the HTML5 <section> element in your page's HTML. FileZilla SFTP Instructions for Duke CIFS Space \"people.duke.edu\" The FileZilla application will allow you to transfer your about-me.html file from your computer's harddrive to your public_html directory on the people.duke.edu webserver. Launch FileZilla. In the QuickConnect bar, enter the following: Host: login.oit.duke.edu Username: <your netID> Password: <your netID password> Port: 22 Click the Quickconnect button to initiate a connection. Important If you are connecting from an off-campus locaton, you must have first established a connection through Duke's VPN which also requires that you have set up multifactor authentication . You may be prompted with a box stating: \"The server's host key is unknown. You have no guarantee that the server is the computer you think it is.\" You can check the box to allow for this connection in the future, without any warning. Once you are authenticated to the webserver, you will see your computer's file directory on the left side of the interface (Local Site) and your CIFS space on the right. On the right side of the interface, set the Remote site path to: /winhomes/<netID>/public_html by appending /public_html and hitting the key. On the left side of the interface, navigate to the folder on your computer where you saved your about-me.html file. Right-click on the file and choose \"Upload\" to upload the file to your public_html folder. Check your success at https://people.duke.edu/~netID/about-me.html Note Next time you want to connect to your CIFS space through FileZilla, you can access your previous settings in the Quickconnect toolbar by clicking the \u25bc arrow next to the Quickconnect button to access a saved session setting:","title":"Lab 1"},{"location":"web-multimedia/lab1/#my-first-webpage","text":"In this first lab assignment, you will mark up a valid HTML5 webpage that introduces yourself to your instructors and classmates.","title":"My First Webpage"},{"location":"web-multimedia/lab1/#requirements-for-a","text":"Use the following checklist to make sure you meet the minimum requirements to earn a \u2713 for this assignment. Scroll down to the Reach Goals section below for suggestions to extend your work to attain a \u2713+ . In Brackets or text editor of your choice, create a single html page with a file name of about-me.html Warning Be sure to save your file early and often so that you don't lose your work. It is also a good idea to create a single folder on your computer where you will store local copies of all of your labs throughout the semester. (Later we'll cover Github , which will give you an additional mechanism for backing up and versioning your files.) Use the HTML5 boilerplate introduced in the first lecture as a starting point: <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < title > Title of the document </ title > </ head > < body > </ body > </ html > Use proper semantic markup to give your page a hierarchical structure (e.g. an <h1> element for the main heading of the page, and <h2> and <h3> elements to designate subheadings). Use a variety of inline and block HTML elements in your page: paragraphs, ordered or unordered lists, horizontal rules, underline and highlight text, etc. Tip Some good resources to consult for the basics of HTML markup are: w3schools.com's HTML5 tutorial Mozilla's HTML Cheat Sheet HTML.com's HTML Cheat Sheet PDF Your page should contain at least one hyperlink to an external webpage. Display at least one image on your page using the <img> element. Find an image online that you like and determine its absolute file path. Use that path in the src attribute of the <img> element. Use the alt attribute of the <img> element to describe the image for those who might be unable to see it. Tip To determine the absolute file path of an image in a webpage, right-click on it in your browser and choose \"View Image\" (in Firefox) or \"Open Image in New Tab\" (in Chrome). You can then copy the full URL of the image as it appears in the browser's address bar. Your html file should be transferred to the public_html directory of your people.duke.edu CIFS space using FileZilla. Your file should be viewable at https://people.duke.edu/~yourNetID/about-me.html (e.g. if your Duke netID is wilma , then your page should be viewable at https://people.duke.edu/~wilma/about-me.html ). Email your instructor with the link to your first webpage!","title":"Requirements for a &#10003;"},{"location":"web-multimedia/lab1/#reach-goals-for-a","text":"To earn a \u2713+ on this assignment, push yourself to achieve at least two of the following: Add some CSS inside the <style></style> element in the <head> section of your document to modify the design of your page (text color, text font family, page background color, etc) Determine which attribute can be added to a link tag in order to cause the linked page to open in a new tab in your browser. Use the HTML markup for a definition list to define these HTML concepts: relative file path, absolute file path. Properly use the HTML5 <section> element in your page's HTML.","title":"Reach Goals for a &#10003;+"},{"location":"web-multimedia/lab1/#filezilla-sftp-instructions-for-duke-cifs-space-peopledukeedu","text":"The FileZilla application will allow you to transfer your about-me.html file from your computer's harddrive to your public_html directory on the people.duke.edu webserver. Launch FileZilla. In the QuickConnect bar, enter the following: Host: login.oit.duke.edu Username: <your netID> Password: <your netID password> Port: 22 Click the Quickconnect button to initiate a connection. Important If you are connecting from an off-campus locaton, you must have first established a connection through Duke's VPN which also requires that you have set up multifactor authentication . You may be prompted with a box stating: \"The server's host key is unknown. You have no guarantee that the server is the computer you think it is.\" You can check the box to allow for this connection in the future, without any warning. Once you are authenticated to the webserver, you will see your computer's file directory on the left side of the interface (Local Site) and your CIFS space on the right. On the right side of the interface, set the Remote site path to: /winhomes/<netID>/public_html by appending /public_html and hitting the key. On the left side of the interface, navigate to the folder on your computer where you saved your about-me.html file. Right-click on the file and choose \"Upload\" to upload the file to your public_html folder. Check your success at https://people.duke.edu/~netID/about-me.html Note Next time you want to connect to your CIFS space through FileZilla, you can access your previous settings in the Quickconnect toolbar by clicking the \u25bc arrow next to the Quickconnect button to access a saved session setting:","title":"FileZilla SFTP Instructions for Duke CIFS Space \"people.duke.edu\""},{"location":"web-multimedia/lab2/","text":"Due: First Lab Section meeting of the week of September 9 th Site Architecture - First Steps Overview In this second lab assignment, you will accomplish several things: Set up the file/folder structure for your midterm website project, a site that will serve as a platform for submitting all lab homework going forward. Archive your first about-me.html webpage so that it is accessible at the following URL (where netID is your netiD): https://people.duke.edu/~netID/labs/01/index.html Develop a new webpage, using HTML5 sectioning tags and what you have learned about CSS layout and the Box Model: A landing page that is accessible at the following URL (again, where netID is your netiD): https://people.duke.edu/~netID/ Part 1: Public_html Folder Structure Setup Find the folder on your local harddrive where you saved your first webpage, about-me.html . Within that directory, create folders with these precise names, all lower-case, no spaces: css images js labs final-project Within the labs folder, create a sub-folder, named lab01 . Move your about-me.html file into the lab01 subfolder. Rename the about-me.html file as index.html The directory structure should look like this: Now, \"push\" this directory structure to your public_html directory using FileZilla: Launch FileZilla. Clicking the \u25bc arrow next to the Quickconnect button to access your saved connection settings for accessing via SFTP the server login.oit.duke.edu on port 22 with your netID and password. Make sure you're in the public_html folder on the remote server (right-hand pane). You should see your original about-me.html file in the root of that directory. Find in the left-hand pane the local directory containing the file-folder structure you set up earlier. Click and drag the five new folders from the left pane to the right pane to upload them into the public_html folder. If all goes well, when you go to https://people.duke.edu/~netID/ you should see the directory struture you just created (e.g. five folders - css , final-project , images , js , labs -- and the original about-me.html page.) Visiting https://people.duke.edu/~netID/about-me.html should still display your first lab assignment. Visiting https://people.duke.edu/~netID/labs/lab01/ should display the archived version of your about-me.html page. Finally, since you renamed and moved the about-me.html page on your local directory, you'll need to download it from the public_html directory so that your local and remote files and folders are in sync. Downloading a file in FileZilla is simple: Find the file in your remote public_html directory (right-hand pane) and drag the file into your local working folder (left-hand pane). The structure of your local working folder on your harddrive should now look like this: Note This is a good time to consider your understanding of the difference and relation between the files stored in the public_html folder of your CIFS share (e.g. the webserver people.duke.edu ) and the files stored on your local harddrive where you are editing the files. These files are not kept in sync by default when using FileZilla, but you want to ensure that they are identical at the start of any significant editing session or else you risk introducing a situation where your site works locally but not on the webserver, or vice versa. If you need clarification on this, please discuss with your lab instructors. Part 2: Landing Page In this second part of the lab assignment, you will create a new design for the \"homepage\" of your https://people.duke.edu/~netID site. Here you will make use of HTML5 sectioning tags to define a semantic structure to your HTML and then leverage what you are learning with CSS to create a more advanced design and layout for that page. Here you should draw on the information presented in the chapters assigned from Duckett (2011) to style text, color, layout and images. Requirements for a \u2713 Use the following checklist to make sure you meet the minimum requirements to earn a \u2713 for this assignment. Scroll down to the Reach Goals section below for suggestions to extend your work to attain a \u2713+ . Launch Brackets. Go to File \u2192 Open Folder and find your local site folder. Click the Open button to select that folder as your working directory. Start a new file (File \u2192 New). Save it as index.html in the root of your local site folder on your harddrive. Use the following as your template html: <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < title > Title of the document </ title > < link href = \"css/main.css\" rel = \"stylesheet\" > </ head > < body > < header > < nav > Main menu Goes Here </ nav > </ header > < main > < section > One or more sections here. Be sure to use a new &lt; section &gt; element for each section. </ section > < aside > Sidebar or aside content here </ aside > </ main > < footer > Footer content here </ footer > </ body > </ html > Important Note that the <link> element's href is a file relative path and that has changed from the original posting of this document. Root relative paths are not working consistently on people.duke.edu and we are trying to ascertain why in consultation with OIT. Root relative paths seem to work for an <img> element's src attribute, but not a <link> element's href attribute. Using semantically correct HTML, add the following content to the template: Links in the <nav> section: A link ( <a> element) with text content of Home and an href attribute that points to index.html in the root of your site (e.g. this should point to the very same page that you're editing right now.) A link ( <a> element) with text content of About Me that points to the about-me.html page in the root of your site. In the <section> section element(s), use headings and paragraphs to explain what this site is, an archive of your work for Fundamentals of Web-Based Communication. Use the <aside> section element to briefly introduce yourself. Use a heading element for a title that is appropriate to the context of other headings on your page, and then pen a sentence or two about yourself. End with a link to your about-me.html page. Example: < h2 > A Little Bit About Me </ h2 > < p > I am a 20th year Duke student who loves apple pie < i > &agrave; la mode </ i > and code. < p > < p >< a href = \"about-me.html\" > Read More About Me </ a ></ p > In the <footer> section element, create a copyright statement that uses the html entity code for the copyright symbol. Next, you'll use a linked CSS file to style your homepage. You will use this file for styling all of the pages on your midterm site. Create a new file in Brackets and save it as main.css in the css folder within your local site directory on your harddrive. Since you linked to it in the <head> of your HTML file, any changes you make to this CSS file should automatically update when previewing your page in Brackets. Test this by adding the following CSS to the main.css file and saving it: * { margin : 20 px ; border : 1 px solid #ff0000 ; } You should see the margins of your page increase as well as around each element in your page. All elements should be enclosed in red-bordered box. Using the proper syntax for comments in CSS, /* comment goes here */ , comment out that style declaration but leave it at the top of your page to use as needed for further testing. Use what you've learned about CSS for styling fonts, page layout, text, and images. Continue researching CSS selectors and the properties that CSS allows you to modify as you shape the look and feel of your site. Finally, SFTP these two files -- index.html and css/main.css to your public_html directory so that your homepage is visible at the root of your people.duke.edu URL and your CSS file resides in the css folder on the server. Reach Goals Here are some reach goals to tackle once you have begun to create a site aesthetic that you are happy with: Familiarize yourself with the CSS float property and use what you learn change the default HTML flow of your document. For example, you may wish to convert your <nav> section into a vertical menu that is positioned on the left-hand side of the page. Or float your <aside> on the right. Familiarize yourself with the CSS positioning properties and use what you learn to make your header or footer stick to the top or bottom of the page. Use CSS link states to transform your navigation links into buttons that dynamically change when a user mouses over or clicks on them.","title":"Lab 2"},{"location":"web-multimedia/lab2/#site-architecture-first-steps","text":"","title":"Site Architecture - First Steps"},{"location":"web-multimedia/lab2/#overview","text":"In this second lab assignment, you will accomplish several things: Set up the file/folder structure for your midterm website project, a site that will serve as a platform for submitting all lab homework going forward. Archive your first about-me.html webpage so that it is accessible at the following URL (where netID is your netiD): https://people.duke.edu/~netID/labs/01/index.html Develop a new webpage, using HTML5 sectioning tags and what you have learned about CSS layout and the Box Model: A landing page that is accessible at the following URL (again, where netID is your netiD): https://people.duke.edu/~netID/","title":"Overview"},{"location":"web-multimedia/lab2/#part-1-public_html-folder-structure-setup","text":"Find the folder on your local harddrive where you saved your first webpage, about-me.html . Within that directory, create folders with these precise names, all lower-case, no spaces: css images js labs final-project Within the labs folder, create a sub-folder, named lab01 . Move your about-me.html file into the lab01 subfolder. Rename the about-me.html file as index.html The directory structure should look like this: Now, \"push\" this directory structure to your public_html directory using FileZilla: Launch FileZilla. Clicking the \u25bc arrow next to the Quickconnect button to access your saved connection settings for accessing via SFTP the server login.oit.duke.edu on port 22 with your netID and password. Make sure you're in the public_html folder on the remote server (right-hand pane). You should see your original about-me.html file in the root of that directory. Find in the left-hand pane the local directory containing the file-folder structure you set up earlier. Click and drag the five new folders from the left pane to the right pane to upload them into the public_html folder. If all goes well, when you go to https://people.duke.edu/~netID/ you should see the directory struture you just created (e.g. five folders - css , final-project , images , js , labs -- and the original about-me.html page.) Visiting https://people.duke.edu/~netID/about-me.html should still display your first lab assignment. Visiting https://people.duke.edu/~netID/labs/lab01/ should display the archived version of your about-me.html page. Finally, since you renamed and moved the about-me.html page on your local directory, you'll need to download it from the public_html directory so that your local and remote files and folders are in sync. Downloading a file in FileZilla is simple: Find the file in your remote public_html directory (right-hand pane) and drag the file into your local working folder (left-hand pane). The structure of your local working folder on your harddrive should now look like this: Note This is a good time to consider your understanding of the difference and relation between the files stored in the public_html folder of your CIFS share (e.g. the webserver people.duke.edu ) and the files stored on your local harddrive where you are editing the files. These files are not kept in sync by default when using FileZilla, but you want to ensure that they are identical at the start of any significant editing session or else you risk introducing a situation where your site works locally but not on the webserver, or vice versa. If you need clarification on this, please discuss with your lab instructors.","title":"Part 1: Public_html Folder Structure Setup"},{"location":"web-multimedia/lab2/#part-2-landing-page","text":"In this second part of the lab assignment, you will create a new design for the \"homepage\" of your https://people.duke.edu/~netID site. Here you will make use of HTML5 sectioning tags to define a semantic structure to your HTML and then leverage what you are learning with CSS to create a more advanced design and layout for that page. Here you should draw on the information presented in the chapters assigned from Duckett (2011) to style text, color, layout and images.","title":"Part 2:  Landing Page"},{"location":"web-multimedia/lab2/#requirements-for-a","text":"Use the following checklist to make sure you meet the minimum requirements to earn a \u2713 for this assignment. Scroll down to the Reach Goals section below for suggestions to extend your work to attain a \u2713+ . Launch Brackets. Go to File \u2192 Open Folder and find your local site folder. Click the Open button to select that folder as your working directory. Start a new file (File \u2192 New). Save it as index.html in the root of your local site folder on your harddrive. Use the following as your template html: <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < title > Title of the document </ title > < link href = \"css/main.css\" rel = \"stylesheet\" > </ head > < body > < header > < nav > Main menu Goes Here </ nav > </ header > < main > < section > One or more sections here. Be sure to use a new &lt; section &gt; element for each section. </ section > < aside > Sidebar or aside content here </ aside > </ main > < footer > Footer content here </ footer > </ body > </ html > Important Note that the <link> element's href is a file relative path and that has changed from the original posting of this document. Root relative paths are not working consistently on people.duke.edu and we are trying to ascertain why in consultation with OIT. Root relative paths seem to work for an <img> element's src attribute, but not a <link> element's href attribute. Using semantically correct HTML, add the following content to the template: Links in the <nav> section: A link ( <a> element) with text content of Home and an href attribute that points to index.html in the root of your site (e.g. this should point to the very same page that you're editing right now.) A link ( <a> element) with text content of About Me that points to the about-me.html page in the root of your site. In the <section> section element(s), use headings and paragraphs to explain what this site is, an archive of your work for Fundamentals of Web-Based Communication. Use the <aside> section element to briefly introduce yourself. Use a heading element for a title that is appropriate to the context of other headings on your page, and then pen a sentence or two about yourself. End with a link to your about-me.html page. Example: < h2 > A Little Bit About Me </ h2 > < p > I am a 20th year Duke student who loves apple pie < i > &agrave; la mode </ i > and code. < p > < p >< a href = \"about-me.html\" > Read More About Me </ a ></ p > In the <footer> section element, create a copyright statement that uses the html entity code for the copyright symbol. Next, you'll use a linked CSS file to style your homepage. You will use this file for styling all of the pages on your midterm site. Create a new file in Brackets and save it as main.css in the css folder within your local site directory on your harddrive. Since you linked to it in the <head> of your HTML file, any changes you make to this CSS file should automatically update when previewing your page in Brackets. Test this by adding the following CSS to the main.css file and saving it: * { margin : 20 px ; border : 1 px solid #ff0000 ; } You should see the margins of your page increase as well as around each element in your page. All elements should be enclosed in red-bordered box. Using the proper syntax for comments in CSS, /* comment goes here */ , comment out that style declaration but leave it at the top of your page to use as needed for further testing. Use what you've learned about CSS for styling fonts, page layout, text, and images. Continue researching CSS selectors and the properties that CSS allows you to modify as you shape the look and feel of your site. Finally, SFTP these two files -- index.html and css/main.css to your public_html directory so that your homepage is visible at the root of your people.duke.edu URL and your CSS file resides in the css folder on the server.","title":"Requirements for a &#10003;"},{"location":"web-multimedia/lab2/#reach-goals","text":"Here are some reach goals to tackle once you have begun to create a site aesthetic that you are happy with: Familiarize yourself with the CSS float property and use what you learn change the default HTML flow of your document. For example, you may wish to convert your <nav> section into a vertical menu that is positioned on the left-hand side of the page. Or float your <aside> on the right. Familiarize yourself with the CSS positioning properties and use what you learn to make your header or footer stick to the top or bottom of the page. Use CSS link states to transform your navigation links into buttons that dynamically change when a user mouses over or clicks on them.","title":"Reach Goals"},{"location":"web-multimedia/lab3/","text":"Due: First Lab Section meeting of the week of September 16 th Inline-Block Gallery Overview In this third lab assignment, you will create a mock-up of a gallery page and explore the use of dummy content generators. Dummy content generators create fake content to use in your mockups so that you can focus on typography, layout, and color using CSS. Specifically, the top of your gallery mockup page will display a title \u2014 My First Gallery Mockup \u2014 in a block-level container with a gradient background. Beneath that, the remainder of your content should be contained with a 960 pixel box that is horizontally centered on the page. Inside that container, mockup will display two paragraphs of dummy text and will float a large image to the left of the second paragraph, with the text flowing around the right and bottom of the image. Below that, a subtitle will announce the \"Gallery\" section and you will then display nine (9) to fifteen (15) image thumbnails Requirements for a \u2713 Use the following step-by-step to make sure you meet the minimum requirements to earn a \u2713 for this assignment. Scroll down to the Reach Goals section below for suggestions to extend your work to attain a \u2713+ . Launch Brackets. Go to File \u2192 Open Folder and find your local site folder. Click the Open button to select that folder as your working directory. In the left-hand pane, fine your labs folder. Right-click on it and choose \"New Folder\" to create a new folder inside your labs folder. Name it lab03 . Start a new file (File \u2192 New). Save it as index.html in the newly created lab03 folder. Use the following as your template html: <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < title > Gallery Mockup </ title > < style > /* Use the style element in the <head> for this lab assignment */ </ style > </ head > < body > < header > </ header > < main > </ main > < footer > </ footer > </ body > </ html > The <header> section: should display as a block-level element with no margin between the element and the edge of the browser window but a bottom margin of 20 pixels (e.g. Use this CSS in conjunction with the appropriate type selector: margin: 0 0 20px 0; ). have a left-to-right linear gradient background ** using colors of your choice expressed as hexadecimal color codes . should have 20 pixels of padding on the top and bottom but none on the left and right. Nested inside the <header> element should be a centered, top-level heading element with text that reads \"My First Gallery Mockup,\" in a color that of enough contrast to be legible against the gradient background. The <main> section element should be set to a maximum width of 960 pixels and centered horizontally on the page using CSS. Nested inside the <main> section element should be two sibling <section> elements. The second should have an id attribute of \"gallery\". Inside the the first <section> element should be two paragraphs of lorem ipsum placeholder text. You can use [an online generator]https://loremipsum.io/ultimate-list-of-lorem-ipsum-generators/) or use this Brackets extension to produce the text for these two paragraphs. Several online services exist to generate \"dummy\" images for use in mockups. In this case, we'll use the Dynamic Dummy Image Generator to create a placeholder image that we can float to the left of the second paragraph. Place this snippet of HTML into the second paragraph: < img class = \"float-left\" src = \"https://dummyimage.com/550x300/000/fff.png\" alt = \"550 by 300 pixel placeholder image\" > Use the .float-left class selector to float the image. Be sure to add margin-bottom and margin-right declarations to provide some space between the image and text. Code an image gallery in the second <section> element, the one with an id attribute of \"gallery\": Use an <h2> element with the text \"Gallery\" at the top of this section. Then create nine (9) to fifteen (15) divs, each with a class of \"gallery-item\" and containing a dummy image from LoremFlickr : < div class = \"gallery-item\" > < img src = \"https://loremflickr.com/280/210\" alt = \"Lorem Flickr\" > </ div > Use the display: inline-block; CSS property and other styling to display the gallery as a responsive grid of images whose number of rows and columns change dynamically as the browser window is resized. Finally, create a footer for your page using the <footer> section element that shares the same left-to-right linear-gradient background, but here you should reverse the colors. Be sure to save your work and then SFTP the folder lab03 containing the gallery index.html file into the labs folder of your public_html directory on the people.duke.edu webserver. Reach Goals Some reach goals: Use a Google Font instead of a standard system font for your textual elements on the page. Use the CSS border and box-shadow properties to add some three-dimensionality to your page and/or the gallery items. Use the CSS :hover selector and the CSS filter property to either blur or make grayscale each of your gallery images when you hover your mouse over them. Example","title":"Lab 3"},{"location":"web-multimedia/lab3/#inline-block-gallery","text":"","title":"Inline-Block Gallery"},{"location":"web-multimedia/lab3/#overview","text":"In this third lab assignment, you will create a mock-up of a gallery page and explore the use of dummy content generators. Dummy content generators create fake content to use in your mockups so that you can focus on typography, layout, and color using CSS. Specifically, the top of your gallery mockup page will display a title \u2014 My First Gallery Mockup \u2014 in a block-level container with a gradient background. Beneath that, the remainder of your content should be contained with a 960 pixel box that is horizontally centered on the page. Inside that container, mockup will display two paragraphs of dummy text and will float a large image to the left of the second paragraph, with the text flowing around the right and bottom of the image. Below that, a subtitle will announce the \"Gallery\" section and you will then display nine (9) to fifteen (15) image thumbnails","title":"Overview"},{"location":"web-multimedia/lab3/#requirements-for-a","text":"Use the following step-by-step to make sure you meet the minimum requirements to earn a \u2713 for this assignment. Scroll down to the Reach Goals section below for suggestions to extend your work to attain a \u2713+ . Launch Brackets. Go to File \u2192 Open Folder and find your local site folder. Click the Open button to select that folder as your working directory. In the left-hand pane, fine your labs folder. Right-click on it and choose \"New Folder\" to create a new folder inside your labs folder. Name it lab03 . Start a new file (File \u2192 New). Save it as index.html in the newly created lab03 folder. Use the following as your template html: <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < title > Gallery Mockup </ title > < style > /* Use the style element in the <head> for this lab assignment */ </ style > </ head > < body > < header > </ header > < main > </ main > < footer > </ footer > </ body > </ html > The <header> section: should display as a block-level element with no margin between the element and the edge of the browser window but a bottom margin of 20 pixels (e.g. Use this CSS in conjunction with the appropriate type selector: margin: 0 0 20px 0; ). have a left-to-right linear gradient background ** using colors of your choice expressed as hexadecimal color codes . should have 20 pixels of padding on the top and bottom but none on the left and right. Nested inside the <header> element should be a centered, top-level heading element with text that reads \"My First Gallery Mockup,\" in a color that of enough contrast to be legible against the gradient background. The <main> section element should be set to a maximum width of 960 pixels and centered horizontally on the page using CSS. Nested inside the <main> section element should be two sibling <section> elements. The second should have an id attribute of \"gallery\". Inside the the first <section> element should be two paragraphs of lorem ipsum placeholder text. You can use [an online generator]https://loremipsum.io/ultimate-list-of-lorem-ipsum-generators/) or use this Brackets extension to produce the text for these two paragraphs. Several online services exist to generate \"dummy\" images for use in mockups. In this case, we'll use the Dynamic Dummy Image Generator to create a placeholder image that we can float to the left of the second paragraph. Place this snippet of HTML into the second paragraph: < img class = \"float-left\" src = \"https://dummyimage.com/550x300/000/fff.png\" alt = \"550 by 300 pixel placeholder image\" > Use the .float-left class selector to float the image. Be sure to add margin-bottom and margin-right declarations to provide some space between the image and text. Code an image gallery in the second <section> element, the one with an id attribute of \"gallery\": Use an <h2> element with the text \"Gallery\" at the top of this section. Then create nine (9) to fifteen (15) divs, each with a class of \"gallery-item\" and containing a dummy image from LoremFlickr : < div class = \"gallery-item\" > < img src = \"https://loremflickr.com/280/210\" alt = \"Lorem Flickr\" > </ div > Use the display: inline-block; CSS property and other styling to display the gallery as a responsive grid of images whose number of rows and columns change dynamically as the browser window is resized. Finally, create a footer for your page using the <footer> section element that shares the same left-to-right linear-gradient background, but here you should reverse the colors. Be sure to save your work and then SFTP the folder lab03 containing the gallery index.html file into the labs folder of your public_html directory on the people.duke.edu webserver.","title":"Requirements for a &#10003;"},{"location":"web-multimedia/lab3/#reach-goals","text":"Some reach goals: Use a Google Font instead of a standard system font for your textual elements on the page. Use the CSS border and box-shadow properties to add some three-dimensionality to your page and/or the gallery items. Use the CSS :hover selector and the CSS filter property to either blur or make grayscale each of your gallery images when you hover your mouse over them.","title":"Reach Goals"},{"location":"web-multimedia/lab3/#example","text":"","title":"Example"},{"location":"web-multimedia/lab4/","text":"Due: Second Lab Section meeting of the week of September 30 th CSS Grid and Flexbox Overview In this fourth lab assignment, you will create a mock-up of a Labs landing / index page. You will use both CSS Flexbox and Grid techniques to layout the components for this page. The concept here is that you will have a single page available at https://people.duke.edu/~netID/labs/lab04/index.html which will display information about and link to each of the labs you've completed so far this semester. The page should be structured as follows (see screenshot below for a visual representation) and ideally should be accomplished without modifying the structure of the HTML document provided below. In other words, as much as possible, leave the HTML alone and design with CSS only. All major elements on the page ( <header> , <main> , and <footer> ) should be centered on the page with a maximum width of 960 pixels. Flexbox should be used to create a horizontal layout for the navigation links. The \"Home\" link should be positioned on the left-hand side of the navigation element, with the remaining links on the right side. A grid container should define the layout of the main elements of the page, a series of <article> elements containing information on each of the labs you've completed this semester. At the base of the page will be a footer element using Flexbox for layout with copyright and links to both Duke University and to your primary department webpage. Use two Google typefaces/fonts, a sans-serif font for the header and footer content, and a serif font for the main content. Be sure to select typefaces that are legible and sympathetic when occupying the same page. Use a three-color color scheme for this page. One \u201chighlight\u201d color should be used in light weight to define the extents of the navigation and footer elements, one \u201ctext color\u201d with strong legibility (low saturation, dark value/tone) should be used for all text, and a third color should be used as either a subtle background/panel/object color or within the article elements. Color schemes must be generated from an online color palette generator (color.adobe.com, colormind.io, etc.). Requirements for a \u2713 Use the following step-by-step to make sure you meet the minimum requirements to earn a \u2713 for this assignment. Scroll down to the Reach Goals section below for suggestions to extend your work to attain a \u2713+ . Launch Brackets. In your local website directory, create a new .css file in your /css folder, naming it lab04.css . In your /labs folder, create a new folder called lab04 . Inside of the newly-created lab04 folder, create a file named index.html Copy and paste the following HTML into your newly-created index.html file and save it: <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < title > Labs Landing Mockup </ title > < link href = \"../../css/lab04.css\" type = \"text/css\" rel = \"stylesheet\" > </ head > < body > < header > < nav > < ul id = \"nav-links\" > < li id = \"home\" >< a href = \"../../index.html\" > Home </ a ></ li > < li >< a href = \"../../about-me.html\" > About Me </ a ></ li > < li >< a href = \"../../labs/index.html\" > Labs </ a ></ li > </ ul > </ nav > </ header > < main id = \"labs-grid\" > < h1 id = \"page_title\" > Labs </ h1 > < article id = \"lab1\" class = \"lab_item\" > < h2 class = \"lab_number\" >< a href = \"../lab01/index.html\" > Lab 1 </ a ></ h2 > < img class = \"lab_image\" src = \"https://dummyimage.com/125x300/3d3d3d/9e9e9e\" alt = \"Lab 1 screenshot\" /> < h3 class = \"lab_title\" > My First Webpage </ h3 > < p class = \"lab_description\" > In this first lab assignment, I created a valid HTML5 webpage where I introduced myself to my instructors and classmates. </ p > </ article > < article id = \"lab2\" class = \"lab_item\" > < h2 class = \"lab_number\" >< a href = \"../lab02/index.html\" > Lab 2 </ a ></ h2 > < img class = \"lab_image\" src = \"https://dummyimage.com/125x300/3d3d3d/9e9e9e\" alt = \"Lab 2 screenshot\" /> < h3 class = \"lab_title\" > Site Architecture - First Steps </ h3 > < p class = \"lab_description\" > In this second lab assignment, I set up the file-folder structure of this website and created a new homepage using HTML5 sectioning elements and CSS layout using the box model </ p > </ article > < article id = \"lab3\" class = \"lab_item\" > < h2 class = \"lab_number\" >< a href = \"../lab03/index.html\" > Lab 3 </ a ></ h2 > < img class = \"lab_image\" src = \"https://dummyimage.com/125x300/3d3d3d/9e9e9e\" alt = \"Lab 3 screenshot\" /> < h3 class = \"lab_title\" > Inline-Block Gallery </ h3 > < p class = \"lab_description\" > In this third lab assignment, I built a mock-up of a web gallery, using the inline-block CSS display property. I also explored the use of dummy content generators. </ p > </ article > < article id = \"lab4\" class = \"lab_item\" > < h2 class = \"lab_number\" >< a href = \"./index.html\" > Lab 4 </ a ></ h2 > < img class = \"lab_image\" src = \"https://dummyimage.com/125x300/3d3d3d/9e9e9e\" alt = \"Lab 4 screenshot\" /> < h3 class = \"lab_title\" > CSS Grid and Flexbox </ h3 > < p class = \"lab_description\" > In this fourth lab assignment, I styled the page you are currently viewing using both grid and flexbox layout strategies. </ p > </ article > < article id = \"the_rest\" class = \"lab_item\" > < h2 class = \"lab_number\" >< a href = \"./index.html\" > The Rest </ a ></ h2 > < img class = \"lab_image\" src = \"https://dummyimage.com/125x300/3d3d3d/9e9e9e\" alt = \"Rest of Labs screenshot\" /> < h3 class = \"lab_title\" > TBD </ h3 > < p class = \"lab_description\" > The rest of my labs have yet to be completed but will go here. </ p > </ article > </ main > < footer > < ul id = \"footer-items\" > < li > &copy; 2019 </ li > < li >< a href = \"https://aahvs.duke.edu\" > Art, Art History &amp; Visual Studies </ a ></ li > < li >< a href = \"https://www.duke.edu\" > Duke University </ a ></ li > </ ul > </ footer > </ body > </ html > Ideally, you won't need to modify the HTML on this page. Save it and use CSS exclusively for layout and design. Return to the lab04.css file and begin styling the document using CSS. The first two lines of your CSS file should contain @import rules that pull in two separate font CSS from Google Fonts . One font should be serifed, the other a sans-serif font. Use the appropriate font-family CSS declarations to use the sans-serif font for the <header> and <footer> elements, and the serifed font for the <main> element. The <header> of your page should be an element spanning 100% of the width of the page and use flexbox to center its children (e.g. the <nav> element.): header { display : flex ; justify-content : center ; width : 100 % ; align-items : center ; } The navigation bar ( <nav> ) of your page should be styled to display at a height of 100px and a width of 960 pixels. Use the box-sizing: border-box; declaration so that border and padding are not calculated into the width of the box model for <nav> . You can give it a border that fits in with your three-color scheme. Use flexbox for horizontal layout of the navigation links: # nav-links { list-style-type : none ; display : flex ; justify-content : flex-end ; } The \"Home\" link should be positioned at the left of the <nav> element, by specifying the flex property of the #home element. Use appropriate padding to space out the navigation elements and ensure that you have 20 pixels between the \"Home\" link and the navigation element's left edge and between the last menu item and the navigation element's right edge. The grid container for the labs ( #labs-grid ) should be given a maximum width of 960 pixels and centered on the page using the margin: 0 auto; technique. The grid container for the labs should also be set to display: grid; The grid columns should be set to make 3 columns of 1 fractional width each: grid-template-columns: 1fr 1fr 1fr; and the grid rows should be set so that the first row is 100 pixels high and the rest are auto-sized: grid-template-rows: 100px auto; Set the gap between rows to 15 pixels and the gap between columns at 10 pixels. Use the grid-column declaration to set the #page_title element to span all three columns (e.g. from the first grid-line to the fourth.) Now turn your attention to the <article> elements. Use CSS grid to layout the content of each .lab_item info card with the following fractional widths designating 2 columns and 3 rows: . lab_item { display : grid ; grid-template-columns : 1 fr 2 fr ; grid-template-rows : 1 fr 1 fr 4 fr ; } Use grid-template-areas to specify this layout of elements in the .lab_item grid: grid-template-areas : \"image number\" \"image title\" \"image description\" ; and then be sure to assign your HTML elements to those named areas: . lab_image { grid-area : image ; } . lab_number { grid-area : number ; } . lab_title { grid-area : title ; } . lab-description { grid-area : description ; } Employ your three-color color scheme. Use padding and grid-column-gap and grid-row-gap to introduce some breathing room into your design. Important Be sure to save your work and then SFTP the changes you've made to your local directory to your public_html directory on the people.duke.edu webserver: The folder lab04 containing the index.html file should be transferred into the labs folder of your public_html directory on the webserver. The file lab04.css should be transferred to the css folder in the public_html directory on the webserver. Reach Goals Use @media queries to make the page layout responsive to smaller screens. For example, you may wish to have the layout switch to a two-column grid of labs below 640px and to a single column grid below 400px. And/or you may want the grid layout of the .lab_item info cards themselves to change at lower resolutions. Use relative font-sizing ( rem ) to set the font-size of different elements on the page. And, as always, leverage what you've learned about CSS more generally to create an aesthetically-pleasing webpage.","title":"Lab 4"},{"location":"web-multimedia/lab4/#css-grid-and-flexbox","text":"","title":"CSS Grid and Flexbox"},{"location":"web-multimedia/lab4/#overview","text":"In this fourth lab assignment, you will create a mock-up of a Labs landing / index page. You will use both CSS Flexbox and Grid techniques to layout the components for this page. The concept here is that you will have a single page available at https://people.duke.edu/~netID/labs/lab04/index.html which will display information about and link to each of the labs you've completed so far this semester. The page should be structured as follows (see screenshot below for a visual representation) and ideally should be accomplished without modifying the structure of the HTML document provided below. In other words, as much as possible, leave the HTML alone and design with CSS only. All major elements on the page ( <header> , <main> , and <footer> ) should be centered on the page with a maximum width of 960 pixels. Flexbox should be used to create a horizontal layout for the navigation links. The \"Home\" link should be positioned on the left-hand side of the navigation element, with the remaining links on the right side. A grid container should define the layout of the main elements of the page, a series of <article> elements containing information on each of the labs you've completed this semester. At the base of the page will be a footer element using Flexbox for layout with copyright and links to both Duke University and to your primary department webpage. Use two Google typefaces/fonts, a sans-serif font for the header and footer content, and a serif font for the main content. Be sure to select typefaces that are legible and sympathetic when occupying the same page. Use a three-color color scheme for this page. One \u201chighlight\u201d color should be used in light weight to define the extents of the navigation and footer elements, one \u201ctext color\u201d with strong legibility (low saturation, dark value/tone) should be used for all text, and a third color should be used as either a subtle background/panel/object color or within the article elements. Color schemes must be generated from an online color palette generator (color.adobe.com, colormind.io, etc.).","title":"Overview"},{"location":"web-multimedia/lab4/#requirements-for-a","text":"Use the following step-by-step to make sure you meet the minimum requirements to earn a \u2713 for this assignment. Scroll down to the Reach Goals section below for suggestions to extend your work to attain a \u2713+ . Launch Brackets. In your local website directory, create a new .css file in your /css folder, naming it lab04.css . In your /labs folder, create a new folder called lab04 . Inside of the newly-created lab04 folder, create a file named index.html Copy and paste the following HTML into your newly-created index.html file and save it: <!DOCTYPE html> < html > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < title > Labs Landing Mockup </ title > < link href = \"../../css/lab04.css\" type = \"text/css\" rel = \"stylesheet\" > </ head > < body > < header > < nav > < ul id = \"nav-links\" > < li id = \"home\" >< a href = \"../../index.html\" > Home </ a ></ li > < li >< a href = \"../../about-me.html\" > About Me </ a ></ li > < li >< a href = \"../../labs/index.html\" > Labs </ a ></ li > </ ul > </ nav > </ header > < main id = \"labs-grid\" > < h1 id = \"page_title\" > Labs </ h1 > < article id = \"lab1\" class = \"lab_item\" > < h2 class = \"lab_number\" >< a href = \"../lab01/index.html\" > Lab 1 </ a ></ h2 > < img class = \"lab_image\" src = \"https://dummyimage.com/125x300/3d3d3d/9e9e9e\" alt = \"Lab 1 screenshot\" /> < h3 class = \"lab_title\" > My First Webpage </ h3 > < p class = \"lab_description\" > In this first lab assignment, I created a valid HTML5 webpage where I introduced myself to my instructors and classmates. </ p > </ article > < article id = \"lab2\" class = \"lab_item\" > < h2 class = \"lab_number\" >< a href = \"../lab02/index.html\" > Lab 2 </ a ></ h2 > < img class = \"lab_image\" src = \"https://dummyimage.com/125x300/3d3d3d/9e9e9e\" alt = \"Lab 2 screenshot\" /> < h3 class = \"lab_title\" > Site Architecture - First Steps </ h3 > < p class = \"lab_description\" > In this second lab assignment, I set up the file-folder structure of this website and created a new homepage using HTML5 sectioning elements and CSS layout using the box model </ p > </ article > < article id = \"lab3\" class = \"lab_item\" > < h2 class = \"lab_number\" >< a href = \"../lab03/index.html\" > Lab 3 </ a ></ h2 > < img class = \"lab_image\" src = \"https://dummyimage.com/125x300/3d3d3d/9e9e9e\" alt = \"Lab 3 screenshot\" /> < h3 class = \"lab_title\" > Inline-Block Gallery </ h3 > < p class = \"lab_description\" > In this third lab assignment, I built a mock-up of a web gallery, using the inline-block CSS display property. I also explored the use of dummy content generators. </ p > </ article > < article id = \"lab4\" class = \"lab_item\" > < h2 class = \"lab_number\" >< a href = \"./index.html\" > Lab 4 </ a ></ h2 > < img class = \"lab_image\" src = \"https://dummyimage.com/125x300/3d3d3d/9e9e9e\" alt = \"Lab 4 screenshot\" /> < h3 class = \"lab_title\" > CSS Grid and Flexbox </ h3 > < p class = \"lab_description\" > In this fourth lab assignment, I styled the page you are currently viewing using both grid and flexbox layout strategies. </ p > </ article > < article id = \"the_rest\" class = \"lab_item\" > < h2 class = \"lab_number\" >< a href = \"./index.html\" > The Rest </ a ></ h2 > < img class = \"lab_image\" src = \"https://dummyimage.com/125x300/3d3d3d/9e9e9e\" alt = \"Rest of Labs screenshot\" /> < h3 class = \"lab_title\" > TBD </ h3 > < p class = \"lab_description\" > The rest of my labs have yet to be completed but will go here. </ p > </ article > </ main > < footer > < ul id = \"footer-items\" > < li > &copy; 2019 </ li > < li >< a href = \"https://aahvs.duke.edu\" > Art, Art History &amp; Visual Studies </ a ></ li > < li >< a href = \"https://www.duke.edu\" > Duke University </ a ></ li > </ ul > </ footer > </ body > </ html > Ideally, you won't need to modify the HTML on this page. Save it and use CSS exclusively for layout and design. Return to the lab04.css file and begin styling the document using CSS. The first two lines of your CSS file should contain @import rules that pull in two separate font CSS from Google Fonts . One font should be serifed, the other a sans-serif font. Use the appropriate font-family CSS declarations to use the sans-serif font for the <header> and <footer> elements, and the serifed font for the <main> element. The <header> of your page should be an element spanning 100% of the width of the page and use flexbox to center its children (e.g. the <nav> element.): header { display : flex ; justify-content : center ; width : 100 % ; align-items : center ; } The navigation bar ( <nav> ) of your page should be styled to display at a height of 100px and a width of 960 pixels. Use the box-sizing: border-box; declaration so that border and padding are not calculated into the width of the box model for <nav> . You can give it a border that fits in with your three-color scheme. Use flexbox for horizontal layout of the navigation links: # nav-links { list-style-type : none ; display : flex ; justify-content : flex-end ; } The \"Home\" link should be positioned at the left of the <nav> element, by specifying the flex property of the #home element. Use appropriate padding to space out the navigation elements and ensure that you have 20 pixels between the \"Home\" link and the navigation element's left edge and between the last menu item and the navigation element's right edge. The grid container for the labs ( #labs-grid ) should be given a maximum width of 960 pixels and centered on the page using the margin: 0 auto; technique. The grid container for the labs should also be set to display: grid; The grid columns should be set to make 3 columns of 1 fractional width each: grid-template-columns: 1fr 1fr 1fr; and the grid rows should be set so that the first row is 100 pixels high and the rest are auto-sized: grid-template-rows: 100px auto; Set the gap between rows to 15 pixels and the gap between columns at 10 pixels. Use the grid-column declaration to set the #page_title element to span all three columns (e.g. from the first grid-line to the fourth.) Now turn your attention to the <article> elements. Use CSS grid to layout the content of each .lab_item info card with the following fractional widths designating 2 columns and 3 rows: . lab_item { display : grid ; grid-template-columns : 1 fr 2 fr ; grid-template-rows : 1 fr 1 fr 4 fr ; } Use grid-template-areas to specify this layout of elements in the .lab_item grid: grid-template-areas : \"image number\" \"image title\" \"image description\" ; and then be sure to assign your HTML elements to those named areas: . lab_image { grid-area : image ; } . lab_number { grid-area : number ; } . lab_title { grid-area : title ; } . lab-description { grid-area : description ; } Employ your three-color color scheme. Use padding and grid-column-gap and grid-row-gap to introduce some breathing room into your design. Important Be sure to save your work and then SFTP the changes you've made to your local directory to your public_html directory on the people.duke.edu webserver: The folder lab04 containing the index.html file should be transferred into the labs folder of your public_html directory on the webserver. The file lab04.css should be transferred to the css folder in the public_html directory on the webserver.","title":"Requirements for a &#10003;"},{"location":"web-multimedia/lab4/#reach-goals","text":"Use @media queries to make the page layout responsive to smaller screens. For example, you may wish to have the layout switch to a two-column grid of labs below 640px and to a single column grid below 400px. And/or you may want the grid layout of the .lab_item info cards themselves to change at lower resolutions. Use relative font-sizing ( rem ) to set the font-size of different elements on the page. And, as always, leverage what you've learned about CSS more generally to create an aesthetically-pleasing webpage.","title":"Reach Goals"},{"location":"web-multimedia/lab5/","text":"Due: Second Lab Section meeting of the week of October 21 st CSS Animations and HTML5 Media Overview The fifth lab assignment encompasses three goals: Use CSS Transitions to animate the width property in a stepwise fashion to create a 5-second \"countdown bar\" that activates on :hover . Use CSS Animations to create a looping animation of a beach ball moving down a hill. Use the HTML5 <video> element to embed an .mp4 video on your page and subtitle it using a VTT subtitle <track> element. These HTML, CSS, and media files are provided for you as a starting point: lab005.zip Download and unzip. Place the lab05 folder in the labs folder in your local site. Requirements for a \u2713 Use the following step-by-step to make sure you meet the minimum requirements to earn a \u2713 for this assignment. Scroll down to the Reach Goals section below for suggestions to extend your work to attain a \u2713+ . Launch Brackets. Choose File \u2192 Open Folder from the main menu and then locate the unzipped lab05 folder. Familiarize yourself with the existing HTML in index.html , reproduced here for your convenience: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Lab 05 - CSS Animations and HTML5 Media </ title > < link href = \"./css/lab05.css\" rel = stylesheet > </ head > < body > < h1 > CSS Animations and HTML5 Media </ h1 > < section id = \"countdown\" > < h2 > Stepped Countdown Bar </ h2 > < div class = \"bar\" > Countdown </ div > </ section > < section id = \"ball-roll\" > < h2 > Rolling Ball Animation </ h2 > < div id = \"anim-container\" > < img class = \"ball\" src = \"./images/beach-ball-svgrepo-com.svg\" > </ div > </ section > < section id = \"media\" > < h2 > HTML5 Video </ h2 > </ section > </ body > </ html > Familiarize yourself with the existing CSS in the css/lab05.css file, reproduced here for your convience: body { padding : 20 px ; box-sizing : border-box ; font-family : sans-serif ; font-size : 24 px ; } section { /* a little breathing room between sections */ margin : 100 px 0 px ; } /* count-down bar */ . bar { width : 750 px ; height : 4 rem ; background-color : #deb887 ; line-height : 4 rem ; padding-left : 2 rem ; } /* the \"scene\" for our rolling ball animation */ # anim-container { width : 1000 px ; height : 400 px ; /* generate a \"hill\" using CSS linear-gradient */ background-image : linear-gradient ( 10 deg , #013A6B 50 % , #87ceeb 50 % ); } /* size and position the beachball before animation */ . ball { width : 100 px ; height : auto ; position : relative ; top : 50 px ; left : 10 px ; } CSS Transition Countdown Bar In this section of the tutorial, you will write the CSS necessary to animate the <div> with a class of bar to shrink in a step-wise fashion over 5 seconds. Find the .bar selector in your css/lab05.css file. This CSS defines the \"starting\" state of the transition. Note that the width property is set to 1000px . Immediately below the CSS block for the .bar selector, create a new block of CSS for .bar:hover: . This block will define the \"end\" state of the transition. At the end of our transition, we want the countdown bar to be shorter (500px, for example). Replace the comment in the CSS snippet below with the appropriate code. ```css .bar:hover { / write your css here for the 'end state' of your transition / } Test the non-interpolating (no transition - yet!) animation by mousing over the countdown bar in the browser preview of your lab page. Next we will add to the .bar CSS selector block the CSS necessary to interpolate the transition. Find the .bar CSS selector block,and then add the following CSS property declarations before its closing } . transition-property transition-duration transition-timing-function transition-delay Use linear for the transition-timing-function and 5s for the transition-duration , for now. It's up to you to determine what other values to use. See w3schools.com's CSS Transitions if you need a review. If you are comfortable with the different components of a CSS transition, feel free to use the transition shorthand. Test your linear transition now in the Brackets preview. Now change the transition-timing-function from linear to steps(x) , where x is the number of steps you want your transition to take. [Remember, we want a 5 second countdown timer]. Your goal is to have your transition animation increment once per second over 5 seconds. Test your step-wise transition now in the Brackets preview. Note that there's a delay of a step before the animation starts when using stepwise interpolation. This can be remedied by setting the direction parameter of the steps() declaration of the transition-timing-function property. See Joni Trythall's How to Use steps() in CSS Animations (designmodo) . See if you can figure out whether start or end is the appropriate parameter to use, and why. Your end result should look like this: If that seemed easy, try the Reach Goal of adding a text indicator to your countdown bar. CSS Ball Animation In this section of the tutorial, you'll animate an SVG of a beachball so that it moves down a hill. Again, first familiarize yourself with the HTML and CSS you've been given. Find the <section> element in the HTML file with an ID of ball-roll . Note the elements in this section: An <h2> subtitle, a <div> container for the animation ( #anim-container ) with a width of 1000px and height of 400px and a background gradient that gives the impression of a hill. Inside (and relative to) that container is an SVG image of beachball, sized and positioned using CSS. Unlike CSS transitions, a CSS animation is defined independently of the selectors to which it will later be applied. It is defined in an @keyframes block. In the css/lab05.css file, locate the #anim-container CSS block and below its closing } , at the following CSS: @ keyframes downhill { 0 % { /* start state CSS goes here */ } 100 % { /* end state CSS goes here */ } } Note the syntax: @keyframes is followed by the name of the animation (arbitrary and decided by you) and is followed by opening { and closing } . Inside those curly brackets are a start point ( 0% ) and end point ( 100% ), each with their own set of curly brackets inside which you declare the starting and ending states of the animation using animatable CSS properties . Since we want to move the ball to the right and down over the course of the animation, we could animate using either : The left and top CSS properties \u2013 or \u2013 The CSS transform property There are pros and cons to either approach, best learned through exploration and trial and error. You are encouraged to explore both to see how they animate differently. For now, we will use the left and top CSS properties. We know that we want the starting state of our animation to match what we see now. So in the 0% section of the @keyframes downhill block, enter the same top and left position as the .ball class' current state: @ keyframes downhill { 0 % { /* start state CSS goes here */ top : 50 px ; left : 10 px ; } 100 % { /* end state CSS goes here */ } } We also know that our #anim-container div is 1000px wide x 400px tall. If we want the ball follow the decline of the hill, we know that the top and left declarations need to be modified in a mathematical manner. If we know that the ball needs to travel a 10 degree decline over 1000 pixels, what does its vertical travel need to be, rounded to the nearest pixel? Here we can use right triangle trigonometry , where the following applies: tan(angle) = \\frac{opposite \\ leg}{adjacent \\ leg} tan(angle) = \\frac{opposite \\ leg}{adjacent \\ leg} Since we know the angle (10) and the adjacent leg (1000), we can calculate the length of the opposite leg. Do the math and see if you can figure out the precise pixel change needed. Important Don't forget that the .ball is starting already 50 pixels down from the top edge of its container(e.g. top: 50px; ). You need to account for that when you calculate the distance it needs to travel. In other words, add 50 pixels to the calculated length of the opposite leg above. You can test your values by temporarily plugging them into the .ball CSS block but be sure to restore left and top to their original values when you're done testing. Enter your calculations into the 100% end state declaration of your @keyframes downhill block: @ keyframes downhill { 0 % { /* start state CSS goes here */ top : 50 px ; left : 10 px ; } 100 % { /* end state CSS goes here */ top : ?? px ; /* you calculate: opposite leg + 50px */ left : 1010 px ; } } Fantastic! Now we're ready to apply the @keyframes downhill animation to our .ball SVG image. Within the .ball CSS block and before its closing } , enter the following CSS declarations: animation-name : downhill ; /* name of the animation to apply */ animation-duration : 4s ; /* length of the animation, in sec or ms */ animation-delay : 1s ; /* how long to delay before start of animation */ animation-iteration-count : 1 ; /* number of times to play, can be infinite */ Use Brackets to preview the animation. Reload the page to play it again. It should look like this: Note that the ball, when it reaches the edge of its container, spills into the page. It would be more convincing if it rolled \"out of the frame.\" To accomplish this, add the following CSS inside the #anim-container block, before its closing } : overflow : hidden ; Think for a minute about the experience of watching a ball rolling down a hill. Doesn't it pick up speed as it travels? We can change the behavior of the animation by modifying its animation-timing-function property (aka its speed curve or interpolation function). Try adding the following to the .ball CSS block: animation-name : downhill ; /* name of the animation to apply */ animation-duration : 4s ; /* length of the animation, in sec or ms */ animation-delay : 1s ; /* how long to delay before start of animation */ animation-iteration-count : 1 ; /* number of times to play, can be infinite */ animation-timing-function : ease-in ; Additionally, if we don't want the animation to \"reset\" back to its first frame upon completion, we can make use of the animation-fill-mode property . Setting it to forwards will stop the animation on the last keyframe ( 100% ) and prevent it from resetting to its starting state: animation-name : downhill ; /* name of the animation to apply */ animation-duration : 4s ; /* length of the animation, in sec or ms */ animation-delay : 1s ; /* how long to delay before start of animation */ animation-iteration-count : 1 ; /* number of times to play, can be infinite */ animation-timing-function : ease-in ; animation-fill-mode : forwards ; What else can we do to make the ball rolling animation more convincing? The ball should actually \"roll\" shouldn't it? Rotate clockwise as it moves down the hill? Creating this effect is simple using the rotate(deg) capabilites of the CSS transform property . Modify your @keyframes downhill animation to include a rotate of 0 degrees as a starting point, and then let's assume it rotates two full rotations by the end of the animation, or 720 degrees: @ keyframes downhill { 0 % { top : 50 px ; left : 10 px ; transform : rotate ( 0 deg ); } 100 % { top : ?? px ; /* nice try - you still need to calculate this value */ left : 1010 px ; transform : rotate ( 720 deg ); /* 2 x 360 degree full rotation */ } } Your final animation should look like this: Your browser does not support the video tag. HTML5 Video with Subtitles In this final section of the tutorial, you'll use the HTML5 <video> element to display a video on your page. In your HTML file, find the section with an id of media . Beneath the <h2> subtitle element, create a <video> element. Add the controls attribute so that the play and volume controls are presented to the viewer. Optional: In Chrome the default HTML5 media player has a \"download\" option in its control set. If you wish to disable, at the following to your video element: controlsList=\"nodownload\" Within that <video> element, add a <source> element, with an src attribute that points to the cockroach.mp4 file in the video folder. Also be sure to set the type attribute to video/mp4 since this is an h.264-encoded video in an mp4 container. Check your work in the Brackets preview. Now we can add a subtitle track by including a <track> element as a child of the <video> / sibling of the <source> element: < track src = \"./video/subtitles.vtt\" kind = \"subtitles\" srclang = \"en\" label = \"English\" > In the video playback controls, you should now see a \u22ee and be able to locate and turn on the \"English\" subtitles. [The symbol may be different in other browsers. In Firefox, for example, the symbol is used.] Finally, edit the video/subtitles.vtt file in Brackets to create your own original \"caption this\" narrative for the Cigarette Cockroach video. The timestamp format should be in one of two formats: mm:ss.ttt (currently used) or, for longer videos, hh:mm:ss.ttt hh is hours (must be at least two digits. use a leading 0 for single digit hours, e.g. 03) mm is minutes (must be two digits, 00 to 59) ss is seconds (must be two digits, 00 to 59) ttt is milliseconds (must be three digits, 00 to 999) If you wish to have the subtitles / captions turned on without requiring the viewer to turn them on, you can add the default attribute to the <track> element, such as: < track src = \"./video/subtitles.vtt\" kind = \"subtitles\" srclang = \"en\" label = \"English\" default > Your results should look like this: Reach Goals Some suggestions to extend your work in this lab: Create a second countdown bar using CSS animation (not the transition property) with text that decrements from \"5 seconds\" to \"0 seconds\" as the bar width shrinks . Hint: Use the CSS Content property along with the ::before or ::after pseudo-selectors in your @keyframe animation. Make your ball \"bounce\" a little bit as it moves down the hill. This can be accomplished by adding more frames to your existing @keyframes downhill animation, or you can create a second animation, @keyframes bounce and also apply it to the SVG ball. Add a poster attribute to your HTML5 <video> element and then style the WebVTT subtitles to add nuance to your narrative. Styling the subtitles in your css/lab05.css file will affect all videos covered by that stylesheet. Styling within the VTT file itself will only affect the specific video. Have fun!","title":"Lab 5"},{"location":"web-multimedia/lab5/#css-animations-and-html5-media","text":"","title":"CSS Animations and HTML5 Media"},{"location":"web-multimedia/lab5/#overview","text":"The fifth lab assignment encompasses three goals: Use CSS Transitions to animate the width property in a stepwise fashion to create a 5-second \"countdown bar\" that activates on :hover . Use CSS Animations to create a looping animation of a beach ball moving down a hill. Use the HTML5 <video> element to embed an .mp4 video on your page and subtitle it using a VTT subtitle <track> element. These HTML, CSS, and media files are provided for you as a starting point: lab005.zip Download and unzip. Place the lab05 folder in the labs folder in your local site.","title":"Overview"},{"location":"web-multimedia/lab5/#requirements-for-a","text":"Use the following step-by-step to make sure you meet the minimum requirements to earn a \u2713 for this assignment. Scroll down to the Reach Goals section below for suggestions to extend your work to attain a \u2713+ . Launch Brackets. Choose File \u2192 Open Folder from the main menu and then locate the unzipped lab05 folder. Familiarize yourself with the existing HTML in index.html , reproduced here for your convenience: <!DOCTYPE html> < html lang = \"en\" > < head > < meta charset = \"UTF-8\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1.0\" > < title > Lab 05 - CSS Animations and HTML5 Media </ title > < link href = \"./css/lab05.css\" rel = stylesheet > </ head > < body > < h1 > CSS Animations and HTML5 Media </ h1 > < section id = \"countdown\" > < h2 > Stepped Countdown Bar </ h2 > < div class = \"bar\" > Countdown </ div > </ section > < section id = \"ball-roll\" > < h2 > Rolling Ball Animation </ h2 > < div id = \"anim-container\" > < img class = \"ball\" src = \"./images/beach-ball-svgrepo-com.svg\" > </ div > </ section > < section id = \"media\" > < h2 > HTML5 Video </ h2 > </ section > </ body > </ html > Familiarize yourself with the existing CSS in the css/lab05.css file, reproduced here for your convience: body { padding : 20 px ; box-sizing : border-box ; font-family : sans-serif ; font-size : 24 px ; } section { /* a little breathing room between sections */ margin : 100 px 0 px ; } /* count-down bar */ . bar { width : 750 px ; height : 4 rem ; background-color : #deb887 ; line-height : 4 rem ; padding-left : 2 rem ; } /* the \"scene\" for our rolling ball animation */ # anim-container { width : 1000 px ; height : 400 px ; /* generate a \"hill\" using CSS linear-gradient */ background-image : linear-gradient ( 10 deg , #013A6B 50 % , #87ceeb 50 % ); } /* size and position the beachball before animation */ . ball { width : 100 px ; height : auto ; position : relative ; top : 50 px ; left : 10 px ; }","title":"Requirements for a &#10003;"},{"location":"web-multimedia/lab5/#css-transition-countdown-bar","text":"In this section of the tutorial, you will write the CSS necessary to animate the <div> with a class of bar to shrink in a step-wise fashion over 5 seconds. Find the .bar selector in your css/lab05.css file. This CSS defines the \"starting\" state of the transition. Note that the width property is set to 1000px . Immediately below the CSS block for the .bar selector, create a new block of CSS for .bar:hover: . This block will define the \"end\" state of the transition. At the end of our transition, we want the countdown bar to be shorter (500px, for example). Replace the comment in the CSS snippet below with the appropriate code. ```css .bar:hover { / write your css here for the 'end state' of your transition / } Test the non-interpolating (no transition - yet!) animation by mousing over the countdown bar in the browser preview of your lab page. Next we will add to the .bar CSS selector block the CSS necessary to interpolate the transition. Find the .bar CSS selector block,and then add the following CSS property declarations before its closing } . transition-property transition-duration transition-timing-function transition-delay Use linear for the transition-timing-function and 5s for the transition-duration , for now. It's up to you to determine what other values to use. See w3schools.com's CSS Transitions if you need a review. If you are comfortable with the different components of a CSS transition, feel free to use the transition shorthand. Test your linear transition now in the Brackets preview. Now change the transition-timing-function from linear to steps(x) , where x is the number of steps you want your transition to take. [Remember, we want a 5 second countdown timer]. Your goal is to have your transition animation increment once per second over 5 seconds. Test your step-wise transition now in the Brackets preview. Note that there's a delay of a step before the animation starts when using stepwise interpolation. This can be remedied by setting the direction parameter of the steps() declaration of the transition-timing-function property. See Joni Trythall's How to Use steps() in CSS Animations (designmodo) . See if you can figure out whether start or end is the appropriate parameter to use, and why. Your end result should look like this: If that seemed easy, try the Reach Goal of adding a text indicator to your countdown bar.","title":"CSS Transition Countdown Bar"},{"location":"web-multimedia/lab5/#css-ball-animation","text":"In this section of the tutorial, you'll animate an SVG of a beachball so that it moves down a hill. Again, first familiarize yourself with the HTML and CSS you've been given. Find the <section> element in the HTML file with an ID of ball-roll . Note the elements in this section: An <h2> subtitle, a <div> container for the animation ( #anim-container ) with a width of 1000px and height of 400px and a background gradient that gives the impression of a hill. Inside (and relative to) that container is an SVG image of beachball, sized and positioned using CSS. Unlike CSS transitions, a CSS animation is defined independently of the selectors to which it will later be applied. It is defined in an @keyframes block. In the css/lab05.css file, locate the #anim-container CSS block and below its closing } , at the following CSS: @ keyframes downhill { 0 % { /* start state CSS goes here */ } 100 % { /* end state CSS goes here */ } } Note the syntax: @keyframes is followed by the name of the animation (arbitrary and decided by you) and is followed by opening { and closing } . Inside those curly brackets are a start point ( 0% ) and end point ( 100% ), each with their own set of curly brackets inside which you declare the starting and ending states of the animation using animatable CSS properties . Since we want to move the ball to the right and down over the course of the animation, we could animate using either : The left and top CSS properties \u2013 or \u2013 The CSS transform property There are pros and cons to either approach, best learned through exploration and trial and error. You are encouraged to explore both to see how they animate differently. For now, we will use the left and top CSS properties. We know that we want the starting state of our animation to match what we see now. So in the 0% section of the @keyframes downhill block, enter the same top and left position as the .ball class' current state: @ keyframes downhill { 0 % { /* start state CSS goes here */ top : 50 px ; left : 10 px ; } 100 % { /* end state CSS goes here */ } } We also know that our #anim-container div is 1000px wide x 400px tall. If we want the ball follow the decline of the hill, we know that the top and left declarations need to be modified in a mathematical manner. If we know that the ball needs to travel a 10 degree decline over 1000 pixels, what does its vertical travel need to be, rounded to the nearest pixel? Here we can use right triangle trigonometry , where the following applies: tan(angle) = \\frac{opposite \\ leg}{adjacent \\ leg} tan(angle) = \\frac{opposite \\ leg}{adjacent \\ leg} Since we know the angle (10) and the adjacent leg (1000), we can calculate the length of the opposite leg. Do the math and see if you can figure out the precise pixel change needed. Important Don't forget that the .ball is starting already 50 pixels down from the top edge of its container(e.g. top: 50px; ). You need to account for that when you calculate the distance it needs to travel. In other words, add 50 pixels to the calculated length of the opposite leg above. You can test your values by temporarily plugging them into the .ball CSS block but be sure to restore left and top to their original values when you're done testing. Enter your calculations into the 100% end state declaration of your @keyframes downhill block: @ keyframes downhill { 0 % { /* start state CSS goes here */ top : 50 px ; left : 10 px ; } 100 % { /* end state CSS goes here */ top : ?? px ; /* you calculate: opposite leg + 50px */ left : 1010 px ; } } Fantastic! Now we're ready to apply the @keyframes downhill animation to our .ball SVG image. Within the .ball CSS block and before its closing } , enter the following CSS declarations: animation-name : downhill ; /* name of the animation to apply */ animation-duration : 4s ; /* length of the animation, in sec or ms */ animation-delay : 1s ; /* how long to delay before start of animation */ animation-iteration-count : 1 ; /* number of times to play, can be infinite */ Use Brackets to preview the animation. Reload the page to play it again. It should look like this: Note that the ball, when it reaches the edge of its container, spills into the page. It would be more convincing if it rolled \"out of the frame.\" To accomplish this, add the following CSS inside the #anim-container block, before its closing } : overflow : hidden ; Think for a minute about the experience of watching a ball rolling down a hill. Doesn't it pick up speed as it travels? We can change the behavior of the animation by modifying its animation-timing-function property (aka its speed curve or interpolation function). Try adding the following to the .ball CSS block: animation-name : downhill ; /* name of the animation to apply */ animation-duration : 4s ; /* length of the animation, in sec or ms */ animation-delay : 1s ; /* how long to delay before start of animation */ animation-iteration-count : 1 ; /* number of times to play, can be infinite */ animation-timing-function : ease-in ; Additionally, if we don't want the animation to \"reset\" back to its first frame upon completion, we can make use of the animation-fill-mode property . Setting it to forwards will stop the animation on the last keyframe ( 100% ) and prevent it from resetting to its starting state: animation-name : downhill ; /* name of the animation to apply */ animation-duration : 4s ; /* length of the animation, in sec or ms */ animation-delay : 1s ; /* how long to delay before start of animation */ animation-iteration-count : 1 ; /* number of times to play, can be infinite */ animation-timing-function : ease-in ; animation-fill-mode : forwards ; What else can we do to make the ball rolling animation more convincing? The ball should actually \"roll\" shouldn't it? Rotate clockwise as it moves down the hill? Creating this effect is simple using the rotate(deg) capabilites of the CSS transform property . Modify your @keyframes downhill animation to include a rotate of 0 degrees as a starting point, and then let's assume it rotates two full rotations by the end of the animation, or 720 degrees: @ keyframes downhill { 0 % { top : 50 px ; left : 10 px ; transform : rotate ( 0 deg ); } 100 % { top : ?? px ; /* nice try - you still need to calculate this value */ left : 1010 px ; transform : rotate ( 720 deg ); /* 2 x 360 degree full rotation */ } } Your final animation should look like this: Your browser does not support the video tag.","title":"CSS Ball Animation"},{"location":"web-multimedia/lab5/#html5-video-with-subtitles","text":"In this final section of the tutorial, you'll use the HTML5 <video> element to display a video on your page. In your HTML file, find the section with an id of media . Beneath the <h2> subtitle element, create a <video> element. Add the controls attribute so that the play and volume controls are presented to the viewer. Optional: In Chrome the default HTML5 media player has a \"download\" option in its control set. If you wish to disable, at the following to your video element: controlsList=\"nodownload\" Within that <video> element, add a <source> element, with an src attribute that points to the cockroach.mp4 file in the video folder. Also be sure to set the type attribute to video/mp4 since this is an h.264-encoded video in an mp4 container. Check your work in the Brackets preview. Now we can add a subtitle track by including a <track> element as a child of the <video> / sibling of the <source> element: < track src = \"./video/subtitles.vtt\" kind = \"subtitles\" srclang = \"en\" label = \"English\" > In the video playback controls, you should now see a \u22ee and be able to locate and turn on the \"English\" subtitles. [The symbol may be different in other browsers. In Firefox, for example, the symbol is used.] Finally, edit the video/subtitles.vtt file in Brackets to create your own original \"caption this\" narrative for the Cigarette Cockroach video. The timestamp format should be in one of two formats: mm:ss.ttt (currently used) or, for longer videos, hh:mm:ss.ttt hh is hours (must be at least two digits. use a leading 0 for single digit hours, e.g. 03) mm is minutes (must be two digits, 00 to 59) ss is seconds (must be two digits, 00 to 59) ttt is milliseconds (must be three digits, 00 to 999) If you wish to have the subtitles / captions turned on without requiring the viewer to turn them on, you can add the default attribute to the <track> element, such as: < track src = \"./video/subtitles.vtt\" kind = \"subtitles\" srclang = \"en\" label = \"English\" default > Your results should look like this:","title":"HTML5 Video with Subtitles"},{"location":"web-multimedia/lab5/#reach-goals","text":"Some suggestions to extend your work in this lab: Create a second countdown bar using CSS animation (not the transition property) with text that decrements from \"5 seconds\" to \"0 seconds\" as the bar width shrinks . Hint: Use the CSS Content property along with the ::before or ::after pseudo-selectors in your @keyframe animation. Make your ball \"bounce\" a little bit as it moves down the hill. This can be accomplished by adding more frames to your existing @keyframes downhill animation, or you can create a second animation, @keyframes bounce and also apply it to the SVG ball. Add a poster attribute to your HTML5 <video> element and then style the WebVTT subtitles to add nuance to your narrative. Styling the subtitles in your css/lab05.css file will affect all videos covered by that stylesheet. Styling within the VTT file itself will only affect the specific video. Have fun!","title":"Reach Goals"}]}