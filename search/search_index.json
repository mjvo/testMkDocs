{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to my tutorial repository.","title":"Welcome"},{"location":"circuits/attiny85/","text":"About the ATtiny85 Microcontroller The ATtiny85 microcontroller is a powerful yet extremely low cost (~ 50\u00a2 each) integrated circuit . The chip itself operates with an 8-bit data bus, which means it can access 8-bits of data per computer instruction (set, copy, add, subtract, multiply, compare, etc.). Its CPU speed is capable of up to 8MHz and it has 8KB flash memory for storing Arduino programs. [By comparison, our Adafruit Feather M0 microcontrollers have a 32-bit data bus and operate at 48MHz with 256KB flash memory. Much more powerful, but they cost 7 times as much!] The ATtiny85 requires an operating voltage between 1.8V and 5.5V and has 5 I/O (input/output) pins for connecting electronic components. Here is the pin breakout: Pin #8 (VCC) is connected to the positive terminal of your voltage source (1.8V - 5.5V). Pin #4 (GND) is connected to ground / the negative terminal of your voltage source. The Arduino programming language can be used to control pins #5, #6, #7, #2 and #3: Pins 0 - 4 (marked in light blue) are all capable of digitalWrite()/digitalRead() functions Pins 0 1 are capable of PWM analogWrite() at 8-bit resolution (0-255) Pins A1-A3 (marked in red) are capable of analogRead(), measuring analog voltage through a 10-bit ADC (Analog to Digital Converter). 1 The RESET pin is a special pin; connecting this pin to GND will restart the program running on your ATtiny85. ATtiny85 Hands-On with Tinkercad Over the course of this tutorial, we will create several circuits with the ATtiny85 microcontroller using Autodesk's Tinkercad circuit simulator: The classic project \"Blinky\" Programmatically Fade an LED Programmatically Fade an LED with a Potentiometer RGB LED color control with a Potentiometer First, however, we need to wire up our ATtiny85 to a power supply. Powering an ATtiny85 Warning As noted in the \"About\" section above, the ATtiny85 has an operating voltage between 1.8V and 5.5V. Anything below 1.8V and the microcontroller will not have enough voltage to function. Anything over 5.5V and you risk overloading the chip, as illustrated by the 9V battery blowing the IC in the image below: For this tutorial, you can use 1.5V AA batteries -- you'll need more than one (2 batteries = 3V; 3 batteries = 4.5V) -- or a 3V coin cell battery. The illustrations for the remainder of this tutorial will make use of a 3V coin cell battery. Place your ATtiny85 in the center of your breadboard, straddling the breadboard's ravine. Place a battery near your breadboard. Use a red wire to connect the positive (+) terminal of the battery to the + power bus of the breadboard. Use a red wire to connect the + power bus of the breadboard to the VCC pin of the ATtiny85. Use a black wire to connect the negative (-) terminal of the battery to the - power bus of the breadboard. Use a black wired to connect the - power bus the breadboard to the GND pin of the ATtiny85. Project \"Blinky\" First let's wire up the ATtiny85 for the classic Arduino project, Project Blinky. Here is a schematic: For this project, you will need the following additional components: 1 x Red LED 1 x 47\u03a9 Resistor Drag the two components into your Tinkercad window and, consulting the circuit schematic above, recreate the circuit on your breadboard. Connect the anode (positive terminal) of the LED to digital pin 0 (light blue) of the ATtiny85 microcontroller. Connect the cathode (negative terminal) of the LED to one end of the resistor. Connect the other end of the resistor to GND / the negative (-) power bus rail. Your final wiring should look like this: Next we'll turn to the code necessary to turn the LED on and off programmatically. Click on the Code button in the upper-right of the interface. By default, Tinkercad will open into the Blocks code interface. Blocks is a visual coding paradigm based on MIT's Scratch . Note that Tinkercad has already pre-populated the Blocks code interface with blocks that set the ATtiny85's \"built-in\" LED to HIGH, wait one second, and then set the ATtiny85's \"built-in\" LED to LOW, waiting another second. This may be confusing, since the ATtiny85 does NOT have a \"built-in\" LED like other Arduino microcontrollers such as the Arduino Uno do. We could replace the blocks that reference the built-in LED with the block that would \"Set Pin 0 to HIGH/LOW\". However, we're going to switch over to the Text coding view instead. Find the dropdown in the upper-left of the code panel and change it from \"Blocks\" to \"Text\". You will be prompted to confirm this intention. Click \"Continue.\" You will note that Tinkercad has pre-populated the code interface with the following: void setup () { pinMode ( 0 , OUTPUT ); } void loop () { digitalWrite ( 0 , HIGH ); delay ( 1000 ); // Wait for 1000 millisecond(s) digitalWrite ( 0 , LOW ); delay ( 1000 ); // Wait for 1000 millisecond(s) } As it happens, this is just the code we need to turn pin 0 of the ATtiny85 on and off every second. In the setup() function, the pinMode of pin 0 is set to OUTPUT . And then in the loop() function, the digitalWrite() function is called on pin 0 and set to HIGH. A delay() function of 1000 milliseconds is called. And then a second digitalWrite() function sets pin 0 to LOW, followed by one more 1000 millisecond delay. Click \"Start Simulation\" and your LED should blink on and off. Congratulations! You've completed Project Blinky! Programmatically Fade an LED We can use this same wiring scheme to fade an LED instead of blinking it. Instead of the digitalWrite() function, we'll instead use analogWrite() , taking advantage of the fact that Pin 0 is one of two pins on the ATtiny85 (marked in green below) that is capable of PWM (pulse width modulation). Let's modify the code accordingly: The setup() function can be left alone; we want digital pin 0 to function as an OUTPUT . The loop() function requires significant modification, so delete its contents entirely and we will work through the required logic line by line. Recall that PWM works by modifying the duty cycle of the pin. Rather than being HIGH 100% of the time with a digitalWrite(pin, HIGH) function, or LOW 100% of the time with a digitalWrite(pin, LOW) function, the analogWrite() function enables us to set different percentages of HIGH/LOW to approximate an analog voltage signal at 256 levels between 0V (LOW) and 3V (HIGH). So, analogWrite(0, 127) will cycle the LED HIGH 50% of the time and LOW 50% of the time and in the case of our 3V circuit, will approximate sending an analog voltage of 1.5V through the LED. So, to fade our LED, we will want to iterate through increasing values between 0 and 255 to fade the LED to on, and then iterate through decreasing values from 255 to 0 to fade the LED off. One way to write that code is line by line: void loop (){ analogWrite ( 0 , 0 ); delay ( 30 ); analogWrite ( 0 , 5 ); delay ( 30 ); analogWrite ( 0 , 15 ); delay ( 30 ); analogWrite ( 0 , 20 ); delay ( 30 ); analogWrite ( 0 , 25 ); delay ( 30 ); analogWrite ( 0 , 30 ); delay ( 30 ); ... // continue increasing analogWrite by 5 analogWrite ( 0 , 250 ); delay ( 30 ); analogWrite ( 0 , 255 ); delay ( 30 ); analogWrite ( 0 , 250 ); delay ( 30 ); analogWrite ( 0 , 245 ); delay ( 30 ); analogWrite ( 0 , 240 ); delay ( 30 ); analogWrite ( 0 , 235 ); delay ( 30 ); ... // continue decreasing analogWrite by 5 analogWrite ( 0 , 15 ); delay ( 30 ); analogWrite ( 0 , 10 ); delay ( 30 ); analogWrite ( 0 , 5 ); } But that is NOT very efficient! Luckily, like many programming languages, Arduino has a for control structure that will allow us to radically economize on the lines of code necessary to achieve the same result. Here is the basic structure of a for loop: for ( initialization ; condition ; increment ) { //statement(s); } By convention, most programmers use the variable name i within a for loop. For example: for ( int i = 0 ; i 1000 ; i = i + 1 ) { // this code will run 1000 times! } But one can use any variable name: for ( int elephants = 0 ; elephants 1000 ; elephants = elephants + 1 ) { // this code will also run 1000 times! } The incrementing code, i = i + 1 is often abbreviated as i++ : for ( int i = 0 ; i 1000 ; i ++ ) { // this code will run 1000 times, too! } Finally, incrementation is not limited to increments of 1: // increments of 2 for ( int i = 0 ; i 1000 ; i = i + 2 ) { // this code will run 500 times } // increments of 5, abbreviated notation for ( int i = 0 ; i 1000 ; i += 5 ) { // this code will run 200 times! } Whew! That was quite a detour. Let's get back to our LED fade loop() function. We want our analogWrite() function to iterate up from 0 to 255 in increments of 5, so within our loop() function we can write: void loop () { for ( int lightLevel = 0 ; lightLevel = 255 ; lightLevel = lightLevel + 5 ) { analogWrite ( 0 , lightLevel ); delay ( 30 ); } } Click \"Start Simulation\" and you'll see that we're halfway there. The LED starts OFF, fades to ON, and then jumps back to OFF again, fades to ON, jumps back to OFF, etc, etc. So we need a second for loop to decrement the light level (highlighted in yellow): void loop () { for ( int lightLevel = 0 ; lightLevel = 255 ; lightLevel = lightLevel + 5 ) { analogWrite ( 0 , lightLevel ); delay ( 30 ); } for ( int lightLevel = 255 ; lightLevel = 0 ; lightLevel = lightLevel - 5 ) { analogWrite ( 0 , lightLevel ); delay ( 30 ); } } Click \"Start Simulation\" and the LED should slowly fade in and out, as if it were breathing. Congratulations! You've successfully completed the \"Programmatically Fade an LED\" project! Programmatically Fade an LED with a Potentiometer In this next project, we'll add a potentiometer to our circuit and use it to control the fade level of the LED. Here is the circuit schematic for your reference: First, delete all of the code in the Text interface of your Code panel. We will write new code for this project. Next, close the Code panel to access your Components bin and locate the Potentiometer . Drag it onto your Tinkercad canvas. Connect the outer terminals of the potentiometer to the positive (+) and negative (-) bus of your breadboard. The \"wiper\" terminal of the potentiometer should be connected to one of the three pins on the ATtiny85 that are capable of reading analog voltages. They are marked in red as pins A1, A2, and A3 on the pinout diagram. In the example below, we've connected the potentiometer's wiper to pin A3 of the ATtiny85 using a yellow wire. Note At this point you may be asking: Why didn't we connect the potentiometer wiper in series with the LED to directly control the LED's brightness? That's a great question! Indeed, you might even be wondering why we need the ATtiny85 to accomplish this project at all! In fact, if all we want to do is use a potentiometer to control the brightness of an LED, we don't need a microcontroller to do that! You could save yourself time and money and avoid having to touch code at all! The purpose of this project, however, is on the one hand purely pedagogical: to teach you how to use a microcontroller to read an analog voltage. A microcontroller can put that information to use in many different ways. In the last project of this tutorial we'll make use of that analog signal to create a circuit that would be quite a bit more difficult to accomplish without a microcontroller. Stay tuned! Now that we've wired up our potentiometer, let's turn to the Arduino code necessary to read its output. Open the Code panel and again, switch to the Text interface. Let's begin by initializing some variables. We need one to hold the value coming in from our potentiometer on pin A3: int pot_value = 0 ; And let's use a variable name to identify the pin that attaches to our LED. This is considered a good practice in case you ever need to modify the pin configuration on your hardware. Rather than having to hunt through your code for every reference to pin 0 , you can simply change it in the variable list at the top of your sketch. int pot_value = 0 ; int ledPin = 0 ; Let's do the same for the pin that attaches to our potentiometer: int pot_value = 0 ; int ledPin = 0 ; int sensorPin = A3 ; Now that we've declared our variables, we can use these in our setup() function to set these pins as OUTPUT and INPUT as needed: int pot_value = 0 ; int ledPin = 0 ; int sensorPin = A3 ; void setup () { pinMode ( ledPin , OUTPUT ); pinMode ( sensorPin , INPUT ); } We can now turn our attention to our program's loop() function. The first thing we want to do each program cycle is read the value coming in over the ADC at pin A3 from the potentiometer and assign it to our pot_value variable: void loop () { pot_value = analogRead ( sensorPin ); } The next thing we want to do is to use that value to set the analogWrite() value for the LED pin. Important! The ADC of pin A3 runs at 10 bits, which means that analogRead() is going to be giving readings between 0 and 1023. Our analogWrite() function can only take an 8 bit value, between 0 and 255. To reconcile this difference, we need to use Arduino's map() math function and then use that re-mapped value to drive our LED. In the code highlighted below, we first re-map the 10 bit pot_value to an 8 bit number and then pass that re-mapped value to analogWrite() . void loop () { pot_value = analogRead ( sensorPin ); pot_value = map ( pot_value , 0 , 1023 , 0 , 255 ); analogWrite ( ledPin , pot_value ); } Our full code should read as follows: int pot_value = 0 ; int ledPin = 0 ; int sensorPin = A3 ; void setup () { pinMode ( ledPin , OUTPUT ); pinMode ( sensorPin , INPUT ); } void loop () { pot_value = analogRead ( sensorPin ); pot_value = map ( pot_value , 0 , 1023 , 0 , 255 ); analogWrite ( ledPin , pot_value ); } Click on \"Start Simulation.\" Use your mouse to manipulate the potentiometer. When the indicator is closest to the pin you have connected to the positive (+) voltage, the LED should burn brightest. When the indicator is moved toward the pin that you have connected to ground (-), the LED should dim and then turn off completely. Congratulations! You've completed the \"Programmatically Fade an LED with a Potentiometer\" project. \"10-bit\" refers to the resolution of the ADC, meaning that it can convert an analog signal into 1024 (0-1023) discrete levels. See https://en.wikipedia.org/wiki/Analog-to-digital_converter#Resolution","title":"ATtiny85"},{"location":"circuits/attiny85/#about-the-attiny85-microcontroller","text":"The ATtiny85 microcontroller is a powerful yet extremely low cost (~ 50\u00a2 each) integrated circuit . The chip itself operates with an 8-bit data bus, which means it can access 8-bits of data per computer instruction (set, copy, add, subtract, multiply, compare, etc.). Its CPU speed is capable of up to 8MHz and it has 8KB flash memory for storing Arduino programs. [By comparison, our Adafruit Feather M0 microcontrollers have a 32-bit data bus and operate at 48MHz with 256KB flash memory. Much more powerful, but they cost 7 times as much!] The ATtiny85 requires an operating voltage between 1.8V and 5.5V and has 5 I/O (input/output) pins for connecting electronic components. Here is the pin breakout: Pin #8 (VCC) is connected to the positive terminal of your voltage source (1.8V - 5.5V). Pin #4 (GND) is connected to ground / the negative terminal of your voltage source. The Arduino programming language can be used to control pins #5, #6, #7, #2 and #3: Pins 0 - 4 (marked in light blue) are all capable of digitalWrite()/digitalRead() functions Pins 0 1 are capable of PWM analogWrite() at 8-bit resolution (0-255) Pins A1-A3 (marked in red) are capable of analogRead(), measuring analog voltage through a 10-bit ADC (Analog to Digital Converter). 1 The RESET pin is a special pin; connecting this pin to GND will restart the program running on your ATtiny85.","title":"About the ATtiny85 Microcontroller"},{"location":"circuits/attiny85/#attiny85-hands-on-with-tinkercad","text":"Over the course of this tutorial, we will create several circuits with the ATtiny85 microcontroller using Autodesk's Tinkercad circuit simulator: The classic project \"Blinky\" Programmatically Fade an LED Programmatically Fade an LED with a Potentiometer RGB LED color control with a Potentiometer First, however, we need to wire up our ATtiny85 to a power supply.","title":"ATtiny85 Hands-On with Tinkercad"},{"location":"circuits/attiny85/#powering-an-attiny85","text":"Warning As noted in the \"About\" section above, the ATtiny85 has an operating voltage between 1.8V and 5.5V. Anything below 1.8V and the microcontroller will not have enough voltage to function. Anything over 5.5V and you risk overloading the chip, as illustrated by the 9V battery blowing the IC in the image below: For this tutorial, you can use 1.5V AA batteries -- you'll need more than one (2 batteries = 3V; 3 batteries = 4.5V) -- or a 3V coin cell battery. The illustrations for the remainder of this tutorial will make use of a 3V coin cell battery. Place your ATtiny85 in the center of your breadboard, straddling the breadboard's ravine. Place a battery near your breadboard. Use a red wire to connect the positive (+) terminal of the battery to the + power bus of the breadboard. Use a red wire to connect the + power bus of the breadboard to the VCC pin of the ATtiny85. Use a black wire to connect the negative (-) terminal of the battery to the - power bus of the breadboard. Use a black wired to connect the - power bus the breadboard to the GND pin of the ATtiny85.","title":"Powering an ATtiny85"},{"location":"circuits/attiny85/#project-blinky","text":"First let's wire up the ATtiny85 for the classic Arduino project, Project Blinky. Here is a schematic: For this project, you will need the following additional components: 1 x Red LED 1 x 47\u03a9 Resistor Drag the two components into your Tinkercad window and, consulting the circuit schematic above, recreate the circuit on your breadboard. Connect the anode (positive terminal) of the LED to digital pin 0 (light blue) of the ATtiny85 microcontroller. Connect the cathode (negative terminal) of the LED to one end of the resistor. Connect the other end of the resistor to GND / the negative (-) power bus rail. Your final wiring should look like this: Next we'll turn to the code necessary to turn the LED on and off programmatically. Click on the Code button in the upper-right of the interface. By default, Tinkercad will open into the Blocks code interface. Blocks is a visual coding paradigm based on MIT's Scratch . Note that Tinkercad has already pre-populated the Blocks code interface with blocks that set the ATtiny85's \"built-in\" LED to HIGH, wait one second, and then set the ATtiny85's \"built-in\" LED to LOW, waiting another second. This may be confusing, since the ATtiny85 does NOT have a \"built-in\" LED like other Arduino microcontrollers such as the Arduino Uno do. We could replace the blocks that reference the built-in LED with the block that would \"Set Pin 0 to HIGH/LOW\". However, we're going to switch over to the Text coding view instead. Find the dropdown in the upper-left of the code panel and change it from \"Blocks\" to \"Text\". You will be prompted to confirm this intention. Click \"Continue.\" You will note that Tinkercad has pre-populated the code interface with the following: void setup () { pinMode ( 0 , OUTPUT ); } void loop () { digitalWrite ( 0 , HIGH ); delay ( 1000 ); // Wait for 1000 millisecond(s) digitalWrite ( 0 , LOW ); delay ( 1000 ); // Wait for 1000 millisecond(s) } As it happens, this is just the code we need to turn pin 0 of the ATtiny85 on and off every second. In the setup() function, the pinMode of pin 0 is set to OUTPUT . And then in the loop() function, the digitalWrite() function is called on pin 0 and set to HIGH. A delay() function of 1000 milliseconds is called. And then a second digitalWrite() function sets pin 0 to LOW, followed by one more 1000 millisecond delay. Click \"Start Simulation\" and your LED should blink on and off. Congratulations! You've completed Project Blinky!","title":"Project \"Blinky\""},{"location":"circuits/attiny85/#programmatically-fade-an-led","text":"We can use this same wiring scheme to fade an LED instead of blinking it. Instead of the digitalWrite() function, we'll instead use analogWrite() , taking advantage of the fact that Pin 0 is one of two pins on the ATtiny85 (marked in green below) that is capable of PWM (pulse width modulation). Let's modify the code accordingly: The setup() function can be left alone; we want digital pin 0 to function as an OUTPUT . The loop() function requires significant modification, so delete its contents entirely and we will work through the required logic line by line. Recall that PWM works by modifying the duty cycle of the pin. Rather than being HIGH 100% of the time with a digitalWrite(pin, HIGH) function, or LOW 100% of the time with a digitalWrite(pin, LOW) function, the analogWrite() function enables us to set different percentages of HIGH/LOW to approximate an analog voltage signal at 256 levels between 0V (LOW) and 3V (HIGH). So, analogWrite(0, 127) will cycle the LED HIGH 50% of the time and LOW 50% of the time and in the case of our 3V circuit, will approximate sending an analog voltage of 1.5V through the LED. So, to fade our LED, we will want to iterate through increasing values between 0 and 255 to fade the LED to on, and then iterate through decreasing values from 255 to 0 to fade the LED off. One way to write that code is line by line: void loop (){ analogWrite ( 0 , 0 ); delay ( 30 ); analogWrite ( 0 , 5 ); delay ( 30 ); analogWrite ( 0 , 15 ); delay ( 30 ); analogWrite ( 0 , 20 ); delay ( 30 ); analogWrite ( 0 , 25 ); delay ( 30 ); analogWrite ( 0 , 30 ); delay ( 30 ); ... // continue increasing analogWrite by 5 analogWrite ( 0 , 250 ); delay ( 30 ); analogWrite ( 0 , 255 ); delay ( 30 ); analogWrite ( 0 , 250 ); delay ( 30 ); analogWrite ( 0 , 245 ); delay ( 30 ); analogWrite ( 0 , 240 ); delay ( 30 ); analogWrite ( 0 , 235 ); delay ( 30 ); ... // continue decreasing analogWrite by 5 analogWrite ( 0 , 15 ); delay ( 30 ); analogWrite ( 0 , 10 ); delay ( 30 ); analogWrite ( 0 , 5 ); } But that is NOT very efficient! Luckily, like many programming languages, Arduino has a for control structure that will allow us to radically economize on the lines of code necessary to achieve the same result. Here is the basic structure of a for loop: for ( initialization ; condition ; increment ) { //statement(s); } By convention, most programmers use the variable name i within a for loop. For example: for ( int i = 0 ; i 1000 ; i = i + 1 ) { // this code will run 1000 times! } But one can use any variable name: for ( int elephants = 0 ; elephants 1000 ; elephants = elephants + 1 ) { // this code will also run 1000 times! } The incrementing code, i = i + 1 is often abbreviated as i++ : for ( int i = 0 ; i 1000 ; i ++ ) { // this code will run 1000 times, too! } Finally, incrementation is not limited to increments of 1: // increments of 2 for ( int i = 0 ; i 1000 ; i = i + 2 ) { // this code will run 500 times } // increments of 5, abbreviated notation for ( int i = 0 ; i 1000 ; i += 5 ) { // this code will run 200 times! } Whew! That was quite a detour. Let's get back to our LED fade loop() function. We want our analogWrite() function to iterate up from 0 to 255 in increments of 5, so within our loop() function we can write: void loop () { for ( int lightLevel = 0 ; lightLevel = 255 ; lightLevel = lightLevel + 5 ) { analogWrite ( 0 , lightLevel ); delay ( 30 ); } } Click \"Start Simulation\" and you'll see that we're halfway there. The LED starts OFF, fades to ON, and then jumps back to OFF again, fades to ON, jumps back to OFF, etc, etc. So we need a second for loop to decrement the light level (highlighted in yellow): void loop () { for ( int lightLevel = 0 ; lightLevel = 255 ; lightLevel = lightLevel + 5 ) { analogWrite ( 0 , lightLevel ); delay ( 30 ); } for ( int lightLevel = 255 ; lightLevel = 0 ; lightLevel = lightLevel - 5 ) { analogWrite ( 0 , lightLevel ); delay ( 30 ); } } Click \"Start Simulation\" and the LED should slowly fade in and out, as if it were breathing. Congratulations! You've successfully completed the \"Programmatically Fade an LED\" project!","title":"Programmatically Fade an LED"},{"location":"circuits/attiny85/#programmatically-fade-an-led-with-a-potentiometer","text":"In this next project, we'll add a potentiometer to our circuit and use it to control the fade level of the LED. Here is the circuit schematic for your reference: First, delete all of the code in the Text interface of your Code panel. We will write new code for this project. Next, close the Code panel to access your Components bin and locate the Potentiometer . Drag it onto your Tinkercad canvas. Connect the outer terminals of the potentiometer to the positive (+) and negative (-) bus of your breadboard. The \"wiper\" terminal of the potentiometer should be connected to one of the three pins on the ATtiny85 that are capable of reading analog voltages. They are marked in red as pins A1, A2, and A3 on the pinout diagram. In the example below, we've connected the potentiometer's wiper to pin A3 of the ATtiny85 using a yellow wire. Note At this point you may be asking: Why didn't we connect the potentiometer wiper in series with the LED to directly control the LED's brightness? That's a great question! Indeed, you might even be wondering why we need the ATtiny85 to accomplish this project at all! In fact, if all we want to do is use a potentiometer to control the brightness of an LED, we don't need a microcontroller to do that! You could save yourself time and money and avoid having to touch code at all! The purpose of this project, however, is on the one hand purely pedagogical: to teach you how to use a microcontroller to read an analog voltage. A microcontroller can put that information to use in many different ways. In the last project of this tutorial we'll make use of that analog signal to create a circuit that would be quite a bit more difficult to accomplish without a microcontroller. Stay tuned! Now that we've wired up our potentiometer, let's turn to the Arduino code necessary to read its output. Open the Code panel and again, switch to the Text interface. Let's begin by initializing some variables. We need one to hold the value coming in from our potentiometer on pin A3: int pot_value = 0 ; And let's use a variable name to identify the pin that attaches to our LED. This is considered a good practice in case you ever need to modify the pin configuration on your hardware. Rather than having to hunt through your code for every reference to pin 0 , you can simply change it in the variable list at the top of your sketch. int pot_value = 0 ; int ledPin = 0 ; Let's do the same for the pin that attaches to our potentiometer: int pot_value = 0 ; int ledPin = 0 ; int sensorPin = A3 ; Now that we've declared our variables, we can use these in our setup() function to set these pins as OUTPUT and INPUT as needed: int pot_value = 0 ; int ledPin = 0 ; int sensorPin = A3 ; void setup () { pinMode ( ledPin , OUTPUT ); pinMode ( sensorPin , INPUT ); } We can now turn our attention to our program's loop() function. The first thing we want to do each program cycle is read the value coming in over the ADC at pin A3 from the potentiometer and assign it to our pot_value variable: void loop () { pot_value = analogRead ( sensorPin ); } The next thing we want to do is to use that value to set the analogWrite() value for the LED pin. Important! The ADC of pin A3 runs at 10 bits, which means that analogRead() is going to be giving readings between 0 and 1023. Our analogWrite() function can only take an 8 bit value, between 0 and 255. To reconcile this difference, we need to use Arduino's map() math function and then use that re-mapped value to drive our LED. In the code highlighted below, we first re-map the 10 bit pot_value to an 8 bit number and then pass that re-mapped value to analogWrite() . void loop () { pot_value = analogRead ( sensorPin ); pot_value = map ( pot_value , 0 , 1023 , 0 , 255 ); analogWrite ( ledPin , pot_value ); } Our full code should read as follows: int pot_value = 0 ; int ledPin = 0 ; int sensorPin = A3 ; void setup () { pinMode ( ledPin , OUTPUT ); pinMode ( sensorPin , INPUT ); } void loop () { pot_value = analogRead ( sensorPin ); pot_value = map ( pot_value , 0 , 1023 , 0 , 255 ); analogWrite ( ledPin , pot_value ); } Click on \"Start Simulation.\" Use your mouse to manipulate the potentiometer. When the indicator is closest to the pin you have connected to the positive (+) voltage, the LED should burn brightest. When the indicator is moved toward the pin that you have connected to ground (-), the LED should dim and then turn off completely. Congratulations! You've completed the \"Programmatically Fade an LED with a Potentiometer\" project. \"10-bit\" refers to the resolution of the ADC, meaning that it can convert an analog signal into 1024 (0-1023) discrete levels. See https://en.wikipedia.org/wiki/Analog-to-digital_converter#Resolution","title":"Programmatically Fade an LED with a Potentiometer"},{"location":"circuits/tinkercad1/","text":"Assumptions The following tutorial assumes that: You have created a Tinkercad / Autodesk account. (If you have not yet done so, please create one .) You are signed in using your account. You have already completed the four tutorials in the Circuits \u201cGetting Started\u201d Project Gallery : Start Simulating Editing Components (we\u2019ll cover Arduino in a future class; this just shows you how to modify components whose properties are editable.) Wiring Components Adding Components You have already completed the three Circuits \u201cSkill Builders Lessons\u201d : Introducing the Breadboard Ohm\u2019s Law Series and Parallel Circuits Circuit Setup In this section of the tutorial you will create two identical circuits in the same Tinkercad Circuits workspace: one without a breadboard, and the second using a breadboard. Later in the tutorial we will use these circuits to gain a better understanding of current, resistance, and voltage. In both cases, you will be creating a simple LED circuit using a battery, LED, and resistor. Here is the circuit diagram: Calculate the Proper Resistor Value: The circuit diagram above indicates a 3V battery (2 x AA) and an LED with a forward voltage (voltage drop) of approximately 2.06V. The LED's ideal forward current is 20mA. What is the ideal resistor value (in ohms) for this circuit? In other words, what resistor (R) will keep the current (I) through the LED closest to 20mA, the current at which the LED will burn the brightest without jeopardizing its longevity or, worse, overloading? Use this formula (based on Ohm's Law and Kirchhoff\u2019s voltage law): R = \\frac{V_{source}-V_{drop}}{I_{forward}} R = \\frac{V_{source}-V_{drop}}{I_{forward}} Answer: $$ R\\ =\\ \\Rule{1cm}{0.15mm}{0.15mm} \\ \\Omega $$ Circuit #1 - No Breadboard LED Circuit Go to your Tinkercad Dashboard https://www.tinkercad.com/#/dashboard Click on the Circuits button in the left panel. Click on the green \"Create new Circuit\" button. Create new Circuit A new blank canvas will open in your browser. Using the Components Palette on the right, click and drag the following components into the canvas: Resistor LED 1.5V Battery (AA) Click on the Battery in the canvas. In the configuration panel that appears, set the \"Count\" to \"2 Batteries\" (e.g. we want a 3V supplied to our circuit, so 2 x 1.5V = 3V ). Click on the Resistor in the canvas. In the configuration panel that appears, set the Resistance to the \u03a9 you calculated above. Click and drag between terminals of your components to wire up your circuit. If you wish, you may click on the individual wires to set their color. After completing your wiring and arranging/rotating the components, your circuit should look something like this: Click on the \"Start Simulation\" button in the upper-right of the browser window to simulate the circuit. The LED should be brightly lit. Troubleshooting If your LED is blown or shows a warning indicator, your calculated resistor value is too low. Review your calculations. If your LED is dim, your calculated resistor value is too high. Review your calculations. If your LED does not turn on at all, you may have mis-wired your circuit. Check your connections and wire-routing. Remember, LEDs are diodes and thus have polarity. Circuit #2 - LED Circuit on a Breadboard Next, using the same canvas, let's create a breadboard version of the same circuit. Move the circuit you just created to the left or right of the canvas to give yourself space for the new circuit. Again, using the Components Palette on the right, click and drag the following components into the canvas: Resistor LED 1.5V Battery (AA) Breadboard Set the Battery Count to 2. Set the Resistor's resistance to the same \u03a9 value you calculated for the non-breadboard circuit above. Using wires and the breadboard, create the circuit. Hint Hovering your mouse over the breadboard rows will remind you how a breadboard is configured (power buses on the outside rails, connected rows separated by a \"ravine\"). After completing your wiring and arranging/rotating the components, your circuit should look something like this: Click on the \"Start Simulation\" button again in the upper-right of the browser window to simulate the circuit. The LED on the breadboard should be brightly lit. Using a Multimeter Now that we have a working circuit, let's use Tinkercad's virtual multimeter to take some measurements on our circuit. From the Components Palette, find the Multimeter and add it to your canvas. Note that the multimeter has three modes. By default, it will function in Voltage mode as a voltmeter , enabling you to read voltages across different points in your circuit. The multimeter can be set to other modes easily by clicking on the multimeter in your canvas to display the configuration panel and selecting a different mode. In Amperage mode, it will function as an ammeter , enabling you to read the current passing through specific points in your circuit. In Resistance mode, it will function as an ohmmeter , enabling you to read the resistance between specific points in your circuit. Reading Voltages We know that the total voltage of our circuit is 3V because the voltage differential between the cathode (+ terminal) and anode (- terminal) of the battery is 3V (assuming it is fully charged). But let's read voltages between various points in the circuit. Read the voltage between the two sides of the resistor: Voltage Across the Resistor Fill in your reading below: $$ Voltage\\ =\\ \\Rule{1cm}{0.15mm}{0.15mm} \\ V $$ Read the voltage between the anode and the cathode of the LED: Voltage Across the LED Fill in your reading below: $$ Voltage\\ =\\ \\Rule{1cm}{0.15mm}{0.15mm} \\ V $$ Finally, read the voltage between the two terminals of the battery in the circuit. Voltage Across the Battery Fill in your reading below: $$ Voltage\\ =\\ \\Rule{1cm}{0.15mm}{0.15mm} \\ V $$ If your voltage reading \u2260 3V, what do you think accounts for the difference? What do you observe when you add the voltage across the resistor to the voltage across the LED? Total Voltage Fill in your reading below: $$ V_{resistor} + V_{led} \\ = \\ \\Rule{1cm}{0.15mm}{0.15mm} \\ V $$ Observation: Reading Amperage Finally, let's use the multimeter as an ammeter to measure the total current (I) being drawn by our circuit. Important Remember: Voltmeter and ohmmeters are wired in parallel to the component being measured. However, ammeters must be wired in series . See https://learn.sparkfun.com/tutorials/series-and-parallel-circuits Wire your multimeter into your circuit in series as illustrated below: Measuring Current What is the current being drawn by the circuit? Provide your answer in both amps (A) and milliamps (mA) What happens to the current if you increase the voltage in the circuit, such as changing the battery from two AA's (3V) to 3 AA's (4.5V)? Similarly, what happens if you leave the voltage alone but increase the resistance in the circuit, such as increasing the resistance of the resistor to 100 \u03a9?","title":"Tinkercad"},{"location":"circuits/tinkercad1/#assumptions","text":"The following tutorial assumes that: You have created a Tinkercad / Autodesk account. (If you have not yet done so, please create one .) You are signed in using your account. You have already completed the four tutorials in the Circuits \u201cGetting Started\u201d Project Gallery : Start Simulating Editing Components (we\u2019ll cover Arduino in a future class; this just shows you how to modify components whose properties are editable.) Wiring Components Adding Components You have already completed the three Circuits \u201cSkill Builders Lessons\u201d : Introducing the Breadboard Ohm\u2019s Law Series and Parallel Circuits","title":"Assumptions"},{"location":"circuits/tinkercad1/#circuit-setup","text":"In this section of the tutorial you will create two identical circuits in the same Tinkercad Circuits workspace: one without a breadboard, and the second using a breadboard. Later in the tutorial we will use these circuits to gain a better understanding of current, resistance, and voltage. In both cases, you will be creating a simple LED circuit using a battery, LED, and resistor. Here is the circuit diagram: Calculate the Proper Resistor Value: The circuit diagram above indicates a 3V battery (2 x AA) and an LED with a forward voltage (voltage drop) of approximately 2.06V. The LED's ideal forward current is 20mA. What is the ideal resistor value (in ohms) for this circuit? In other words, what resistor (R) will keep the current (I) through the LED closest to 20mA, the current at which the LED will burn the brightest without jeopardizing its longevity or, worse, overloading? Use this formula (based on Ohm's Law and Kirchhoff\u2019s voltage law): R = \\frac{V_{source}-V_{drop}}{I_{forward}} R = \\frac{V_{source}-V_{drop}}{I_{forward}} Answer: $$ R\\ =\\ \\Rule{1cm}{0.15mm}{0.15mm} \\ \\Omega $$","title":"Circuit Setup"},{"location":"circuits/tinkercad1/#circuit-1-no-breadboard-led-circuit","text":"Go to your Tinkercad Dashboard https://www.tinkercad.com/#/dashboard Click on the Circuits button in the left panel. Click on the green \"Create new Circuit\" button. Create new Circuit A new blank canvas will open in your browser. Using the Components Palette on the right, click and drag the following components into the canvas: Resistor LED 1.5V Battery (AA) Click on the Battery in the canvas. In the configuration panel that appears, set the \"Count\" to \"2 Batteries\" (e.g. we want a 3V supplied to our circuit, so 2 x 1.5V = 3V ). Click on the Resistor in the canvas. In the configuration panel that appears, set the Resistance to the \u03a9 you calculated above. Click and drag between terminals of your components to wire up your circuit. If you wish, you may click on the individual wires to set their color. After completing your wiring and arranging/rotating the components, your circuit should look something like this: Click on the \"Start Simulation\" button in the upper-right of the browser window to simulate the circuit. The LED should be brightly lit. Troubleshooting If your LED is blown or shows a warning indicator, your calculated resistor value is too low. Review your calculations. If your LED is dim, your calculated resistor value is too high. Review your calculations. If your LED does not turn on at all, you may have mis-wired your circuit. Check your connections and wire-routing. Remember, LEDs are diodes and thus have polarity.","title":"Circuit #1 - No Breadboard LED Circuit"},{"location":"circuits/tinkercad1/#circuit-2-led-circuit-on-a-breadboard","text":"Next, using the same canvas, let's create a breadboard version of the same circuit. Move the circuit you just created to the left or right of the canvas to give yourself space for the new circuit. Again, using the Components Palette on the right, click and drag the following components into the canvas: Resistor LED 1.5V Battery (AA) Breadboard Set the Battery Count to 2. Set the Resistor's resistance to the same \u03a9 value you calculated for the non-breadboard circuit above. Using wires and the breadboard, create the circuit. Hint Hovering your mouse over the breadboard rows will remind you how a breadboard is configured (power buses on the outside rails, connected rows separated by a \"ravine\"). After completing your wiring and arranging/rotating the components, your circuit should look something like this: Click on the \"Start Simulation\" button again in the upper-right of the browser window to simulate the circuit. The LED on the breadboard should be brightly lit.","title":"Circuit #2 - LED Circuit on a Breadboard"},{"location":"circuits/tinkercad1/#using-a-multimeter","text":"Now that we have a working circuit, let's use Tinkercad's virtual multimeter to take some measurements on our circuit. From the Components Palette, find the Multimeter and add it to your canvas. Note that the multimeter has three modes. By default, it will function in Voltage mode as a voltmeter , enabling you to read voltages across different points in your circuit. The multimeter can be set to other modes easily by clicking on the multimeter in your canvas to display the configuration panel and selecting a different mode. In Amperage mode, it will function as an ammeter , enabling you to read the current passing through specific points in your circuit. In Resistance mode, it will function as an ohmmeter , enabling you to read the resistance between specific points in your circuit.","title":"Using a Multimeter"},{"location":"circuits/tinkercad1/#reading-voltages","text":"We know that the total voltage of our circuit is 3V because the voltage differential between the cathode (+ terminal) and anode (- terminal) of the battery is 3V (assuming it is fully charged). But let's read voltages between various points in the circuit. Read the voltage between the two sides of the resistor: Voltage Across the Resistor Fill in your reading below: $$ Voltage\\ =\\ \\Rule{1cm}{0.15mm}{0.15mm} \\ V $$ Read the voltage between the anode and the cathode of the LED: Voltage Across the LED Fill in your reading below: $$ Voltage\\ =\\ \\Rule{1cm}{0.15mm}{0.15mm} \\ V $$ Finally, read the voltage between the two terminals of the battery in the circuit. Voltage Across the Battery Fill in your reading below: $$ Voltage\\ =\\ \\Rule{1cm}{0.15mm}{0.15mm} \\ V $$ If your voltage reading \u2260 3V, what do you think accounts for the difference? What do you observe when you add the voltage across the resistor to the voltage across the LED? Total Voltage Fill in your reading below: $$ V_{resistor} + V_{led} \\ = \\ \\Rule{1cm}{0.15mm}{0.15mm} \\ V $$ Observation:","title":"Reading Voltages"},{"location":"circuits/tinkercad1/#reading-amperage","text":"Finally, let's use the multimeter as an ammeter to measure the total current (I) being drawn by our circuit. Important Remember: Voltmeter and ohmmeters are wired in parallel to the component being measured. However, ammeters must be wired in series . See https://learn.sparkfun.com/tutorials/series-and-parallel-circuits Wire your multimeter into your circuit in series as illustrated below: Measuring Current What is the current being drawn by the circuit? Provide your answer in both amps (A) and milliamps (mA) What happens to the current if you increase the voltage in the circuit, such as changing the battery from two AA's (3V) to 3 AA's (4.5V)? Similarly, what happens if you leave the voltage alone but increase the resistance in the circuit, such as increasing the resistance of the resistor to 100 \u03a9?","title":"Reading Amperage"}]}